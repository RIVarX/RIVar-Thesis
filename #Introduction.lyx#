#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard

\emph on
Functional Reactive Programming
\emph default
 (FRP) 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional,elliott2009push"
literal "false"

\end_inset

 is a paradigm that abstracts away the need to update variables in response
 to other variables' updates.
 A 
\emph on
reactive variable
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "schuster2016reactive"
literal "false"

\end_inset

 (with some variations also known as 
\emph on
behavior
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push"
literal "false"

\end_inset

, 
\emph on
signal
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "maier2010deprecating"
literal "false"

\end_inset

, 
\emph on
cell
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 and also
\emph on
 reactive value
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "drechsler2014distributed"
literal "false"

\end_inset

) can be assigned by an expression consisting of a set of other reactive
 variables, consequently the value of the variable is set to the value of
 the expression, and continuously re-evaluated in response to changes in
 the value of any of the variables appearing in the expression.
 For example, given two reactive variables 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B+1
\end_layout

\end_inset

 associates the variable 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 with the expression 
\begin_inset ERT
status open

\begin_layout Plain Layout

B+1
\end_layout

\end_inset

, and the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 changes in response to any change in the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The dominating category of software today is components-based applications.
 Components includes client-server components, micro-services, micro-frontends
 
\begin_inset CommandInset citation
LatexCommand cite
key "Geers2020"
literal "false"

\end_inset

 and so on.
 In such applications, components' instances (including objects) coordinate
 their state using (variations of) the observer pattern.
 They therefore suffer from the same drawbacks that the observer pattern
 cause in monolith applications.
 components-based applications can clearly benefit from FRP.
 However, existing implementations of FRP either target specific kinds of
 components which avoid reactive variables in their interface, do not provide
 safe value propagation, or require a third party that manages the whole
 components' state.
\end_layout

\begin_layout Standard
We propose 
\emph on
Reactive Instance Variable
\emph default
 (RIvar for short), which abstracts the reactive variable to the world of
 objects.
 It renounces properties that are undesirable in components, such as global
 centralized knowledge about the topology of the dependency structure among
 reactive variables and a third party that coordinates the state, while
 giving 
\emph on
referential transparenc
\emph default
y 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 guarantee, such that 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

: 
\emph on
the same sequence of 
\emph default
(user)
\emph on
 events produces the same results, regardless of the timing of those events
\emph default
.
 To the best of our knowledge, such a solution has not been proposed before.
 The proposed abstraction thus enables to integrate FRP in the traditional
 semantics of the Object Oriented Programming (OOP) paradigm.
\end_layout

\begin_layout Section
Contribution
\end_layout

\begin_layout Itemize
We propose an abstraction for programming objects to marry FRP with OOP
\end_layout

\begin_layout Itemize
We characterize the design space of existing algorithms for change propagation
 in reactive programming, motivating the need for new algorithms that better
 suit the requirements of object-oriented applications.
\end_layout

\begin_layout Itemize
We propose an abstraction to marry FRP with OOP 
\end_layout

\begin_layout Standard
We introuce semantics for FRP which support cycles and is glitch-free.
 The new semantics is applied with the introduced reactive instance variables,
 being consistent with both 
\emph on
instance variables
\emph default
 from OOP and 
\emph on
reactive variables
\emph default
 from FRP.
 We then implement a prototype of an application and compare it against
 other approaches and solutions.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Outline.}
\end_layout

\end_inset

 Chapter 3 presents a motivation example, Chapter 4 presents the proposed
 semantics, Chapter 5 uses the new semantics by implementing the new type
 
\emph on
RIvar
\emph default
 for C# programming language.
 Chapter 6 evaluate the results by the help of a prototype application.
\end_layout

\end_body
\end_document
