#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Adequacy of The Model
\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Modeling"
plural "false"
caps "false"
noprefix "false"

\end_inset

 we presented a new model to FRP that provides adding and supporting any
 formula, while achieving referential transparency property.
 In supporting any formula, we handle special graphs.
 In this section we will compare the model against competitors, in the way
 they handle the special graphs.
\end_layout

\begin_layout Section
Glitch
\end_layout

\begin_layout Standard
A variable might have several updates caused by a single update, e.g., in
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Glitch"
plural "false"
caps "false"
noprefix "false"

\end_inset

, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 leads to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

C
\end_layout

\end_inset

, each of them lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

D
\end_layout

\end_inset

.
 The updates that are not the last update, are incorrect, and called 
\emph on
glitch
\emph default
.
 This is handled by doing topological sorting 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

, so each of the variables will be updated after all its dependencies have
 already been updated.
 But we cannot use this method for two reasons.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}  
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (3,7) {A};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (2,5) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (C) at (4,5) {C};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (D) at (3,3) {D};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (B);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (C);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge  (D);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (C) edge  (D);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(B) + (0,1)$)    {B:=A+1};
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(C) + (0,1)$)    {C:=A+1};
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(D) + (0,1)$)    {D:=B+C};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}  
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Glitch"

\end_inset

Glitch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
First, a topological sorting is possible only when the dependency graph
 has no cycles, in contrast to our conception that every dependency is possible.
 Second, topological sorting means managing the variables centrally, in
 contrast to the concept of objects managing their variables on their own.
 The need to manage the updates with a decentralized settings reminds the
 distributed settings.
\end_layout

\begin_layout Standard
The decentralized and distributed share the property that it is not applicable
 to have “global centralized knowledge about the topology of the dependency
 structure” 
\begin_inset CommandInset citation
LatexCommand cite
key "drechsler2014distributed"
literal "false"

\end_inset

.
 However, they are not distinct.
 Whereas distributed settings have challenges related to the network.
 FRP with decentralized settings is more about respecting encapsulation.
 Therefore, and because we support cycles, adapting existing algorithms
 becomes irrelevant most of the times.
\end_layout

\begin_layout Standard
We use the strategy like in the distributed settings, to attach data to
 the values 
\begin_inset CommandInset citation
LatexCommand cite
key "shibanai2018distributed,proencca2017quality"
literal "false"

\end_inset

.
 However we avoid the situation in the distributed settings, that the data
 about variables is public.
 The data becomes public, because the glitch is handled by tracking variables'
 versions, and because information about variables' versions is attached
 with the values.
\end_layout

\begin_layout Standard
Our order model reminds the order of 
\emph on
updates
\emph default
 described in the distributed system model 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics"
literal "false"

\end_inset

.
 In our order model, an incorrect (glitch) value (update), is considered
 as less than an existing value, so it is ignored.
 For example, in the dependency graph of 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Glitch"
plural "false"
caps "false"
noprefix "false"

\end_inset

, D with timestamps set {1}, getting an update depending on updated B {2}
 and not updated C {1}, produces timestamps set {1,2} that is a superset
 of the existing timestamps {1}.
 According to the order model, a superset is not considered greater so it
 is ignored.
\end_layout

\begin_layout Standard
Our model seems to solve only types of glitches (among 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics"
literal "false"

\end_inset

) caused from a single update for a single variable.
 This should satisfy many applications.
 Actualy, for UI application, glitch may be not a problem, because a temporary
 incomplete calculation is replaced very fast with the updated values.
 Anyway, for more strict requirements, such like requiring several synced
 variables, there is a possible solution named 
\emph on
source unification
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "watanabecomplete"
literal "false"

\end_inset

, to declare a variable deriving the variables.
\end_layout

\begin_layout Section
Cycles
\end_layout

\begin_layout Standard
Cycles might lead to infinite loops.
 Furthermore, ignoring repeating updates might lead to incomplete calculations,
 because the first updates might be glitches.
 The needed number of iterations or the condition when to stop is various.
 
\end_layout

\begin_layout Paragraph
Avoiding
\end_layout

\begin_layout Standard
In 
\emph on
true FRP
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 the graph must not have cycles, because the code is constructed similar
 to pure functions.
 The functional style is used in order to achieve the 
\emph on
referential transparency 
\emph default
property, i.e., the same input produces consistenctly the same output.
 
\end_layout

\begin_layout Standard
In addition, in 
\emph on
glitch free
\emph default
 FRP, there are special algoritms to prevent from the incomplete updates
 .
 Indeed, avoiding cycles is a necessary condition to the algorithms 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics,bainomugisha2013survey"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Cycles are not handled by default also by Microsoft Excel (with the term
\emph on
 circular dependencies
\emph default
).
 Also React provides only one-way dataflow 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

, and so also 
\begin_inset CommandInset citation
LatexCommand cite
key "marum2020unified"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
There is also an approach to avoid the glitches
\begin_inset Foot
status open

\begin_layout Plain Layout
https://staltz.com/rx-glitches-arent-actually-a-problem.html
\end_layout

\end_inset

: variable depends on several variables with a single ancestor will be defined
 directly by that ancestor.
 
\end_layout

\begin_layout Paragraph
Limitation
\end_layout

\begin_layout Paragraph
Iterations
\end_layout

\begin_layout Standard
In contrast, FrTime and other FRP implementations 
\begin_inset CommandInset citation
LatexCommand cite
key "demetrescu2011reactive"
literal "false"

\end_inset

 support cycles such as by providing a keyword 
\emph on
delay
\emph default
 to break an update loop.
 However, the solution is a 
\begin_inset Quotes eld
\end_inset

compromise consistent
\begin_inset Quotes erd
\end_inset

.
 As explained, variables might not complete the calculation by a single
 update (that might be a glitch).
 A more reliable solution is provided by Microsoft Excel, when changing
 the default behavior to avoid cycles by one of the suggested 
\begin_inset Quotes eld
\end_inset

calculation options
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://support.microsoft.com/en-us/office/remove-or-allow-a-circular-reference-85
40bd0f-6e97-4483-bcf7-1b49cd50d123
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The first option is to terminate the updates after an arbitrary iterations
 amount.
 The second option is to ignore an update if the new value has not been
 changed comparing to the value that the variable contains, or changed only
 less than an arbitrary threshold.
\end_layout

\begin_layout Standard
Terminating the updates after an arbitrary iterations amount, may be a solution.
 However, the developer should find the balance, what constant number to
 choose.
 It might be difficult to find out the minimum number, that is the needed
 amount for applications with many dependencies.
 While, an high amount might perform low perfomance by unnecessary updates.
\end_layout

\begin_layout Standard
In the second method the developers need to find a threshold.
 The threshold is needed due to loose of information though calculations,
 e.g., In an application that contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A/3
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B*3
\end_layout

\end_inset

, if the user set 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 might be calculated and updated with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100/3=0.33
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 should not be updated with the new calculated value 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.33*3=0.99
\end_layout

\end_inset

, consequently the chosen constant threshold should be less than 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.01
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
—-
\end_layout

\begin_layout Standard
In order to protect against infinite loop
\end_layout

\begin_layout Standard
Previous approaches provides solutions to cycles but did not provide semantics
 to cycles, but solutions to the phenomenon.
\end_layout

\begin_layout Standard
According to previous approaches, the data-dependencies should be hierarchical.
 
\end_layout

\begin_layout Standard
—–
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (0,5) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3.5,5) {B};       
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge [bend left] (B);  
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge [bend left] (A);
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(A) + (1.75,-0.75)$)    {A:=B/3};
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(A) + (1.75,0.75)$)    {B:=A*3};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loosing informCycle while loose of information
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
—-
\end_layout

\begin_layout Standard
It is likely that infinite loops happens because of 
\emph on
indepedent definitions
\emph default
 to update variable in response to the other variables' updates.
 Nevertheless, The problem will not happen if the new definitions only derive
 existing variables.
\end_layout

\begin_layout Standard
In case of mutual recursions such like in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:simple-cycle"
plural "false"
caps "false"
noprefix "false"

\end_inset

 there might be infinite loops, caused from the cycle that A should update
 B, and B should update A.
\end_layout

\begin_layout Standard
is defined by B and B is defined by A.
\end_layout

\begin_layout Standard
Our model supports cycles caused from mutual recursions, where reactive
 variables are defined in terms of each other, e.g., the FRP application in
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:simple-cycle"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
, application might contain 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

 and also 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A
\end_layout

\end_inset

.
 Cycles need a special treatment, because it might lead to infinite loops.
 As in the example, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, that might lead again to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, and so on.
\end_layout

\begin_layout Standard
Cycles need a special treatment, because it might lead to infinite loops.
 As in the example, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, that might lead again to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, and so on.
\end_layout

\begin_layout Standard
Furthermore, in the the 
\emph on
glitch
\emph default
 problem 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

, a variable can have several updates caused by a single update.
 Consequently, ignoring repeating updates might lead to incomplete calculations.
 e.g., in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Glitch"
plural "false"
caps "false"
noprefix "false"

\end_inset

, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

X
\end_layout

\end_inset

 leads to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y1
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y2
\end_layout

\end_inset

, each of them might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 with an incomplete calculation, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 should not ignore a second update.
\end_layout

\begin_layout Paragraph
Avoiding
\end_layout

\begin_layout Standard
In 
\emph on
true FRP
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 the graph must not have cycles, because the code is constructed similar
 to pure functions.
 The functional style is used in order to achieve the 
\emph on
referential transparency 
\emph default
property, i.e., the same input produces consistenctly the same output.
 
\end_layout

\begin_layout Standard
In addition, in 
\emph on
glitch free
\emph default
 FRP, there are special algoritms to prevent from the incomplete updates
 .
 Indeed, avoiding cycles is a necessary condition to the algorithms 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics,bainomugisha2013survey"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Cycles are not handled by default also by Microsoft Excel (with the term
\emph on
 circular dependencies
\emph default
).
 Also React provides only one-way dataflow 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

, and so also 
\begin_inset CommandInset citation
LatexCommand cite
key "marum2020unified"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
There is also an approach to avoid the glitches
\begin_inset Foot
status open

\begin_layout Plain Layout
https://staltz.com/rx-glitches-arent-actually-a-problem.html
\end_layout

\end_inset

: variable depends on several variables with a single ancestor will be defined
 directly by that ancestor.
 
\end_layout

\begin_layout Paragraph
Limitation
\end_layout

\begin_layout Paragraph
Iterations
\end_layout

\begin_layout Standard
In contrast, FrTime and other FRP implementations 
\begin_inset CommandInset citation
LatexCommand cite
key "demetrescu2011reactive"
literal "false"

\end_inset

 support cycles such as by providing a keyword 
\emph on
delay
\emph default
 to break an update loop.
 However, the solution is a 
\begin_inset Quotes eld
\end_inset

compromise consistent
\begin_inset Quotes erd
\end_inset

.
 As explained, variables might not complete the calculation by a single
 update (that might be a glitch).
 A more reliable solution is provided by Microsoft Excel, when changing
 the default behavior to avoid cycles by one of the suggested 
\begin_inset Quotes eld
\end_inset

calculation options
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://support.microsoft.com/en-us/office/remove-or-allow-a-circular-reference-85
40bd0f-6e97-4483-bcf7-1b49cd50d123
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The first option is to terminate the updates after an arbitrary iterations
 amount.
 The second option is to ignore an update if the new value has not been
 changed comparing to the value that the variable contains, or changed only
 less than an arbitrary threshold.
\end_layout

\begin_layout Standard
Terminating the updates after an arbitrary iterations amount, may be a solution.
 However, the developer should find the balance, what constant number to
 choose.
 It might be difficult to find out the minimum number, that is the needed
 amount for applications with many dependencies.
 While, an high amount might perform low perfomance by unnecessary updates.
\end_layout

\begin_layout Standard
In the second method the developers need to find a threshold.
 The threshold is needed due to loose of information though calculations,
 e.g., In an application that contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A/3
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B*3
\end_layout

\end_inset

, if the user set 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 might be calculated and updated with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100/3=0.33
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 should not be updated with the new calculated value 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.33*3=0.99
\end_layout

\end_inset

, consequently the chosen constant threshold should be less than 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.01
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Section
Several Assigments
\end_layout

\begin_layout Standard
Our model support variables depending on several expressions such as in
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Several-Assigments"
plural "false"
caps "false"
noprefix "false"

\end_inset

, while in runtime values are infered according to time, i.e., the variable's
 current value depends on the recent input events.
 On top of this, our model considers dependencies graphs that are not acyclic
 as graphs containing variables feed from several sources.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (2,5) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (C) at (4,5) {C};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (3,3) {A};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge  (A);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (C) edge  (A);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(B) + (0,-1)$)    {A:=B+1};
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(C) + (0,-1)$)    {A:=C+1};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Several-Assigments"

\end_inset

Several Assigments
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
FRP
\end_layout

\begin_layout Standard
In FRP, a reactive variable 
\emph on
is
\emph default
 the expression it is related to.
 The assigment operator is related to the imperative paradigm, not to the
 functional paradigm.
 However, languages in which the assigment symbol is used in the context
 of functional programming, means that the left side variable is the name
 of the assigned function.
 Similary in FRP, a formula 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=Var
\end_layout

\end_inset

 declares 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 as a function that its body is 
\begin_inset ERT
status open

\begin_layout Plain Layout

Var
\end_layout

\end_inset

.
 Adding statement such as 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=Tar
\end_layout

\end_inset

, is not suitable to the paradigm.
 In terms of reactive variables we cannot relate several sources to a single
 variable so we are forced to use the events abstraction.
\end_layout

\begin_layout Standard
In ReactiveX and Sodium, several streams can be merged into one stream by
 the use of a 
\emph on
merge
\emph default
 operator.
 ReactiveX does the merge based on the time according the runtime traversal
 order, which is unpredictable 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

.
 Sodium provides predictability by forcing the user to define how to merge
 the streams.
 The way how to merge the streams is an open issue with no general problem.
\end_layout

\begin_layout Standard
If the developer needs to specify the correct order, it is in contrast to
 the functional paradigm.
 The functional paradigm was meant to eliminate handling time.
 If the developer needs to handle time, it is not clear whether the paradigm
 outperforms the alternative paradigm, in which time is handled by the use
 of states and events 
\begin_inset CommandInset citation
LatexCommand cite
key "abelson1996structure"
literal "false"

\end_inset

.
 Our model handles the merge problem providing the developers the high level
 abstration without to handle time.
 
\end_layout

\begin_layout Subsection
Events
\end_layout

\begin_layout Standard
In simple cases our model reminds the behavior when using events: when several
 events handlers calculate a single variable, the variable's value is according
 to the latest triggered event.
\end_layout

\begin_layout Subsection
Constraints
\end_layout

\begin_layout Standard
Our model provide the options to declare several statement relating several
 expressions to a single variable.
 In terms of constraints, this is named 
\emph on
conflict.

\emph default
 As presented in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Comparing-to-Constraints"
plural "false"
caps "false"
noprefix "false"

\end_inset

, our model handles the conflicts similar to constraints systems.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Comparing-to-Constraints"

\end_inset

Comparing to Constraints Systems
\end_layout

\begin_layout Standard
This thesis is like constraints systems, providing consistency between variables.
 However in constraints systems, developer are forced to one block of code
 that run on a single machine, while this thesis provides modular architecture.
 
\end_layout

\begin_layout Subsection
Multi-way Constraints
\end_layout

\begin_layout Standard
In constraints systems, we can declare 
\begin_inset ERT
status open

\begin_layout Plain Layout

A=B+C
\end_layout

\end_inset

, and each user update, to any of the variables, follows an automatic update
 to the left variables.
 With the proposed Rivars, it is implemented by declaring three formulas:
 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B+C
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A-C
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

C:=A-B
\end_layout

\end_inset

.
 However, the long verbosity exists also in constraints systems, when developers
 need specifying methods to satisfy the constraints.
 In addition, building blocks can easily built on top of our thesis.
 This means more extensions can be implemented by combining several formulas
 into a single constraint.
\end_layout

\begin_layout Subsection
Handle Consistency
\end_layout

\begin_layout Standard
As mentioned, in constraints systems, we can declare 
\begin_inset ERT
status open

\begin_layout Plain Layout

A=B+C
\end_layout

\end_inset

, and each user update, to any of the variables, follows an automatic update
 to the left variables.
 However, it is not clear what variable's value should be changed, especially
 when both other variables are not empty.
\end_layout

\begin_layout Standard
The same question is arisen when declaring RIvar' formulas 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B+C
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A-C
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

C:=A-B
\end_layout

\end_inset

.
 Our merge method produce variable's values according to the total order
 over the propogated values, that is derived from a total order over the
 external input events.
 In other words, values produced from old events are overidden by new ones.
\end_layout

\begin_layout Standard
As in 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

, first, constraints systems handle consistency according 
\emph on
hierarchical
\emph default
 consraints, that is to ignore constraints if they belong to the low levels
 of hierarchy.
 Second, they consider external inputs as constraints, for example the constrain
t 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=1
\end_layout

\end_inset

 is added when the user set 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 with 
\begin_inset ERT
status open

\begin_layout Plain Layout

1
\end_layout

\end_inset

.
 Third, external inputs' constraints are set in the hierarchy, according
 to the events' order.
\end_layout

\begin_layout Standard
Consequently, the decision what variables to update in the automatic updates
 seems the same.
 
\end_layout

\begin_layout Subsection
Decentralized Calculation
\end_layout

\begin_layout Standard
Constraints systems (and most reactive programming implementations
\begin_inset CommandInset citation
LatexCommand cite
key "drechsler2014distributed"
literal "false"

\end_inset

) manage the constraints and handle them by a one centralized procedure.
 Similary is the approach in the code, the applications' code are of one
 block, because: 
\begin_inset Quotes eld
\end_inset

If the one-way constraints are defined in separate places, co-ordinating
 these constraints can be a major software engineering problem
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "sannella1993multi"
literal "false"

\end_inset

.
 Consequently, the market which needs modular solutions, does not adopt
 such centerlized solutions 
\begin_inset CommandInset citation
LatexCommand cite
key "marheim2017domain"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
???????????
\end_layout

\begin_layout Standard
An application commences scaling might have long pathes of dependencies.
 Dependency graphs might contain cycles, e.g., as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:A-simple-dependency-2-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, application might contain 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

 and also 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
—
\end_layout

\begin_layout Standard
Dependency graphs might contain cycles, e.g., as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:A-simple-dependency-2-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, application might contain 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

 and also 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A
\end_layout

\end_inset

.
 Cycles need a special treatment, because it might lead to infinite loops.
 As in the example, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, that might lead again to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, and so on.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (0,5) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3.5,5) {B};       
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge [bend left] (B);  
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge [bend left] (A);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-simple-dependency-2-1"

\end_inset

A simple dependency graph with cycles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Furthermore, in the the 
\emph on
glitch
\emph default
 problem 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

, a variable can have several updates caused by a single update.
 Consequently, ignoring repeating updates might lead to incomplete calculations.
 e.g., in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Glitch-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 leads to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y1
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y2
\end_layout

\end_inset

, each of them might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 with an incomplete calculation, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 should not ignore a second update.
\end_layout

\begin_layout Standard
In the strategy that a RIVar can be assigned externaly, adding a formula
 to the existing formulas handled by the FRP runtime.
 Any added formula might extend the dependencies graph to being a special
 graph.
\end_layout

\begin_layout Paragraph*
Glitch
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (1,7) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (3,7) {A};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (C) at (5,7) {C};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (op1) at (2,5) {+};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (op2) at (4,5) {+};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (op3) at (3,3) {*};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=diamond,draw=black] (eq) at (3,1) {=};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (T) at (3,-1) {T};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge  (op1);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (C) edge  (op2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (op1);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (op2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (op1) edge  (op3);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (op2) edge  (op3);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (op3) edge  (eq);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (eq) edge  (T);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Glitch-1"

\end_inset

Glitch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dependency graphs might contain cycles, e.g., as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:A-simple-dependency-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

, application might contain 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

 and also 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A
\end_layout

\end_inset

.
 Cycles need a special treatment, because it might lead to infinite loops.
 As in the example, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, that might lead again to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, and so on.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (0,5) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3.5,5) {B};       
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge [bend left] (B);  
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge [bend left] (A);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-simple-dependency-2"

\end_inset

A simple dependency graph with cycles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Furthermore, in the the 
\emph on
glitch
\emph default
 problem 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

, a variable can have several updates caused by a single update.
 Consequently, ignoring repeating updates might lead to incomplete calculations.
 e.g., in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Glitch-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

X
\end_layout

\end_inset

 leads to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y1
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y2
\end_layout

\end_inset

, each of them might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 with an incomplete calculation, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 should not ignore a second update.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (0,5) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3.5,5) {B};       
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge [bend left] (B);  
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge [bend left] (A);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-simple-dependency-1"

\end_inset

A simple dependency graph with cycles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (1,7) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (3,7) {A};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (op1) at (2,5) {+};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (C) at (4,5) {C};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=diamond,draw=black] (eq1) at (2,3) {=};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=diamond,draw=black] (eq2) at (4,3) {=};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (T) at (3,1) {T};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge  (op1);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (op1);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (op1) edge  (eq1);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (C) edge  (eq2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (eq1) edge  (T);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (eq2) edge  (T);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\begin_layout Plain Layout

T:=A+B
\end_layout

\begin_layout Plain Layout

T:=C
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Multiple-Assigment
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
?????
\end_layout

\begin_layout Paragraph
Conflicts
\end_layout

\begin_layout Standard
Hotdrink 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

 maintains priority, when a user updates a variable, its priority becomes
 the highest.
 The values of the variables with the old priority is overridden by calculating
 according to the variables with the higher priority.
 The variables and dependencies are managed by a centralized algorithm named
 
\emph on
constraints solver
\emph default
.
\end_layout

\begin_layout Standard
In the traditional programming, the developers uses state to recognize when
 to update or not to update, and when to trigger an event or to not trigger
 an event.
 Consequently, it might be difficult to comprehend the variables and dependencie
s of the functional requirements (required application logic).
 because the code is tangled with non-functional requirements consisting
 of the internal variables (state) and conditions to technically implement
 (as described, to recognize when to update or not to update) the functional
 requirements.
\end_layout

\begin_layout Section
??????
\end_layout

\begin_layout Paragraph*
Decenterlized/No-Isolation
\end_layout

\begin_layout Standard
In the core of OOP paradigm, objects should hide their variables.
 So instance variables that need to be updated according to other instance's
 variable, should invovlve direct interaction, without to require a third
 party.
\end_layout

\begin_layout Standard
Hotdrink manages the variables by the constraints solver.
\end_layout

\begin_layout Paragraph*
Any dependency
\end_layout

\begin_layout Standard
Classes or types that contains reactive instance variables in their interface,
 allow to declare any dependency from those instance variables.
 If cycles are avoided such as in Soduium, then there is the limitation
 to avoid from declaring certain dependencies.
\end_layout

\begin_layout Paragraph*
Predictable Propogation
\end_layout

\begin_layout Standard
The core of the FRP paradigm is to provide predictable propogation.
 by the referntial transparcncy property, the same sequence of input produce
 consistenly the same output.
\end_layout

\begin_layout Standard
If there are cycles, if the (Bridging the gui gap with reactive values and
 relations...)
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Safe Propogation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any dependency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decenterlized
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FrTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReactiveX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sodium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed REscala
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hotdrink
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
????????
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unsafe Propogation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No Cycles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Centerlized
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FrTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReactiveX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sodium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed REscala
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hotdrink
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
???????
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
unsupported constructions, unpredictable results or to no-isolation
\end_layout

\end_body
\end_document
