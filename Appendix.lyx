#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

: Library Documentation 
\end_layout

\begin_layout Part*
\begin_inset External
	template PDFPages
	filename rivarjs_guide.pdf
	display false
	extra LaTeX "pages=-"

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

: Source Code
\end_layout

\begin_layout Section

\series bold
Signal.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

export class Signal {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  static _counter=0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  constructor(value, timeStamps) {
\end_layout

\begin_layout Plain Layout

    this.value = value;
\end_layout

\begin_layout Plain Layout

    this.timeStamps = timeStamps || [++Signal._counter];
\end_layout

\begin_layout Plain Layout

  //  console.log("new Signal " + this.timeStamps);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  compareTo(other) {
\end_layout

\begin_layout Plain Layout

    if (this.IsPrioritized(other, this))
\end_layout

\begin_layout Plain Layout

        return -1;
\end_layout

\begin_layout Plain Layout

    if (this.IsPrioritized(this, other))
\end_layout

\begin_layout Plain Layout

        return 1;
\end_layout

\begin_layout Plain Layout

    return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

IsPrioritized(signal, thanSignal) {
\end_layout

\begin_layout Plain Layout

  const signalSet = signal?.timeStamps || [0];
\end_layout

\begin_layout Plain Layout

  const otherSignalSet = thanSignal?.timeStamps || [0];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  const SignalOnlySet = signalSet.filter(newSignal => !otherSignalSet.includes(new
Signal));
\end_layout

\begin_layout Plain Layout

  const otherSignalOnlySet = otherSignalSet.filter(oldSignal => !signalSet.include
s(oldSignal));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (otherSignalOnlySet.length > 0 && SignalOnlySet.length > 0 && SignalOnlySet.ev
ery(newSignal => otherSignalOnlySet.every(oldSignal => newSignal > oldSignal)))
 {
\end_layout

\begin_layout Plain Layout

    // fresh data
\end_layout

\begin_layout Plain Layout

    return true;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  if (signal != null && signalSet.length > 0 && SignalOnlySet.length === 0
 && otherSignalOnlySet.length > 0) {
\end_layout

\begin_layout Plain Layout

    // depends on less amount of events
\end_layout

\begin_layout Plain Layout

    return true;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  equals(other) {
\end_layout

\begin_layout Plain Layout

    if (this.value !== other.value) {
\end_layout

\begin_layout Plain Layout

      return false;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    if (this.timeStamps.length !== other.timeStamps.length) {
\end_layout

\begin_layout Plain Layout

      return false;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    for (let i = 0; i < this.timeStamps.length; i++) {
\end_layout

\begin_layout Plain Layout

      if (this.timeStamps[i] !== other.timeStamps[i]) {
\end_layout

\begin_layout Plain Layout

        return false;
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return true;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

export default Signal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
Lift.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

import { Signal } from './Signal.js';
\end_layout

\begin_layout Plain Layout

import { combineLatest, share, scan, distinctUntilChanged, map } from 'rxjs';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function produceResult(resultSelector, x, y) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (x && y) {
\end_layout

\begin_layout Plain Layout

    if (x.value !== undefined && x.value !== null && y.value !== undefined
 && y.value !== null) {
\end_layout

\begin_layout Plain Layout

      return new Signal(resultSelector(x.value, y.value), [...new Set([...x.timeStamps,
 ...y.timeStamps])]);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return new Signal(undefined, [...new Set([...x.timeStamps, ...y.timeStamps])]);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  if (x) {
\end_layout

\begin_layout Plain Layout

    return new Signal(undefined, [...new Set([...x.timeStamps, 0])]);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  if (y) {
\end_layout

\begin_layout Plain Layout

    return new Signal(undefined, [...new Set([...y.timeStamps, 0])]);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  return undefined;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

function monotonic(source) {
\end_layout

\begin_layout Plain Layout

  return source.pipe(
\end_layout

\begin_layout Plain Layout

    scan((previous, current) => current.compareTo(previous) > 0 ? current
 : previous), distinctUntilChanged()
\end_layout

\begin_layout Plain Layout

  );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

export function lift(func, operand1, operand2) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (operand2 != undefined) {
\end_layout

\begin_layout Plain Layout

    const firstStream = monotonic(operand1);
\end_layout

\begin_layout Plain Layout

    const secondStream = monotonic(operand2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    const combinedStream = combineLatest([firstStream, secondStream],
\end_layout

\begin_layout Plain Layout

      (x, y) => produceResult(func, x, y));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return combinedStream.pipe(share());
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else {
\end_layout

\begin_layout Plain Layout

    return monotonic(operand1)
\end_layout

\begin_layout Plain Layout

      .pipe(map(x => new Signal(func(x.value), x.timeStamps)))
\end_layout

\begin_layout Plain Layout

      .pipe(share());
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
RIVar.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

import { Subject, share } from 'rxjs';
\end_layout

\begin_layout Plain Layout

import { map, filter, startWith, withLatestFrom
\end_layout

\begin_layout Plain Layout

} from 'rxjs/operators';
\end_layout

\begin_layout Plain Layout

import { Signal } from './Signal.js';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

export class RIVar extends Subject {
\end_layout

\begin_layout Plain Layout

  constructor() {
\end_layout

\begin_layout Plain Layout

    super();
\end_layout

\begin_layout Plain Layout

    this.streamOfChangesInSources=[]; // for debugging
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  set(source) {
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

    const targetWithInitialValue = this.pipe(startWith(new Signal(null, [0])));
\end_layout

\begin_layout Plain Layout

    const streamOfChanges = source.pipe(
\end_layout

\begin_layout Plain Layout

      withLatestFrom(targetWithInitialValue),
\end_layout

\begin_layout Plain Layout

      map(([valueInSource, valueInTarget]) => ({ valueInSource, valueInTarget
 })));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    const streamOfChangesInSource = streamOfChanges.pipe(
\end_layout

\begin_layout Plain Layout

      filter(change => change.valueInSource && change.valueInSource.compareTo(chang
e.valueInTarget) > 0),
\end_layout

\begin_layout Plain Layout

      map(change => change.valueInSource), share());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      this.streamOfChangesInSources.push(streamOfChangesInSource); // for
 debugging
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    streamOfChangesInSource.subscribe(x=>{
\end_layout

\begin_layout Plain Layout

      this.next(x);
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  next(value) {
\end_layout

\begin_layout Plain Layout

   if(!this.prev||!(this.prev.compareTo(value) === 0)){
\end_layout

\begin_layout Plain Layout

    this.prev=value;
\end_layout

\begin_layout Plain Layout

    super.next(value);
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

   else{
\end_layout

\begin_layout Plain Layout

    this.prev=value;
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

  }  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

: Integration with React
\end_layout

\begin_layout Section

\series bold
RIVarView.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

import React from 'react';
\end_layout

\begin_layout Plain Layout

import { useState } from 'react';
\end_layout

\begin_layout Plain Layout

import { Signal } from 'rivarjs';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const RIVarView = ({ children, rivar }) => {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  const [value, setValue] = useState(0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  rivar.subscribe((signal) => {
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    if (signal.value && value !== signal.value.toString()) {
\end_layout

\begin_layout Plain Layout

      setValue(signal.value.toString());
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  });
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  const change = (value) => {
\end_layout

\begin_layout Plain Layout

    rivar.next(new Signal(value));
\end_layout

\begin_layout Plain Layout

  };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return (
\end_layout

\begin_layout Plain Layout

    <div>
\end_layout

\begin_layout Plain Layout

      {children({value, change})}
\end_layout

\begin_layout Plain Layout

    </div>
\end_layout

\begin_layout Plain Layout

  );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

export default RIVarView;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

: Drug Administration Sample
\end_layout

\begin_layout Section

\series bold
Bag.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

import { RIVar, lift } from 'rivarjs';
\end_layout

\begin_layout Plain Layout

const div = (x, y) => (x / y).toFixed(2);
\end_layout

\begin_layout Plain Layout

const mul = (x, y) => x * y;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

export default class Bag {
\end_layout

\begin_layout Plain Layout

  constructor() {
\end_layout

\begin_layout Plain Layout

    this.amount = new RIVar();
\end_layout

\begin_layout Plain Layout

    this.volume = new RIVar();
\end_layout

\begin_layout Plain Layout

    this.concentration = new RIVar();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    this.concentration.set(lift(div, this.amount, this.volume));
\end_layout

\begin_layout Plain Layout

    this.amount.set(lift(mul, this.concentration, this.volume));
\end_layout

\begin_layout Plain Layout

    this.volume.set(lift(div, this.amount, this.concentration));
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
Pump.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

import { RIVar, lift } from 'rivarjs';
\end_layout

\begin_layout Plain Layout

const div = (x, y) => (x / y).toFixed(2);
\end_layout

\begin_layout Plain Layout

const mul = (x, y) => x * y;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  export default class Pump {
\end_layout

\begin_layout Plain Layout

    constructor(bag) {
\end_layout

\begin_layout Plain Layout

      this.rate = new RIVar();
\end_layout

\begin_layout Plain Layout

      this.dose = new RIVar();
\end_layout

\begin_layout Plain Layout

      this.duration = new RIVar();
\end_layout

\begin_layout Plain Layout

      this.theBag = bag;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

      this.dose.set(lift(div, this.theBag.amount, this.duration));
\end_layout

\begin_layout Plain Layout

      this.rate.set(lift(div, this.theBag.volume, this.duration));
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

      this.duration.set(lift(div, this.theBag.amount, this.dose));
\end_layout

\begin_layout Plain Layout

      this.duration.set(lift(div, this.theBag.volume, this.rate));
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

      this.theBag.amount.set(lift(mul, this.duration, this.dose));
\end_layout

\begin_layout Plain Layout

      this.theBag.volume.set(lift(mul, this.duration, this.rate));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
DrugAdministration Mocha Tests
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

describe('DrugAdministration', function () {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  it('should calculate concentration correctly', function () {
\end_layout

\begin_layout Plain Layout

    const bag = new Bag();
\end_layout

\begin_layout Plain Layout

    let result = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    bag.concentration.subscribe({
\end_layout

\begin_layout Plain Layout

      next: (value) => { result = value.value }
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    bag.amount.next(new Signal(100));
\end_layout

\begin_layout Plain Layout

    bag.volume.next(new Signal(200));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    assert.strictEqual(result, 0.5);
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  it('should calculate concentration correctly with pump', function () {
\end_layout

\begin_layout Plain Layout

    const bag = new Bag();
\end_layout

\begin_layout Plain Layout

    let result = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    bag.concentration.subscribe({
\end_layout

\begin_layout Plain Layout

      next: (value) => { result = value.value }
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    const pump = new Pump(bag);
\end_layout

\begin_layout Plain Layout

    bag.amount.next(new Signal(100));
\end_layout

\begin_layout Plain Layout

    bag.volume.next(new Signal(200));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    assert.strictEqual(result, 0.5);
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  it('should not duplicate notifications', function () {
\end_layout

\begin_layout Plain Layout

    const bag = new Bag();
\end_layout

\begin_layout Plain Layout

    const pump = new Pump(bag);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    let result = 0;
\end_layout

\begin_layout Plain Layout

    let numberOfUpdates = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    bag.amount.subscribe({
\end_layout

\begin_layout Plain Layout

      next: (value) => {
\end_layout

\begin_layout Plain Layout

        result = value.value;
\end_layout

\begin_layout Plain Layout

        numberOfUpdates++;
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    bag.concentration.next(new Signal(0.5));
\end_layout

\begin_layout Plain Layout

    pump.rate.next(new Signal(10));
\end_layout

\begin_layout Plain Layout

    pump.duration.next(new Signal(5));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    assert.strictEqual(numberOfUpdates, 1);
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
BagComponent.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

import RIVarView from "rivarjs/integration/react/RIVarView";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

export default function BagComponent({ bag }) {
\end_layout

\begin_layout Plain Layout

  return (
\end_layout

\begin_layout Plain Layout

    <>
\end_layout

\begin_layout Plain Layout

      <tr>
\end_layout

\begin_layout Plain Layout

        <td>Drug</td>
\end_layout

\begin_layout Plain Layout

        <td>Concentration</td>
\end_layout

\begin_layout Plain Layout

        <td>Volume</td>
\end_layout

\begin_layout Plain Layout

      </tr>
\end_layout

\begin_layout Plain Layout

      <tr>
\end_layout

\begin_layout Plain Layout

        <td>
\end_layout

\begin_layout Plain Layout

          <RIVarView rivar={bag.amount}>
\end_layout

\begin_layout Plain Layout

            {({ value, change }) => {
\end_layout

\begin_layout Plain Layout

              return <input
\end_layout

\begin_layout Plain Layout

                type="number"
\end_layout

\begin_layout Plain Layout

                value={value}
\end_layout

\begin_layout Plain Layout

                onChange={(event) => change(event.target.value)}
\end_layout

\begin_layout Plain Layout

              />;
\end_layout

\begin_layout Plain Layout

            }}
\end_layout

\begin_layout Plain Layout

          </RIVarView>
\end_layout

\begin_layout Plain Layout

        </td>
\end_layout

\begin_layout Plain Layout

        <td>
\end_layout

\begin_layout Plain Layout

          <RIVarView rivar={bag.concentration}>
\end_layout

\begin_layout Plain Layout

            {({ value, change }) => {
\end_layout

\begin_layout Plain Layout

              return <input
\end_layout

\begin_layout Plain Layout

                type="number"
\end_layout

\begin_layout Plain Layout

                value={value}
\end_layout

\begin_layout Plain Layout

                onChange={(event) => change(event.target.value)}
\end_layout

\begin_layout Plain Layout

              />;
\end_layout

\begin_layout Plain Layout

            }}
\end_layout

\begin_layout Plain Layout

          </RIVarView>
\end_layout

\begin_layout Plain Layout

        </td>
\end_layout

\begin_layout Plain Layout

        <td>
\end_layout

\begin_layout Plain Layout

          <RIVarView rivar={bag.volume}>
\end_layout

\begin_layout Plain Layout

            {({ value, change }) => {
\end_layout

\begin_layout Plain Layout

              return <input
\end_layout

\begin_layout Plain Layout

                type="number"
\end_layout

\begin_layout Plain Layout

                value={value}
\end_layout

\begin_layout Plain Layout

                onChange={(event) => change(event.target.value)}
\end_layout

\begin_layout Plain Layout

              />;
\end_layout

\begin_layout Plain Layout

            }}
\end_layout

\begin_layout Plain Layout

          </RIVarView>
\end_layout

\begin_layout Plain Layout

        </td>
\end_layout

\begin_layout Plain Layout

      </tr>
\end_layout

\begin_layout Plain Layout

    </>
\end_layout

\begin_layout Plain Layout

  )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
PumpComponent.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

import RIVarView from "rivarjs/integration/react/RIVarView";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

export default function PumpComponent({ pump }) {
\end_layout

\begin_layout Plain Layout

    return (
\end_layout

\begin_layout Plain Layout

        <>
\end_layout

\begin_layout Plain Layout

            <tr>
\end_layout

\begin_layout Plain Layout

                <td>Dose</td>
\end_layout

\begin_layout Plain Layout

                <td>Duration</td>
\end_layout

\begin_layout Plain Layout

                <td>Rate</td>
\end_layout

\begin_layout Plain Layout

            </tr>
\end_layout

\begin_layout Plain Layout

            <tr>
\end_layout

\begin_layout Plain Layout

                <td>
\end_layout

\begin_layout Plain Layout

                    <RIVarView rivar={pump.dose}>
\end_layout

\begin_layout Plain Layout

                        {({ value, change }) => {
\end_layout

\begin_layout Plain Layout

                            return <input
\end_layout

\begin_layout Plain Layout

                                type="number"
\end_layout

\begin_layout Plain Layout

                                value={value}
\end_layout

\begin_layout Plain Layout

                                onChange={(event) => change(event.target.value)}
\end_layout

\begin_layout Plain Layout

                            />;
\end_layout

\begin_layout Plain Layout

                        }}
\end_layout

\begin_layout Plain Layout

                    </RIVarView>
\end_layout

\begin_layout Plain Layout

                </td>
\end_layout

\begin_layout Plain Layout

                <td>
\end_layout

\begin_layout Plain Layout

                    <RIVarView rivar={pump.duration}>
\end_layout

\begin_layout Plain Layout

                        {({ value, change }) => {
\end_layout

\begin_layout Plain Layout

                            return <input
\end_layout

\begin_layout Plain Layout

                                type="number"
\end_layout

\begin_layout Plain Layout

                                value={value}
\end_layout

\begin_layout Plain Layout

                                onChange={(event) => change(event.target.value)}
\end_layout

\begin_layout Plain Layout

                            />;
\end_layout

\begin_layout Plain Layout

                        }}
\end_layout

\begin_layout Plain Layout

                    </RIVarView>
\end_layout

\begin_layout Plain Layout

                </td>
\end_layout

\begin_layout Plain Layout

                <td>
\end_layout

\begin_layout Plain Layout

                    <RIVarView rivar={pump.rate}>
\end_layout

\begin_layout Plain Layout

                        {({ value, change }) => {
\end_layout

\begin_layout Plain Layout

                            return <input
\end_layout

\begin_layout Plain Layout

                                type="number"
\end_layout

\begin_layout Plain Layout

                                value={value}
\end_layout

\begin_layout Plain Layout

                                onChange={(event) => change(event.target.value)}
\end_layout

\begin_layout Plain Layout

                            />;
\end_layout

\begin_layout Plain Layout

                        }}
\end_layout

\begin_layout Plain Layout

                    </RIVarView>
\end_layout

\begin_layout Plain Layout

                </td>
\end_layout

\begin_layout Plain Layout

            </tr>
\end_layout

\begin_layout Plain Layout

        </>
\end_layout

\begin_layout Plain Layout

    )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
App.js
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=none,numbers=none]
\end_layout

\begin_layout Plain Layout

import logo from './logo.svg';
\end_layout

\begin_layout Plain Layout

import './App.css';
\end_layout

\begin_layout Plain Layout

import Bag from './Bag.js';
\end_layout

\begin_layout Plain Layout

import Pump from './Pump.js';
\end_layout

\begin_layout Plain Layout

import BagComponent from './BagComponent';
\end_layout

\begin_layout Plain Layout

import PumpComponent from './PumpComponent';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function App() {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  const bag = new Bag();
\end_layout

\begin_layout Plain Layout

  const pump = new Pump(bag);
\end_layout

\begin_layout Plain Layout

  return (
\end_layout

\begin_layout Plain Layout

   <table>
\end_layout

\begin_layout Plain Layout

    <tbody>
\end_layout

\begin_layout Plain Layout

      <BagComponent bag={bag}/>
\end_layout

\begin_layout Plain Layout

      <PumpComponent pump={pump}/>
\end_layout

\begin_layout Plain Layout

    </tbody>
\end_layout

\begin_layout Plain Layout

   </table>
\end_layout

\begin_layout Plain Layout

  );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

export default App;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
We have also implemented and made the drug administration example, discussed
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Background"
plural "false"
caps "true"
noprefix "false"

\end_inset

, available at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://rivarx.github.io/Evaluation/RIVar/DrugAdministration.html
\end_layout

\end_inset

.
 You can view the source code of the example by using the "view source"
 option in your browser.
 The main components of this example are the 
\begin_inset CommandInset href
LatexCommand href
name "Bag"
target "https://rivarx.github.io/Evaluation/RIVar/Bag.js"
literal "false"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Pump"
target "https://rivarx.github.io/Evaluation/RIVar/Pump.js"
literal "false"

\end_inset

 classes, which are loosely coupled.
 You can find the UML diagram illustrating this in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The state is managed by initializing instances of the Bag and Pump classes
 and binding them to their corresponding fields.
\end_layout

\begin_layout Plain Layout
Additionally, we have provided a public implementation side by side at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://rivarx.github.io/Evaluation/hotdrink/DrugAdministration_Hotdrink.html
\end_layout

\end_inset

, where the drug administration is implemented using Hotdrink.
 Upon observation, both implementations exhibit similar behavior.
 When a field is updated, the fields that rely on the previous input, particular
ly the oldest input, are overwritten.
\end_layout

\begin_layout Plain Layout
In the case of Hotdrink, the introduction of new input triggers the creation
 of an equation constraint at the highest level of the hierarchy, involving
 the variable and the input.
 Plans are then generated, with each plan recursively searching for equations
 where the left variables are determined by preceding equations.
 The plan that satisfies the most constraints in the hierarchy is selected
 and executed.
 This aligns with our propagation approach, as we continue propagating values
 derived from the highest priority values.
 Consequently, the update sequence for both methods—our framework and the
 constraint hierarchy model for GUI—is identical.
\end_layout

\begin_layout Section
OOP
\end_layout

\begin_layout Plain Layout
The assignment operator, 
\begin_inset Formula $\LSTINLINE{:=}$
\end_inset

, links a variable to be continually updated based on an expression, similar
 to traditional FRP implementations.
 However, unlike FRP, this does not replace or override previous assignments.
\end_layout

\begin_layout Plain Layout
As a result, services can make these variables available in their interfaces
 for their clients to use.
 Subclasses can also use the variables belonging to their superclass via
 the specialization interface 
\begin_inset CommandInset citation
LatexCommand cite
key "taivalsaari1996notion"
literal "false"

\end_inset

.
 This concept leads us that the new framework extends the traditional OOP.
\end_layout

\begin_layout Plain Layout
With this new framework, developers can model domain business concepts that
 are connected to graphical user interfaces (GUIs).
 As illustrated in the drug administration example (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), real-world entities can be represented by objects, and their attributes
 can be represented by 
\begin_inset Formula $\RIVar$
\end_inset

s.
 As mentioned in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:PumpCode"
plural "false"
caps "true"
noprefix "false"

\end_inset

, objects' classes can contain assignments in their definitions to continuously
 calculate 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The assignments are part of the objects' internal behavior, which connects
 the public 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The values of the attributes are stored within observable streams, which
 serve as a lower-level representation off 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The input streams can be connected to user interface change events, and
 output streams can trigger field updates that display the calculated values
 from the model.
\end_layout

\begin_layout Plain Layout
The framework empowers OOP framework with enhanced extensibility.
 The unique concept of assignments adding the source to the variable, and
 allowing assignments to be hidden, results in an "extend only" operator.
 This is particularly evident in the inheritance mechanism, where subclasses
 only extend their input stream by inheriting assignments assigned to their
 superclass's reactive instance variables.
 This approach avoids the "fragile base class" issue, where changes in the
 implementation or behavior of a superclass inadvertently affect the behavior
 of its subclasses, even if the subclasses were not intended to be modified.
 Similarly, objects can expose reactive instance variables, and in a composition
, the functionality of objects is only extended.
 Overall, the introduction of this assignment operator has the potential
 to develop software that is open to extensions and closed to modifications,
 aligning with the principles of the Open-Closed Principle (OCP).
\end_layout

\begin_layout Plain Layout
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration"
plural "false"
caps "true"
noprefix "false"

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 class contains the variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 The class contains a formula (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:formula}
\end_layout

\end_inset

) defining 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to be re-evaluated whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 is updated.
 Then once an instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 is created (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:ctor}
\end_layout

\end_inset

), any change to its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 causes its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to re-evaluate.
\end_layout

\begin_layout Plain Layout
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Specialization-Interface"
plural "false"
caps "true"
noprefix "false"

\end_inset

, class 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 extends 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 and adds the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug:=Dose*Duration}
\end_layout

\end_inset

.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Specialization-Interface"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we illustrates 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 by composition.
 In the example, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 is assigned from outside of the object.
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class DrugAdministration{
\end_layout

\begin_layout Plain Layout

  RIVar<double> Drug, Volume
\end_layout

\begin_layout Plain Layout

  RIVar<double> Concentration:=Drug/VolumeOfFluid |
\backslash
label{line:formula}|
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Main(){
\end_layout

\begin_layout Plain Layout

DrugAdministration administration=new DrugAdministration() |
\backslash
label{line:ctor}| 
\end_layout

\begin_layout Plain Layout

administration.Drug=50
\end_layout

\begin_layout Plain Layout

administration.Volume=100 // administration.Concentration=0.5
\end_layout

\begin_layout Plain Layout

administration.Drug=25  // administration.Concentration=0.25
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-Administration"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 class contains the variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 The class contains a formula (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:formula}
\end_layout

\end_inset

) defining 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to be re-evaluated whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 is updated.
 Then once an instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 is created (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:ctor}
\end_layout

\end_inset

), any change to its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 causes its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to re-evaluate.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class ExtendedDrugAdministration {
\end_layout

\begin_layout Plain Layout

  IDrugAdministration drugAdministration
\end_layout

\begin_layout Plain Layout

  ExtendedDrugAdministration(DrugAdministration drugAdministration){ 
\end_layout

\begin_layout Plain Layout

    this.drugAdministration=drugAdministration
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  drugAdministration.Drug:= drugAdministration.Concentration*drugAdministration.Vol
umeOfFluid
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Service-Interface"

\end_inset

 An example to a variable that is assigned externally by an expression.
 The instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 has a variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 which is assigned externaly to be updated according to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class ExtendedDrugAdministration:DrugAdministration {
\end_layout

\begin_layout Plain Layout

  RIVar<double> Dose, Rate, Duration
\end_layout

\begin_layout Plain Layout

  Drug:=Dose*Duration
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Specialization-Interface"

\end_inset

An example of a subclass that assigns variables that belonged to the superclass.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 assigns variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 belonging to its superclass 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
..
\end_layout

\begin_layout Subsection
Repeating Solutions
\end_layout

\begin_layout Plain Layout
If we need to create another unit of software based on an existing one without
 modifying the original unit or impacting the existing clients, creating
 a duplicate or a separate instance might be necessary.
 This duplication can be achieved by cloning the existing codebase and then
 making the necessary changes or customizations specific to the new software.
 Therfore, our seperation causes our framework to be preffered over centeral
 constraints systems.
\end_layout

\begin_layout Plain Layout
Specificaly, hotdrink's code and management is centerized, while our framework
 is based on OOP.
 Our case study presents how we can use the framewrk to develop loosly coupled
 components that can be developed, built and deployed indepedently.
 The bootsrap is introduced in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Bootstrap-of-the-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{UserControl_Bag}
\end_layout

\end_inset

 is like the bag micro frontend, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{UserControl_Pump}
\end_layout

\end_inset

 is like the pump micro frontend.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{UserControl_Bag}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{UserControl_Pump}
\end_layout

\end_inset

 implements the UI and are connected to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 respectively.
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

var bag = new Bag();
\end_layout

\begin_layout Plain Layout

var pump = new Pump(bag);
\end_layout

\begin_layout Plain Layout

var bagUserControl = new UserControl_Bag(bag);
\end_layout

\begin_layout Plain Layout

var pumpUserControl = new UserControl_Pump(pump);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Bootstrap-of-the-1"

\end_inset

Bootstrap of the drug administration components
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
When there is a need to create a new software unit based on an existing
 one without modifying the original unit or impacting existing clients,
 it may be necessary to duplicate or create a separate instance.
 This duplication involves cloning the existing codebase and making specific
 changes or customizations tailored to the new software.
 Consequently, our framework, which embraces this separation approach, becomes
 a preferred choice compared to centralized constraint systems.
\end_layout

\begin_layout Plain Layout
Specifically, while Hotdrink's code and management are centralized, our
 framework is built on the principles of object-oriented programming (OOP).
 In our case study, we demonstrate how our framework facilitates the development
 of loosely coupled components that can be independently developed, built,
 and deployed.
 Figure 1 illustrates the introduced bootstrap process, providing a foundation
 for our framework's functionality.
\end_layout

\begin_layout Plain Layout
...
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Summary -??
\end_layout

\begin_layout Plain Layout
Our approach presents a novel variant for FRP specifically designed for
 calculations performed within objects, that detailed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Motivation"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The new variant adopts the observable stream model (detailed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Observable-Streams"
plural "false"
caps "true"
noprefix "false"

\end_inset

) to address the requirement that object internals should not be updated
 directly from outside, relying on a mediator or centralized mechanism.
 Additionally, as the object's internal calculations involve shared variables,
 the new variant must support multiple assignments to a single variable.
 Lastly, it is crucial to ensure the order of updates to maintain consistency
 within the application.
\end_layout

\begin_layout Plain Layout
We treat as observables, specificaly the assignment is an observable.
 As result, an assignme
\end_layout

\begin_layout Plain Layout
——–
\end_layout

\begin_layout Plain Layout
Our approach focuses on completely separating data dependencies into different
 concerns.
 We identified the problem as stemming from the integration between FRP
 and OOP, specifically in the contract of reactive variable assignment.
 To address this problem, we developed a new variant of FRP that satisfies
 three key requirements and enables the desired settings:
\end_layout

\begin_layout Itemize
Support for complex data dependencies that arise when linking calculations
 to the objects' variables.
\end_layout

\begin_layout Itemize
Avoid coupling to a specific architectural design with a bottleneck of another
 component that has access to the objects' internal state, we adopted a
 "no-mediator" approach where each variable updates its dependencies.
\end_layout

\begin_layout Itemize
Maintaining the property of 
\emph on
predictability
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

.
 In the original FRP, predictability is achieved through a property known
 as functional purity, which ensures that the output of a function depends
 solely on its input and not on any external factors.
 In our variant of FRP, we maintain this property by guaranteeing that "the
 same sequence of events produces the same results, regardless of the timing
 of those events" 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

.
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the exploration, we recognize several types of code repetition, meaning
 that there is no one 
\emph on
single source of truth
\emph default
 (SSOT) for the organizations' business logic.
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
the exploration did not suggested an architetural design with a single source
 of truth to the business rules.
\end_layout

\begin_layout Plain Layout
In the various models, we could not prevented from repeating business logic.
 This has the meaning, that there is no one single source of truth for the
 organizations' business logic.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
