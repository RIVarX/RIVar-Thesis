#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
We have also implemented and made the drug administration example, discussed
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Background"
plural "false"
caps "true"
noprefix "false"

\end_inset

, available at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://rivarx.github.io/Evaluation/RIVar/DrugAdministration.html
\end_layout

\end_inset

.
 You can view the source code of the example by using the "view source"
 option in your browser.
 The main components of this example are the 
\begin_inset CommandInset href
LatexCommand href
name "Bag"
target "https://rivarx.github.io/Evaluation/RIVar/Bag.js"
literal "false"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Pump"
target "https://rivarx.github.io/Evaluation/RIVar/Pump.js"
literal "false"

\end_inset

 classes, which are loosely coupled.
 You can find the UML diagram illustrating this in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The state is managed by initializing instances of the Bag and Pump classes
 and binding them to their corresponding fields.
\end_layout

\begin_layout Plain Layout
Additionally, we have provided a public implementation side by side at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://rivarx.github.io/Evaluation/hotdrink/DrugAdministration_Hotdrink.html
\end_layout

\end_inset

, where the drug administration is implemented using Hotdrink.
 Upon observation, both implementations exhibit similar behavior.
 When a field is updated, the fields that rely on the previous input, particular
ly the oldest input, are overwritten.
\end_layout

\begin_layout Plain Layout
In the case of Hotdrink, the introduction of new input triggers the creation
 of an equation constraint at the highest level of the hierarchy, involving
 the variable and the input.
 Plans are then generated, with each plan recursively searching for equations
 where the left variables are determined by preceding equations.
 The plan that satisfies the most constraints in the hierarchy is selected
 and executed.
 This aligns with our propagation approach, as we continue propagating values
 derived from the highest priority values.
 Consequently, the update sequence for both methods—our framework and the
 constraint hierarchy model for GUI—is identical.
\end_layout

\begin_layout Section
OOP
\end_layout

\begin_layout Plain Layout
The assignment operator, 
\begin_inset Formula $\LSTINLINE{:=}$
\end_inset

, links a variable to be continually updated based on an expression, similar
 to traditional FRP implementations.
 However, unlike FRP, this does not replace or override previous assignments.
\end_layout

\begin_layout Plain Layout
As a result, services can make these variables available in their interfaces
 for their clients to use.
 Subclasses can also use the variables belonging to their superclass via
 the specialization interface 
\begin_inset CommandInset citation
LatexCommand cite
key "taivalsaari1996notion"
literal "false"

\end_inset

.
 This concept leads us that the new framework extends the traditional OOP.
\end_layout

\begin_layout Plain Layout
With this new framework, developers can model domain business concepts that
 are connected to graphical user interfaces (GUIs).
 As illustrated in the drug administration example (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), real-world entities can be represented by objects, and their attributes
 can be represented by 
\begin_inset Formula $\RIVar$
\end_inset

s.
 As mentioned in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:PumpCode"
plural "false"
caps "true"
noprefix "false"

\end_inset

, objects' classes can contain assignments in their definitions to continuously
 calculate 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The assignments are part of the objects' internal behavior, which connects
 the public 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The values of the attributes are stored within observable streams, which
 serve as a lower-level representation off 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The input streams can be connected to user interface change events, and
 output streams can trigger field updates that display the calculated values
 from the model.
\end_layout

\begin_layout Plain Layout
The framework empowers OOP framework with enhanced extensibility.
 The unique concept of assignments adding the source to the variable, and
 allowing assignments to be hidden, results in an "extend only" operator.
 This is particularly evident in the inheritance mechanism, where subclasses
 only extend their input stream by inheriting assignments assigned to their
 superclass's reactive instance variables.
 This approach avoids the "fragile base class" issue, where changes in the
 implementation or behavior of a superclass inadvertently affect the behavior
 of its subclasses, even if the subclasses were not intended to be modified.
 Similarly, objects can expose reactive instance variables, and in a composition
, the functionality of objects is only extended.
 Overall, the introduction of this assignment operator has the potential
 to develop software that is open to extensions and closed to modifications,
 aligning with the principles of the Open-Closed Principle (OCP).
\end_layout

\begin_layout Plain Layout
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration"
plural "false"
caps "true"
noprefix "false"

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 class contains the variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 The class contains a formula (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:formula}
\end_layout

\end_inset

) defining 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to be re-evaluated whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 is updated.
 Then once an instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 is created (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:ctor}
\end_layout

\end_inset

), any change to its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 causes its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to re-evaluate.
\end_layout

\begin_layout Plain Layout
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Specialization-Interface"
plural "false"
caps "true"
noprefix "false"

\end_inset

, class 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 extends 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 and adds the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug:=Dose*Duration}
\end_layout

\end_inset

.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Specialization-Interface"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we illustrates 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 by composition.
 In the example, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 is assigned from outside of the object.
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class DrugAdministration{
\end_layout

\begin_layout Plain Layout

  RIVar<double> Drug, Volume
\end_layout

\begin_layout Plain Layout

  RIVar<double> Concentration:=Drug/VolumeOfFluid |
\backslash
label{line:formula}|
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Main(){
\end_layout

\begin_layout Plain Layout

DrugAdministration administration=new DrugAdministration() |
\backslash
label{line:ctor}| 
\end_layout

\begin_layout Plain Layout

administration.Drug=50
\end_layout

\begin_layout Plain Layout

administration.Volume=100 // administration.Concentration=0.5
\end_layout

\begin_layout Plain Layout

administration.Drug=25  // administration.Concentration=0.25
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-Administration"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 class contains the variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 The class contains a formula (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:formula}
\end_layout

\end_inset

) defining 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to be re-evaluated whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 is updated.
 Then once an instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 is created (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:ctor}
\end_layout

\end_inset

), any change to its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 causes its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to re-evaluate.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class ExtendedDrugAdministration {
\end_layout

\begin_layout Plain Layout

  IDrugAdministration drugAdministration
\end_layout

\begin_layout Plain Layout

  ExtendedDrugAdministration(DrugAdministration drugAdministration){ 
\end_layout

\begin_layout Plain Layout

    this.drugAdministration=drugAdministration
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  drugAdministration.Drug:= drugAdministration.Concentration*drugAdministration.Vol
umeOfFluid
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Service-Interface"

\end_inset

 An example to a variable that is assigned externally by an expression.
 The instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 has a variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 which is assigned externaly to be updated according to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class ExtendedDrugAdministration:DrugAdministration {
\end_layout

\begin_layout Plain Layout

  RIVar<double> Dose, Rate, Duration
\end_layout

\begin_layout Plain Layout

  Drug:=Dose*Duration
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Specialization-Interface"

\end_inset

An example of a subclass that assigns variables that belonged to the superclass.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 assigns variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 belonging to its superclass 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
..
\end_layout

\begin_layout Subsection
Repeating Solutions
\end_layout

\begin_layout Plain Layout
If we need to create another unit of software based on an existing one without
 modifying the original unit or impacting the existing clients, creating
 a duplicate or a separate instance might be necessary.
 This duplication can be achieved by cloning the existing codebase and then
 making the necessary changes or customizations specific to the new software.
 Therfore, our seperation causes our framework to be preffered over centeral
 constraints systems.
 
\end_layout

\begin_layout Plain Layout
Specificaly, hotdrink's code and management is centerized, while our framework
 is based on OOP.
 Our case study presents how we can use the framewrk to develop loosly coupled
 components that can be developed, built and deployed indepedently.
 The bootsrap is introduced in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Bootstrap-of-the-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{UserControl_Bag}
\end_layout

\end_inset

 is like the bag micro frontend, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{UserControl_Pump}
\end_layout

\end_inset

 is like the pump micro frontend.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{UserControl_Bag}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{UserControl_Pump}
\end_layout

\end_inset

 implements the UI and are connected to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 respectively.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

var bag = new Bag();
\end_layout

\begin_layout Plain Layout

var pump = new Pump(bag);
\end_layout

\begin_layout Plain Layout

var bagUserControl = new UserControl_Bag(bag);
\end_layout

\begin_layout Plain Layout

var pumpUserControl = new UserControl_Pump(pump);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Bootstrap-of-the-1"

\end_inset

Bootstrap of the drug administration components
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
When there is a need to create a new software unit based on an existing
 one without modifying the original unit or impacting existing clients,
 it may be necessary to duplicate or create a separate instance.
 This duplication involves cloning the existing codebase and making specific
 changes or customizations tailored to the new software.
 Consequently, our framework, which embraces this separation approach, becomes
 a preferred choice compared to centralized constraint systems.
\end_layout

\begin_layout Plain Layout
Specifically, while Hotdrink's code and management are centralized, our
 framework is built on the principles of object-oriented programming (OOP).
 In our case study, we demonstrate how our framework facilitates the development
 of loosely coupled components that can be independently developed, built,
 and deployed.
 Figure 1 illustrates the introduced bootstrap process, providing a foundation
 for our framework's functionality.
\end_layout

\begin_layout Plain Layout
...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Summary -??
\end_layout

\begin_layout Plain Layout
Our approach presents a novel variant for FRP specifically designed for
 calculations performed within objects, that detailed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Motivation"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The new variant adopts the observable stream model (detailed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Observable-Streams"
plural "false"
caps "true"
noprefix "false"

\end_inset

) to address the requirement that object internals should not be updated
 directly from outside, relying on a mediator or centralized mechanism.
 Additionally, as the object's internal calculations involve shared variables,
 the new variant must support multiple assignments to a single variable.
 Lastly, it is crucial to ensure the order of updates to maintain consistency
 within the application.
\end_layout

\begin_layout Plain Layout
We treat as observables, specificaly the assignment is an observable.
 As result, an assignme
\end_layout

\begin_layout Plain Layout
——–
\end_layout

\begin_layout Plain Layout
Our approach focuses on completely separating data dependencies into different
 concerns.
 We identified the problem as stemming from the integration between FRP
 and OOP, specifically in the contract of reactive variable assignment.
 To address this problem, we developed a new variant of FRP that satisfies
 three key requirements and enables the desired settings:
\end_layout

\begin_layout Itemize
Support for complex data dependencies that arise when linking calculations
 to the objects' variables.
\end_layout

\begin_layout Itemize
Avoid coupling to a specific architectural design with a bottleneck of another
 component that has access to the objects' internal state, we adopted a
 "no-mediator" approach where each variable updates its dependencies.
\end_layout

\begin_layout Itemize
Maintaining the property of 
\emph on
predictability
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

.
 In the original FRP, predictability is achieved through a property known
 as functional purity, which ensures that the output of a function depends
 solely on its input and not on any external factors.
 In our variant of FRP, we maintain this property by guaranteeing that "the
 same sequence of events produces the same results, regardless of the timing
 of those events" 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the exploration, we recognize several types of code repetition, meaning
 that there is no one 
\emph on
single source of truth
\emph default
 (SSOT) for the organizations' business logic.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
the exploration did not suggested an architetural design with a single source
 of truth to the business rules.
\end_layout

\begin_layout Plain Layout
In the various models, we could not prevented from repeating business logic.
 This has the meaning, that there is no one single source of truth for the
 organizations' business logic.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Transitioning to the New FRP Variant: An Example
\end_layout

\begin_layout Standard
We present an example that uses the concept of FRP, with the evolution of
 the application.
 The evaluation revolves around the variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 represents the medication dosage administered to a patient, while 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 indicates whether the application should trigger an alert for abnormal
 medication amounts.
 A formula is employed to establish a relationship between 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

, enabling the automatic determination of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 based on the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=FromInput()
\end_layout

\begin_layout Plain Layout

Alert=IsAbnormal(Amount)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code needs to be modified (indicated using bold font style) when the
 doctor administers the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 in order to calculate the resulting amount.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput()
\end_layout

\begin_layout Plain Layout

__AmountByConcentrationAndVolume=Concentration*Volume__ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),__IsAbnormal(AmountByConcentration AndVolume)
__)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the doctor administers the medication by setting the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

, the medication amount can be calculated using the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose*Duration}
\end_layout

\end_inset

.
 In this scenario, it is necessary to update the code accordingly.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none] 
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput() 
\end_layout

\begin_layout Plain Layout

AmountByConcentrationAndVolume=Concentration*Volume __AmountByDoseAndDuration=Do
se*Duration__ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),
\end_layout

\begin_layout Plain Layout

IsAbnormal(AmountByConcentrationAndVolume),
\end_layout

\begin_layout Plain Layout

__IsAbnormal(AmountByDoseAndDuration)__) 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is evident that whenever additional sources of values are required for
 the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 variable, it becomes necessary to update the assignment of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 variable.
 In large and complex applications, it is possible to overlook such updates,
 leading to inconsistencies between the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
With the new variant of FRP, the process of extension becomes more achievable.
 We begin the process anew, again with the requirement of triggering an
 alert if the amount is abnormal.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=FromInput()
\end_layout

\begin_layout Plain Layout

Alert=IsAbnormal(Amount)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the doctor administers the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

, the resulting amount can be calculated by taking their product.
 In order to incorporate this functionality, it is sufficient to add the
 following code snippet.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=Concentration*Volume
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the doctor administers the medication by setting the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

, the medication amount can be calculated using the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose*Duration}
\end_layout

\end_inset

.
 To implement this calculation, it is sufficient to add the following code
 snippet.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none] 
\end_layout

\begin_layout Plain Layout

Amount=Dose*Duration
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since there are no updates required for the variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

, there is no possibility of encountering consistency issues between the
 values of the variables.
\end_layout

\begin_layout Chapter
Empirical Evaluation
\end_layout

\begin_layout Standard
In order to empirically evaluate our approach and the created libraries
 
\begin_inset Formula $\NAME{RIVarX}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.nuget.org/packages/RIvar.RIvarX
\end_layout

\end_inset


\end_layout

\end_inset

 for 
\begin_inset Formula $\LSTINLINE{C\#}$
\end_inset

 and 
\begin_inset Formula $\NAME{rivarjs}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.npmjs.com/package/rivarjs
\end_layout

\end_inset


\end_layout

\end_inset

 for 
\begin_inset Formula $\NAME{JavaScript}$
\end_inset

, we also created several basic unit tests and also sample applications
 of the Drug Administration that has been presented in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Motivation"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 Some source code is available in public in 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/RIVarX/Evaluation
\end_layout

\end_inset

.
 A few samples are published in 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://rivarx.github.io/Evaluation/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
This implementation of the Drug Administration does not have the patterns
 of code duplication presented in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Motivation"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 Each real wolrd variable exists only once, there is no need to repeat the
 code of events registerations and the classes can be reused.
\end_layout

\begin_layout Standard
In the unit tests, we subscribe to the variables and performed checks on
 the values and on the amount of updates.
 One of the unit tests has the shape of a diamond that has the potential
 of a glitch as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Glitch-1-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 In the test, following two updates in the root, it is checked that there
 exactly two updates in the final node.
 We created also unit tests to the Drug Administration, performing such
 checks against the fields and the amout of updates, verifing that the behavior
 is not changed when extending the components.
\end_layout

\begin_layout Standard
We created a windows forms application, with two user controls to the Bag
 and to the Pump.
 We bound the 
\begin_inset Formula $\RIVar$
\end_inset

 to the UI, so that when a UI change event occurs, it adds an event to the
 variable stream.
 Conversely, when a new event appears in the stream, it triggers a corresponding
 change in the UI.
 Here we protect from infinite loops by passing only changes.
\end_layout

\begin_layout Standard
In the sample of the windows forms application, we added the functionality
 to write to the log whenever a change is triggered.
 For updating the UI, we verified that threre is a change in the value,
 but in the log, we always write.
 an example to the log output is present in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Log-1-1-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 This helps to track the exact updates in the various cenarios.
 During our observations we found redandant updates.
 The reason is that the order of the propogation is post-order DFS.
 Such updates are ignored by the variables and are not passed forward.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
new session 26/09/2023 23:44:02
\end_layout

\begin_layout Plain Layout
Drug_Control:10
\end_layout

\begin_layout Plain Layout
Drug_Control: 10 <1>
\end_layout

\begin_layout Plain Layout
Volume_Control:100
\end_layout

\begin_layout Plain Layout
Volume_Control: 100 <1,2>
\end_layout

\begin_layout Plain Layout
Concentration_Control: 0.1 <1,2>
\end_layout

\begin_layout Plain Layout
Volume_Control: 100 <2>
\end_layout

\begin_layout Plain Layout
Rate_Control:5
\end_layout

\begin_layout Plain Layout
Duration_Control: 20 <1,2,3>
\end_layout

\begin_layout Plain Layout
Dose_Control: 0.5 <1,2,3>
\end_layout

\begin_layout Plain Layout
Duration_Control: 20 <2,3>
\end_layout

\begin_layout Plain Layout
Rate_Control: 5 <3>
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Log-1-1-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Log result for an execution of the Drug Administration application.
\end_layout

\end_inset

 The lines that does not end with angle brackets, inform change events directly
 set by the user.
 The angle bracket contains the timestamps, that are the order of the events
 that the value depends on.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Later, we created similar work with 
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

 for 
\begin_inset Formula $\NAME{JavaScript}$
\end_inset

 to make the framework avaiable to more users, and to be able to use it
 online.
 In order to use it, the developer need to add our rivar.umd.js script and
 also rxjs.umd.min.js.
 The Drug Administration then availability online in 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://rivarx.github.io/Evaluation/RIVar/DrugAdministration.html
\end_layout

\end_inset

 from the code in 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/RIVarX/Evaluation/blob/main/RIVar/DrugAdministration.html
\end_layout

\end_inset

.
 In order to evaluate against modern applications, we chose to integrate
 also with 
\begin_inset Formula $\NAME{React}$
\end_inset

.
 There 
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

 is inherently the state management solution.
 
\end_layout

\begin_layout Standard
\begin_inset Formula $\NAME{React}$
\end_inset

 takes a functional approach creating visual views, which are pure functions.
 We used this approach to create a "visual 
\begin_inset Formula $\LSTINLINE{RIVar}$
\end_inset

" , where the view continuously reflects the value.
 For instance, 
\begin_inset Formula $\LSTINLINE{InputField}$
\end_inset

 are bound to 
\begin_inset Formula $\LSTINLINE{var}$
\end_inset

 which is an instance of 
\begin_inset Formula $\LSTINLINE{RIVar}$
\end_inset

 set in the 
\begin_inset Formula $\NAME{props}$
\end_inset

, which are the element attributes.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

 <InputField rivar={var} />
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This can be used to compose a larger component that its view depends on
 a larger object.
 Which then used to compose the larger components similar to micro-frontend
 architecture 
\begin_inset CommandInset citation
LatexCommand cite
key "peltonen2021motivations"
literal "false"

\end_inset

 as illustrated in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:react_micro_frontends"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\begin_inset Formula $\LSTINLINE{BagComponent}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{PumpComponent}$
\end_inset

 in 
\begin_inset ERT
status open

\begin_layout Plain Layout

(
\backslash
subref{fig:code})
\end_layout

\end_inset

 represent the UI components of 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 that are illustrated in 
\begin_inset ERT
status open

\begin_layout Plain Layout

(
\backslash
subref{fig:runtime})
\end_layout

\end_inset

.
 In the interaction channel between 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 the 
\begin_inset Formula $\RIVar$
\end_inset

s update each other according to the calculations.
 In the interaction channel between each of them to the corresponding UI
 component, there is a binding between each of the 
\begin_inset Formula $\RIVar$
\end_inset

s to the corresponding input element, such that when a UI change event occurs,
 it adds an event to the variable stream.
 Conversely, when a new event appears in the stream, it triggers a corresponding
 change in the UI.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In 
\begin_inset Formula $\NAME{React}$
\end_inset

, the visual view of a component can be defined as function of its state.
 In runtime each change in the state, leads the view to re-render.
 We used this concept to create a base class named 
\begin_inset Formula $\LSTINLINE{RIVarComponent}$
\end_inset

 which abstract like a visual 
\begin_inset Formula $\LSTINLINE{RIVar}$
\end_inset

.
 Its view is defined as a function of a 
\begin_inset Formula $\LSTINLINE{RIVar}$
\end_inset

, so that it is re-render in response to new values in the stream.
\end_layout

\begin_layout Plain Layout
We implemented the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 classes with the fields and calculations as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Method"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 class extends the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 class by composition, adding field calculations to the existing fields
 in the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 class.
 We added also the UI as 
\begin_inset Formula $\NAME{React}$
\end_inset

 components, creating a concept similar to micro-frontend architecture 
\begin_inset CommandInset citation
LatexCommand cite
key "peltonen2021motivations"
literal "false"

\end_inset

.
 The components are
\emph on
 loosly coupled
\emph default
: the UI components interact with their backend objects (instances of 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 classes), which interacts in the calculations processes.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

: User Guide 
\end_layout

\begin_layout Part*
\begin_inset External
	template PDFPages
	filename rivarjs_guide.pdf
	display false
	extra LaTeX "pages={1-3}"

\end_inset


\end_layout

\end_body
\end_document
