#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Approach"

\end_inset

Approach
\end_layout

\begin_layout Standard
The approach presented in the thesis is based on defining a new concept
 called 
\emph on
reactive instance variable
\emph default
.
 A reactive instance variable represents a variable at a high level of abstracti
on, incorporating features of both 
\emph on
instance variables
\emph default
 from OOP and 
\emph on
reactive variables
\emph default
 from FRP.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
(A key characteristic that distinguishes a reactive instance variable from
 implementations of reactive variables in FRP is that It is not possible
 to discern from its interface whether It is an input variable or a variable
 computed from other variables.
 In this respect, a reactive instance variable resembles an instance variable.
 This characteristic allows for dependency on a variable without being dependent
 on the implementation details related to the source of the variable's values.)
\end_layout

\begin_layout Plain Layout
(Another A key characteristic of a reactive instance variable is its implementat
ion as an object in OOP (rather than a simple value).
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A reactive instance variable is an object for being contained within another
 object.
 For example, a 
\family typewriter
Person
\family default
 object can contain a reactive instance variable 
\family typewriter
Age
\family default
.
 Reactive instance variables can be included in objects of different classes.
 For instance, the reactive instance variable 
\family typewriter
Age
\family default
 of a 
\family typewriter
Creature
\family default
 class can be used for various implementations such as 
\family typewriter
Animal
\family default
, 
\family typewriter
Person
\family default
, etc.
\end_layout

\begin_layout Standard
A key characteristic that distinguishes a reactive instance variable from
 implementations of reactive variables in FRP is that It is not possible
 to discern from its interface whether It is an input variable or a variable
 computed from other variables.
 In this respect, a reactive instance variable resembles an instance variable.
 This characteristic allows for dependency on a variable without being dependent
 on the implementation details related to the source of the variable's values.
\end_layout

\begin_layout Standard
The operators of a reactive instance variable are defined as methods, similar
 to 
\family typewriter
Properties
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-stru
cts/properties
\end_layout

\end_inset


\end_layout

\end_inset

 in the 
\family typewriter
C#
\family default
 programming language.
 When writing to a reactive instance variable, the operation appears as
 a regular variable assignment, for example, 
\begin_inset Formula $\LSTINLINE{A:=B}$
\end_inset

.
 However, it actually invokes a special method, akin to the set accessor
 of a property.
 This access can be implemented using regular methods, but the syntax then
 resembles method calls rather than assignments.
 For instance, the assignment would be written as 
\begin_inset Formula $\LSTINLINE{A.Set(B)}$
\end_inset

.
\end_layout

\begin_layout Standard
A reactive instance variable supports two types of assignment operators
 according to the symbols 
\begin_inset Formula $:=$
\end_inset

 and 
\begin_inset Formula $=$
\end_inset

 with similar to their traditional meaning.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The use of the symbols 
\begin_inset Formula $:=$
\end_inset

 and 
\begin_inset Formula $=$
\end_inset

 appears in reactive programming literature, originating from constraint
 programming 
\begin_inset CommandInset citation
LatexCommand cite
key "salvaneschi2014programming"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\emph on
Value assignment
\emph default
 (
\begin_inset Formula $=$
\end_inset

) that is similar to the assignment operator of an instance variable.
 This operator is also similar to feeding an input in FRP.
\end_layout

\begin_layout Enumerate
Reactive assignment (
\begin_inset Formula $:=$
\end_inset

) that resembles to the sign that binds an expression to a variable in FRP.
 By this operator, value assignment messages would be sent according to
 relevant changes.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Several research facts about these definitions:
\end_layout

\begin_layout Enumerate
The use of the symbols 
\begin_inset Formula $:=$
\end_inset

 and 
\begin_inset Formula $=$
\end_inset

 appears in reactive programming literature, originating from constraint
 programming 
\begin_inset CommandInset citation
LatexCommand cite
key "salvaneschi2014programming"
literal "false"

\end_inset

.
\end_layout

\begin_layout Enumerate
In FRP, there is a unified notation (
\begin_inset Formula $=$
\end_inset

) for both meanings 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

.
\end_layout

\begin_layout Enumerate
FRP is originated from functional programming, where there is no assignment
 operator.
 Accordingly, in FRP, defining a reactive variable is similar to defining
 a function, and the equal sign represents the link between the function's
 name and its body.
\end_layout

\begin_layout Enumerate
One research direction in FRP is the possibility of being 
\emph on
transparent
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "meyerovichflapjax"
literal "false"

\end_inset

 (also called 
\emph on
implicit lifting
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

), where the compiler automatically interprets assignment statements at
 a higher level of abstraction.
 This means that the conversion between the two levels of abstraction is
 implicit in the code.
 Accordingly, the same symbol is used to represent both types of assignment.
\end_layout

\begin_layout Enumerate
As seen in 
\family typewriter
REScala
\family default
, 
\family typewriter
ReactiveX
\family default
, and other frameworks, it remains common practice to distinguish syntactically
 between input feeding and definitions that drive automatic computations.
 However, these distinctions did not formalize them (as the current formalizatio
n) as separate operator types or distinct forms of assignment.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
As a result, classes in OOP can contain reactive instance variables as their
 field members and reactive assignments in their constructors, so that a
 
\emph on
composite graph
\emph default
 is created.
 The composite graph is a graph composed of simpler graphs or sub-graphs
 from all the objects in the system.
 Each object created represents a sub-graph because it contains reactive
 instance variables that represent nodes and reactive assignments that represent
 edges.
\end_layout

\end_inset

 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This structure enables each object to potentially form a sub-graph representing
 a specific concern, aligning with the principle of Separation of Concerns.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
we introduce a model that variables and dependencies form a 
\emph on
composite graph
\emph default
.
 A composite graph is a graph composed of simpler graphs or sub-graphs.
 In each of the sub-graphs, it is free to add edges without worrying about
 accidentally creating a cycle.
 This implies the separation of concerns principle, referring each sub-graph
 to represent a distinct concern.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Change Propagation
\end_layout

\begin_layout Standard
The propagation of changes is achieved through the 
\family typewriter
Observer
\family default
 design pattern.
 For each reactive assignment statement, the right-hand side acts as an
 observable (an object that can be observed), while the left-hand side variable
 acts as the observer.
 In other words, if there is a change in the value of the expression on
 the right-hand side, a value assignment message is sent to the variable
 on the left-hand side.
\end_layout

\begin_layout Standard
Concurrently, the variables also function as 
\family typewriter
Observables
\family default
.
 For each variable, all the expressions in which the variable appears act
 as 
\family typewriter
Observers
\family default
 watching it.
 Here too, when there is a change in the value of a variable, it sends a
 message of the change to the expressions it participates in.
\end_layout

\begin_layout Standard
In essence, change propagation is a process where both variables and expressions
 act as both receivers and senders of messages.
 An example for such interactions is illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Evaluating-the-formula-2"
plural "false"
caps "true"
noprefix "false"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:propagation-on-the-2"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 Variables and expressions receive messages when the value of an element
 they depend on changes, and they send messages to the elements dependent
 on them when their own value changes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{A}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{eq}{:=}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{B}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Exp}{B+1}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{B}{Subscribe}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{Subscribe}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{Subscribe}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evaluating-the-formula-2"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Sequence Diagram for Creating Subscriptions in a Reactive Assignment.
\end_layout

\end_inset

Sequence Diagram for Creating Subscriptions in a Reactive Assignment.
 The diagram is for the reactive assignment illustrates 
\begin_inset Formula $\LSTINLINE{A:=B+1}$
\end_inset

.
 Each of the components of the reactive assignment is an object, which subscribe
s and/or being subscribed
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{E}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{A}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{eq}{:=}{}  
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{B}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Exp}{B+1}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{E}{value(2)}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{B}{value(2)}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Exp}{value(3)}{eq}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{value(3)}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{A}{value(3)}{E}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:propagation-on-the-2"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Propagation Change in a Reactive Assignment (
\begin_inset Formula $\LSTINLINE{A:=B+1}$
\end_inset

).
\end_layout

\end_inset

Propagation Change in a Reactive Assignment (
\begin_inset Formula $\LSTINLINE{A:=B+1}$
\end_inset

).
 The sequence diagram illustrates an interaction among the components involved
 in the reactive assignment, calling value assignment.
 The sequence starts with the UI field triggering an event, emitting the
 value 2.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This change is propagated based on the established subscriptions, as shown
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Evaluating-the-formula-2"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Plain Layout
The assignment operator 
\begin_inset CommandInset citation
LatexCommand cite
key "abelson1996structure"
literal "false"

\end_inset

 is changed from the traditional meaning to initiate a variable according
 to the right-hand expression.
 Instead, it registers the left-hand variable to be updated to changes of
 the right-hand expression.
 This has in common with 
\emph on
one-way data binding
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Like in 
\family typewriter
Angular:
\family default
 <h2 innerHTML="{{ text }}"></h2> innerHTML is updated in reponse to changes
 in text.
\end_layout

\end_inset

 and also with 
\emph on
one-way dataflow constraint
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "demetrescu2011reactive"
literal "false"

\end_inset

.
 However, we add more two characteristics.
\end_layout

\begin_layout Itemize
The left-hand variable 
\emph on
subscribes
\emph default
 to get changes from the right-hand expression (which means that the two
 sides are an 
\family typewriter
Observer
\family default
 and 
\family typewriter
Observable
\family default
 respectively).
 Since assignments behave like methods, it facilitates 
\emph on
dynamic dispatch.
 
\emph default
This mechanism is used for creating indirect interfaces, by which called
 methods are determined at runtime based on the objects' actual type.
 Likewise, clients would assign an object's variable without to determine
 the object's type.
\end_layout

\begin_layout Itemize
Also in raising the changes, the two sides interacts through an interface
 of the 
\family typewriter
Observer
\family default
 pattern.
 To clarify, this means there's no mediator used, no centralized data structure,
 no synchronization required, and It is not parallel execution.
 It is a straightforward function call.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Adapting to Inheritance
\end_layout

\begin_layout Standard
For each reactive assignment, the left-hand variable receives value assignment
 messages when changes happen in the left-hand expression.
 These messages are in addition to other messages it already receives.
 As a result, the reactive assignment operation does not 
\emph on
modify
\emph default
 behavior, but rather 
\emph on
extends
\emph default
 it.
 This aligns with the concept of inheritance.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In implementation inheritance, It is possible to perform reactive assignments
 to reactive instance variables belonging to classes higher up in the inheritanc
e hierarchy.
 Similarly, in composition, reactive assignments can be made to reactive
 instance variables of inner objects.
 Polymorphism can also be achieved, allowing uniform access to reactive
 instance variables of objects of different types based on an interface
 of a specific base class.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Implementation Inheritance
\end_layout

\begin_layout Standard
In implementation inheritance, It is possible to perform reactive assignments
 to reactive instance variables belonging to classes higher up in the inheritanc
e hierarchy.
 For example, a 
\family typewriter
DrugAdministration
\family default
 class contains the reactive instance variables 
\family typewriter
Drug
\family default
, 
\family typewriter
Volume
\family default
, and 
\family typewriter
Concentration
\family default
.
 The constructor of the class includes the reactive assignment 
\begin_inset Formula $\LSTINLINE{Drug:=Concentration/Volume}$
\end_inset

.
\end_layout

\begin_layout Standard
A 
\family typewriter
DrugAdministration2
\family default
 class is a subclass that contains the reactive instance variables 
\family typewriter
Dose
\family default
, 
\family typewriter
Rate
\family default
, and 
\family typewriter
Duration
\family default
.
 The constructor of the 
\family typewriter
DrugAdministration2
\family default
 class includes the assignment 
\begin_inset Formula $\LSTINLINE{Drug:=Dose*Duration}$
\end_inset

.
\end_layout

\begin_layout Subsection
Composition
\end_layout

\begin_layout Standard
In composition, reactive assignments can be made to reactive instance variables
 of inner objects.
 For example, a 
\family typewriter
Bag
\family default
 class contains the reactive instance variables 
\family typewriter
Drug
\family default
, 
\family typewriter
Volume
\family default
, and 
\family typewriter
Concentration
\family default
.
 The constructor of the class includes the reactive assignment 
\begin_inset Formula $\LSTINLINE{Drug:=Concentration/Volume}$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\family typewriter
Pump
\family default
 class contains a field called 
\family typewriter
TheBag
\family default
 of type 
\family typewriter
Bag
\family default
.
 The 
\family typewriter
Pump
\family default
 class also contains the reactive instance variables 
\family typewriter
Dose
\family default
, 
\family typewriter
Rate
\family default
, and 
\family typewriter
Duration
\family default
.
 The constructor of the 
\family typewriter
Pump
\family default
 class includes the reactive assignment 
\begin_inset Formula $\LSTINLINE{TheBag.Drug:=Dose*Duration}$
\end_inset

.
\end_layout

\begin_layout Subsection
Polymorphism
\end_layout

\begin_layout Standard
Polymorphism can also be achieved, for allowing uniform access to reactive
 instance variables of objects of different types based on an interface
 of a specific base class.
 
\end_layout

\begin_layout Standard
As depicted in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:PumpCode-1-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, the class 
\family typewriter
IBag
\family default
 (which can be purely abstract) contains pure virtual methods (accessors)
 for reading the reactive instance variables 
\family typewriter
Drug
\family default
 and 
\family typewriter
Volume
\family default
 (and without 
\family typewriter
Concentration
\family default
).
 The constructor of the class includes 
\begin_inset Formula $\LSTINLINE{Drug:=Concentration/Volume}$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\family typewriter
Pump
\family default
 class contains a field 
\family typewriter
TheBag
\family default
 of type 
\family typewriter
IBag
\family default
.
 The 
\family typewriter
Pump
\family default
 class also contains (in addition to the 
\family typewriter
TheBag
\family default
 field) the reactive instance variables 
\family typewriter
Dose
\family default
, Rate, and Duration.
 The constructor of the 
\family typewriter
Pump
\family default
 class includes 
\begin_inset Formula $\LSTINLINE{TheBag.Drug:=Dose*Duration}$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\family typewriter
Bag
\family default
 class is a subclass of 
\family typewriter
IBag
\family default
, containing 
\family typewriter
Drug
\family default
, 
\family typewriter
Volume
\family default
, and 
\family typewriter
Concentration
\family default
.
 Additionally, the class overrides the virtual methods for 
\family typewriter
Drug
\family default
 and 
\family typewriter
Volume
\family default
 defined in the 
\family typewriter
IBag
\family default
 class, returning the corresponding reactive instance variables.
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
According to the approach principles, changes in the values of expressions
 typically trigger changes in variables that depend on them.
 In other words, for a formula 
\begin_inset Formula $\LSTINLINE{X:=Exp}$
\end_inset

, the behavior is similar to 
\begin_inset Formula $\LSTINLINE{Exp.Subscribe(x=>X.OnNext(x))}$
\end_inset

 in Rx.
\end_layout

\begin_layout Standard
Consequently, using an analogy of a dependency graph, formulas always result
 in addition of edges to the graph.
 Another result of this principle is that, the change propagation mechanism
 is such that variables receive updates from other variables and expressions
 without depending on an intermediate component.
\end_layout

\begin_layout Standard
Using this approach, the existing hierarchy in OOP produces 
\emph on
composite graphs
\emph default
.
 Each object contains reactive instance variables that represent vertices,
 and formulas within its constructor as assignment statements that represent
 edges, forming a graph.
 Each object can have reactive assignments in its constructor that represent
 edges that connect its graph to vertices of other objects.
 This requires a strategy to address the issue of cycles, which will be
 presented in the next chapter.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Plain Layout
An object contains reactive instance variables that are objects that represent
 the object's variables.
 Behavior of an object is reactive assignments executed by its operations
 (usualy the contructor).
 However, The propagation of an object (derived from the reactive assignments)
 includes sending messages to the variables.
 The updates are managed by messages between variables.
 
\end_layout

\begin_layout Plain Layout
The propgation change derived from 
\end_layout

\begin_layout Plain Layout
The operations of the reactive instance variables are oprations that transitiely
 under the object.
\end_layout

\begin_layout Plain Layout
This thesis proposes an approach that integrates FRP and OOP paradigms adapted
 to OOP inheritance.
 In this approach each object manage its own state under the following condition
s:
\end_layout

\begin_layout Itemize
An object contains reactive instance variables that are objects that represent
 the object's variables.
 
\end_layout

\begin_layout Itemize
, and their operations are considered as the object's own operations.
 This differs slightly from previous discussions 
\begin_inset CommandInset citation
LatexCommand cite
key "snyder1986encapsulation"
literal "false"

\end_inset

 that instance variables are updated by the containing object's actions
 to achieve encapsulation.
 
\end_layout

\begin_layout Itemize
The propagation behavior of an object does not include the updates themselves,
 but only the sending of messages.
 The execution of the updates is the responsibility of the variables.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the new approach, an assignment
\emph on
 adds a dependency
\emph default
.
 A variable (
\family typewriter
RIVar
\family default
) can be assigned multiple times, and in each time the variable depends
 on a new expression in addition to existing dependencies.
 This leads that a single variable can be updated from several expressions.
 Additionally, all the variables are input variables that can be updated
 directly.
\end_layout

\begin_layout Plain Layout
Practically, assignment would be an operation that performs that
\emph on
 the left-hand variable subscribes to the right-hand expression, such that
 the right-hand expression calls to the left-hand variable to update it
\emph default
.
 By using this technique, we create an effect similar to 
\family typewriter
merge 
\family default
function over streams of values.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Based on the concept that an observable stream represents a variable, each
 node in a dependancy graph would represent an observable stream.
 Each item of an observable stream, represents a 
\emph on
visit
\emph default
 of the propagation  algorithm in that node.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
we relate introduce a sematics 
\end_layout

\begin_layout Plain Layout
We take the concept of observable streams for presenting variables.
 An observable stream consists of values or changes over time, as illustrated
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Streams-of-values"
plural "false"
caps "true"
noprefix "false"

\end_inset

, generated from events of UI elements.
 Furthermore, Each node in a dependancy graph can be represented as an observabl
e stream.
 Each Item represents a visit in that node.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
