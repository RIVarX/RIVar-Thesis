#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Background
\end_layout

\begin_layout Standard
In the development of user interface applications, the task of updating
 variables in response to other variables' updates, might cause unpredictable
 behavior and even infinite loops 
\begin_inset CommandInset citation
LatexCommand cite
key "hung2018architectural"
literal "false"

\end_inset

.
 The unpredictable behavior might exist especially when applications scale
 with many features and have long chains of updates.
\end_layout

\begin_layout Section
Encapsulation
\end_layout

\begin_layout Standard
OOP suggests objects encapsulation, by which objects' variables are protected
 from being updated by external code.
 Instead, objects expose methods, by which an object's consumers ask the
 object to update its variables.
 OOP also provides the inheritance mechanism, to reuse software without
 breaking the encapsulation.
\end_layout

\begin_layout Standard
OOP are based on the control-driven imperative paradigm, by which the program
 is executed line by line.
 On top of it, OOP provides 
\emph on
indirect control
\emph default
 
\begin_inset CommandInset citation
LatexCommand citep
key "martin2018clean"
literal "false"

\end_inset

, such that object's consumer calls a method according to its names and
 arguments, but the actual method is known only in runtime.
 This should keep on the object's encapsulation, because the object's consumer
 need to call methods according to the interface and not according to the
 actual implementation.
\end_layout

\begin_layout Standard
There is an option named 
\emph on
inversion of control
\emph default
 (IoC), such that an object's consumer will register code, that will be
 executed by the object in certain events.
 By this option, there is an option to register code that update variables,
 to be executed in the events that other variables are updated.
\end_layout

\begin_layout Standard
Based on OOP and IoC, enterprise applications can provide customers to extend
 the application according to their business needs.
 In the enterprise application 
\emph on
Microsoft Power Apps
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://powerapps.microsoft.com
\end_layout

\end_inset

, developers can register plugins that update fields, to be re-calculated
 according other fields.
 The custom plugin might lead to infinite loop of updates caused by several
 registered plugins.
 Therefore, the field 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Depth}
\end_layout

\end_inset


\emph on

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://carldesouza.com/dynamics-365-understanding-plugin-depth
\end_layout

\end_inset


\emph default
 is provided to the developer to stop the loop.
 The field is like the cursion depth, containing how many times the current
 plugin is executed.
\end_layout

\begin_layout Standard
In OOP, an object's variables are called its 
\emph on
state
\emph default
, because it represents the state of the object 
\begin_inset CommandInset citation
LatexCommand cite
key "taivalsaari1996notion"
literal "false"

\end_inset

, or that its state is derived from the variables.
 There is a modeling method 
\begin_inset CommandInset citation
LatexCommand cite
key "harel1995statement"
literal "false"

\end_inset

 to present states and events as transition between them, such that in the
 transition, there are actions, that are code to execute during the transition.
 This method is used in front-end applications by the library 
\emph on
Redux
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

 and is promoted by 
\emph on
XState
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
https://xstate.js.org
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

[   round/.style={rounded corners=1.5mm,minimum width=1cm,inner sep=2mm,above
 right,draw,align=center,text width=4mm}
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

    
\backslash
node[round] (S1) at (2.5,2) {S1};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[round] (S2) at (0,0) {S2};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[round] (S3) at (5,0) {S3};
\end_layout

\begin_layout Plain Layout

   
\backslash
node[rounded corners=1.5mm,minimum width=4cm,inner sep=1mm,above right,draw,align
=center,text width=26mm] (S4) at (1.2,-3) {S4
\backslash

\backslash

\backslash
fontsize{5pt}{5pt}
\backslash
selectfont y changed/calculate x
\backslash

\backslash

\backslash
fontsize{5pt}{5pt}
\backslash
selectfont z changed/calculate x};
\end_layout

\begin_layout Plain Layout

      
\end_layout

\begin_layout Plain Layout

      
\backslash
draw[-latex] (3.5, 3.5) coordinate (init) to[out=180,in=90] (S1);
\end_layout

\begin_layout Plain Layout

      
\backslash
fill (init) circle (0.05);
\end_layout

\begin_layout Plain Layout

      
\end_layout

\begin_layout Plain Layout

     
\backslash
path[-latex] (S1) edge[out=180, in=90]  node[scale=0.5] {y changed} (S2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      
\backslash
path[-latex] (S1) edge[out=0, in=90]  node[scale=0.5] {z changed} (S3);
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

    
\backslash
path[-latex] (S2) edge[out=270, in=180]  node[scale=0.5] {z changed/calculate
 x} (S4);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

     
\backslash
path[-latex] (S3) edge[out=270, in=0]  node[scale=0.5] {y changed/calculate
 x} (S4);
\end_layout

\begin_layout Plain Layout

  
\backslash
node[round,fit=(S1)(S2)(S3)(S4)(init)] (System) {};
\end_layout

\begin_layout Plain Layout

     
\end_layout

\begin_layout Plain Layout

      
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Statechart modeling the execution of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{x:=y+z}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Functional Reactive Programming
\end_layout

\begin_layout Standard
FRP is a paradigm developed to provide predictable calculations and updates.
 In traditional programming, developers have difficulties controlling the
 task of manually maintaining variables, by calling functions to be executed
 in various events.
 In contrast, FRP provides a declerative style to define the data dependencies
 explicit, and a runtime to maintain them.
\end_layout

\begin_layout Standard
In the most elegant style, functions over reactive variables are declared,
 producing the runtime behavior named 
\emph on
one-way data flow contraint
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "demetrescu2011reactive"
literal "false"

\end_inset

 or 
\emph on
spreadsheet behavior
\emph default
.
 Declaration such as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset

 means 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 to be function of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{C}
\end_layout

\end_inset

, with the runtime behavior that updating 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{C}
\end_layout

\end_inset

 triggers updates of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

.
 This elegance is provided automatically instead of manually maintaining
 the formula as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:manually-maintaining-one-way"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

B_changed += { (e) => b=e; a = b+c; A_changed.Invoke(a); }
\end_layout

\begin_layout Plain Layout

C_changed += { (e) => c=e; a = b+c; A_changed.Invoke(a);}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:manually-maintaining-one-way"

\end_inset

Manually maintaining one-way data flow contraint 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

A=B.CombineLatest(C,(b,c)=>b+c));
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:CombineLatest"

\end_inset

One-way data flow contraint 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset

 by using streams of events
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although the notion of using the high-level syntax of reactive variables,
 We see in the paradigm the concept of events harmonized in several forms
 
\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push,Kamina2018,blackheath2016functional"
literal "false"

\end_inset

.
 In one form, streams of events are used similar to reactive variables 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

.
 Actualy a reactive variable can be represented by a stream of events representi
ng the variable's values as a list 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional,schuster2016reactive"
literal "false"

\end_inset

.
 This produces more verbose syntax 
\begin_inset CommandInset citation
LatexCommand cite
key "schuster2016reactive"
literal "false"

\end_inset

 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:CombineLatest"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
In FRP, the runtime should provide predictable behavior against potential
 loops caused from cycles in the dependency graph.
 There are two opposing opinions.
 In one approach, cycles should be avoided, because then the referential
 transparency property is broken 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

.
 But in the second approach, forbidding cycles makes FRP unacceptably weak,
 because many applications have cycles by their nature 
\begin_inset CommandInset citation
LatexCommand cite
key "cooper2006embedding,perez2015bridging"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Following the approach that cycles are avoided, there is an approach that
 the needed dependency graph is dynamically changed 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

.
 According to this approach, a library named 
\emph on
Hotdrink
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

, implements a constraints system for user interfaces.
 The library re-constructs the dependency graph whenever the user edits
 a field.
\end_layout

\begin_layout Standard
Using the approach that cycles exist and supported, the runtime stops arisen
 loops either after an amount of iterations, or that it stops if the value
 has not changed (according to a threshold), or that the language provides
 a special operator to break the cycle 
\begin_inset CommandInset citation
LatexCommand cite
key "cooper2006embedding"
literal "false"

\end_inset

.
 The two first options are available in 
\emph on
Microsoft Excel
\emph default
 by the 
\emph on
calculation options
\emph default
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://support.microsoft.com/en-us/office/remove-or-allow-a-circular-reference-85
40bd0f-6e97-4483-bcf7-1b49cd50d123
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
We use an example of two variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
 The first refers to medication amount administered to a patient, the second
 refers to whether the application should alert about abnormal medication
 amount.
 The following formula relates 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

, so that 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}'s
\end_layout

\end_inset

 value be automatically according to the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=FromInput()
\end_layout

\begin_layout Plain Layout

Alert=IsAbnormal(Amount)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The doctor may administer the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

, then the amount will be calculated by as product, thefore the code will
 be changed:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput()
\end_layout

\begin_layout Plain Layout

_AmountByConcentrationAndVolume=Concentration*Volume_ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),_IsAbnormal(AmountByConcentration AndVolume)_
)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The doctor may administer by setting 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

, then the medication amount will be calculated by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose*Duration}
\end_layout

\end_inset

.
 In such a case, we should again update the code:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none] 
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput() 
\end_layout

\begin_layout Plain Layout

AmountByConcentrationAndVolume=Concentration*Volume _AmountByDoseAndDuration=Dos
e*Duration_ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),IsAbnormal(AmountByConcentrationAndVolume),_I
sAbnormal(AmountByDoseAndDuration)_) 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It can be seen, that whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 need more values source, then we should update the assignment to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
 If we forget to update (as may happen in large complex applications), there
 become inconsistencies between 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
??????
\end_layout

\begin_layout Paragraph
Avoiding
\end_layout

\begin_layout Standard
In 
\emph on
true FRP
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 the graph must not have cycles, because the code is constructed similar
 to pure functions.
 The functional style is used in order to achieve the 
\emph on
referential transparency 
\emph default
property, i.e., the same input produces consistenctly the same output.
 
\end_layout

\begin_layout Standard
In addition, in 
\emph on
glitch free
\emph default
 FRP, there are special algoritms to prevent from the incomplete updates
 .
 Indeed, avoiding cycles is a necessary condition to the algorithms 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics,bainomugisha2013survey"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Cycles are not handled by default also by Microsoft Excel (with the term
\emph on
 circular dependencies
\emph default
).
 Also React provides only one-way dataflow 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

, and so also 
\begin_inset CommandInset citation
LatexCommand cite
key "marum2020unified"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
There is also an approach to avoid the glitches
\begin_inset Foot
status open

\begin_layout Plain Layout
https://staltz.com/rx-glitches-arent-actually-a-problem.html
\end_layout

\end_inset

: variable depends on several variables with a single ancestor will be defined
 directly by that ancestor.
 
\end_layout

\begin_layout Paragraph
Limitation
\end_layout

\begin_layout Paragraph
Iterations
\end_layout

\begin_layout Standard
In contrast, FrTime and other FRP implementations 
\begin_inset CommandInset citation
LatexCommand cite
key "demetrescu2011reactive"
literal "false"

\end_inset

 support cycles such as by providing a keyword 
\emph on
delay
\emph default
 to break an update loop.
 However, the solution is a 
\begin_inset Quotes eld
\end_inset

compromise consistent
\begin_inset Quotes erd
\end_inset

.
 As explained, variables might not complete the calculation by a single
 update (that might be a glitch).
 A more reliable solution is provided by Microsoft Excel, when changing
 the default behavior to avoid cycles by one of the suggested 
\begin_inset Quotes eld
\end_inset

calculation options
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://support.microsoft.com/en-us/office/remove-or-allow-a-circular-reference-85
40bd0f-6e97-4483-bcf7-1b49cd50d123
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The first option is to terminate the updates after an arbitrary iterations
 amount.
 The second option is to ignore an update if the new value has not been
 changed comparing to the value that the variable contains, or changed only
 less than an arbitrary threshold.
\end_layout

\begin_layout Standard
Terminating the updates after an arbitrary iterations amount, may be a solution.
 However, the developer should find the balance, what constant number to
 choose.
 It might be difficult to find out the minimum number, that is the needed
 amount for applications with many dependencies.
 While, an high amount might perform low perfomance by unnecessary updates.
\end_layout

\begin_layout Standard
In the second method the developers need to find a threshold.
 The threshold is needed due to loose of information though calculations,
 e.g., In an application that contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A/3
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B*3
\end_layout

\end_inset

, if the user set 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 might be calculated and updated with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100/3=0.33
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 should not be updated with the new calculated value 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.33*3=0.99
\end_layout

\end_inset

, consequently the chosen constant threshold should be less than 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.01
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
—-
\end_layout

\begin_layout Standard
In order to protect against infinite loop
\end_layout

\begin_layout Standard
Previous approaches provides solutions to cycles but did not provide semantics
 to cycles, but solutions to the phenomenon.
\end_layout

\begin_layout Standard
According to previous approaches, the data-dependencies should be hierarchical.
 
\end_layout

\begin_layout Standard
—–
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (0,5) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3.5,5) {B};       
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge [bend left] (B);  
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge [bend left] (A);
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(A) + (1.75,-0.75)$)    {A:=B/3};
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(A) + (1.75,0.75)$)    {B:=A*3};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loosing informCycle while loose of information
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
—-
\end_layout

\begin_layout Standard
It is likely that infinite loops happens because of 
\emph on
indepedent definitions
\emph default
 to update variable in response to the other variables' updates.
 Nevertheless, The problem will not happen if the new definitions only derive
 existing variables.
\end_layout

\begin_layout Standard
In case of mutual recursions such like in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:simple-cycle"
plural "false"
caps "false"
noprefix "false"

\end_inset

 there might be infinite loops, caused from the cycle that A should update
 B, and B should update A.
\end_layout

\begin_layout Standard
is defined by B and B is defined by A.
\end_layout

\begin_layout Standard
Our model supports cycles caused from mutual recursions, where reactive
 variables are defined in terms of each other, e.g., the FRP application in
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:simple-cycle"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
, application might contain 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

 and also 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A
\end_layout

\end_inset

.
 Cycles need a special treatment, because it might lead to infinite loops.
 As in the example, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, that might lead again to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, and so on.
\end_layout

\begin_layout Standard
Cycles need a special treatment, because it might lead to infinite loops.
 As in the example, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, that might lead again to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, and so on.
\end_layout

\begin_layout Standard
Furthermore, in the the 
\emph on
glitch
\emph default
 problem 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

, a variable can have several updates caused by a single update.
 Consequently, ignoring repeating updates might lead to incomplete calculations.
 e.g., in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Glitch"
plural "false"
caps "false"
noprefix "false"

\end_inset

, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

X
\end_layout

\end_inset

 leads to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y1
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y2
\end_layout

\end_inset

, each of them might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 with an incomplete calculation, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 should not ignore a second update.
\end_layout

\begin_layout Paragraph
Avoiding
\end_layout

\begin_layout Standard
In 
\emph on
true FRP
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 the graph must not have cycles, because the code is constructed similar
 to pure functions.
 The functional style is used in order to achieve the 
\emph on
referential transparency 
\emph default
property, i.e., the same input produces consistenctly the same output.
 
\end_layout

\begin_layout Standard
In addition, in 
\emph on
glitch free
\emph default
 FRP, there are special algoritms to prevent from the incomplete updates
 .
 Indeed, avoiding cycles is a necessary condition to the algorithms 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics,bainomugisha2013survey"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Cycles are not handled by default also by Microsoft Excel (with the term
\emph on
 circular dependencies
\emph default
).
 Also React provides only one-way dataflow 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

, and so also 
\begin_inset CommandInset citation
LatexCommand cite
key "marum2020unified"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
There is also an approach to avoid the glitches
\begin_inset Foot
status open

\begin_layout Plain Layout
https://staltz.com/rx-glitches-arent-actually-a-problem.html
\end_layout

\end_inset

: variable depends on several variables with a single ancestor will be defined
 directly by that ancestor.
 
\end_layout

\begin_layout Paragraph
Limitation
\end_layout

\begin_layout Paragraph
Iterations
\end_layout

\begin_layout Standard
In contrast, FrTime and other FRP implementations 
\begin_inset CommandInset citation
LatexCommand cite
key "demetrescu2011reactive"
literal "false"

\end_inset

 support cycles such as by providing a keyword 
\emph on
delay
\emph default
 to break an update loop.
 However, the solution is a 
\begin_inset Quotes eld
\end_inset

compromise consistent
\begin_inset Quotes erd
\end_inset

.
 As explained, variables might not complete the calculation by a single
 update (that might be a glitch).
 A more reliable solution is provided by Microsoft Excel, when changing
 the default behavior to avoid cycles by one of the suggested 
\begin_inset Quotes eld
\end_inset

calculation options
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://support.microsoft.com/en-us/office/remove-or-allow-a-circular-reference-85
40bd0f-6e97-4483-bcf7-1b49cd50d123
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The first option is to terminate the updates after an arbitrary iterations
 amount.
 The second option is to ignore an update if the new value has not been
 changed comparing to the value that the variable contains, or changed only
 less than an arbitrary threshold.
\end_layout

\begin_layout Standard
Terminating the updates after an arbitrary iterations amount, may be a solution.
 However, the developer should find the balance, what constant number to
 choose.
 It might be difficult to find out the minimum number, that is the needed
 amount for applications with many dependencies.
 While, an high amount might perform low perfomance by unnecessary updates.
\end_layout

\begin_layout Standard
In the second method the developers need to find a threshold.
 The threshold is needed due to loose of information though calculations,
 e.g., In an application that contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A/3
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B*3
\end_layout

\end_inset

, if the user set 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 might be calculated and updated with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100/3=0.33
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 should not be updated with the new calculated value 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.33*3=0.99
\end_layout

\end_inset

, consequently the chosen constant threshold should be less than 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.01
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Section
???????
\end_layout

\begin_layout Standard
Constraints systems, such as Hotdrink, abstract multi-way constaints, while
 reactive instanse variables abstract one-way dependencies.
 Nevertheless, the code verbosity are very close.
 Both declare the variables, the dependencies and the low level functions
 to enforce the dependencies.
 For example the following is equivilent to the bag class' content.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

var model = new hd.ModelBuilder()
\end_layout

\begin_layout Plain Layout

    .variables( {Drug: 0, VolumeOfFluid: 0, Concentration: 0 )
\end_layout

\begin_layout Plain Layout

.constraint( Drug, VolumeOfFluid, Concentration' )
\end_layout

\begin_layout Plain Layout

      .method( 'VolumeOfFluid, Concentration -> Drug', mul  )
\end_layout

\begin_layout Plain Layout

      .method( 'Drug, VolumeOfFluid -> Concentration', div  )   
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
However, reactive instance variables' approach outperforms Hotdrink.
 For a small case study, two applications are required.
 First, containing only the bag from the drug administration.
 Second, containing the whole drug administration.
 As in our design, from the single source of code, bag can be deployed independe
tly in addition to the deployment of the whole.
 While in Hotdrink, two applications should be developed, duplicating the
 code of the bag.
\end_layout

\begin_layout Subsection
Multi-way Constraints????
\end_layout

\begin_layout Standard
In constraints systems, we can declare 
\begin_inset ERT
status open

\begin_layout Plain Layout

A=B+C
\end_layout

\end_inset

, and each user update, to any of the variables, follows an automatic update
 to the left variables.
 With the proposed Rivars, it is implemented by declaring three formulas:
 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B+C
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A-C
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

C:=A-B
\end_layout

\end_inset

.
 However, the long verbosity exists also in constraints systems, when developers
 need specifying methods to satisfy the constraints.
 In addition, building blocks can easily built on top of our thesis.
 This means more extensions can be implemented by combining several formulas
 into a single constraint.
\end_layout

\begin_layout Subsection
Decentralized Calculation?????
\end_layout

\begin_layout Standard
Constraints systems (and most reactive programming implementations
\begin_inset CommandInset citation
LatexCommand cite
key "drechsler2014distributed"
literal "false"

\end_inset

) manage the constraints and handle them by a one centralized procedure.
 Similary is the approach in the code, the applications' code are of one
 block, because: 
\begin_inset Quotes eld
\end_inset

If the one-way constraints are defined in separate places, co-ordinating
 these constraints can be a major software engineering problem
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "sannella1993multi"
literal "false"

\end_inset

.
 Consequently, the market which needs modular solutions, does not adopt
 such centerlized solutions 
\begin_inset CommandInset citation
LatexCommand cite
key "marheim2017domain"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
??????
\end_layout

\begin_layout Paragraph*
Decenterlized/No-Isolation
\end_layout

\begin_layout Standard
In the core of OOP paradigm, objects should hide their variables.
 So instance variables that need to be updated according to other instance's
 variable, should invovlve direct interaction, without to require a third
 party.
\end_layout

\begin_layout Standard
Hotdrink manages the variables by the constraints solver.
\end_layout

\begin_layout Paragraph*
Any dependency
\end_layout

\begin_layout Standard
Classes or types that contains reactive instance variables in their interface,
 allow to declare any dependency from those instance variables.
 If cycles are avoided such as in Soduium, then there is the limitation
 to avoid from declaring certain dependencies.
\end_layout

\begin_layout Paragraph*
Predictable Propogation
\end_layout

\begin_layout Standard
The core of the FRP paradigm is to provide predictable propogation.
 by the referntial transparcncy property, the same sequence of input produce
 consistenly the same output.
\end_layout

\begin_layout Standard
If there are cycles, if the (Bridging the gui gap with reactive values and
 relations...)
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Safe Propogation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any dependency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decenterlized
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FrTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReactiveX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sodium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed REscala
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hotdrink
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
????????
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unsafe Propogation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No Cycles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Centerlized
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FrTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReactiveX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sodium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed REscala
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hotdrink
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
???????
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
unsupported constructions, unpredictable results or to no-isolation
\end_layout

\begin_layout Section
????????
\end_layout

\begin_layout Standard
Developers usually need to develop software, that has already partly developed.
 One strategy is to re-develop the software with the up-to-date requirements.
 Comparing to other strategies, it should be easier for the shortcoming,
 beacuse it will not harm existing consumers.
 However, future changes might require more work, because if change is required
 in the part that was repeated, the change should be repeated.
 
\end_layout

\begin_layout Standard
However, it depends on the paradigm, how easy it to not repeat.
 This chapter compares the code repetition element, when using RIVar, against
 using the traditional FRP paradigm, the constraints paradigm and the events
 paradigm.
\end_layout

\begin_layout Subsection
FRP
\end_layout

\begin_layout Standard
We use an example of two variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
 The first refers to medication amount administered to a patient, the second
 refers to whether the application should alert about abnormal medication
 amount.
 The following formula relates 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

, so that 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}'s
\end_layout

\end_inset

 value be automatically according to the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=FromInput()
\end_layout

\begin_layout Plain Layout

Alert=IsAbnormal(Amount)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The doctor may administer the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

, then the amount will be calculated by as product, thefore the code will
 be changed:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput()
\end_layout

\begin_layout Plain Layout

_AmountByConcentrationAndVolume=Concentration*Volume_ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),_IsAbnormal(AmountByConcentration AndVolume)_
)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The doctor may administer by setting 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

, then the medication amount will be calculated by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose*Duration}
\end_layout

\end_inset

.
 In such a case, we should again update the code:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none] 
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput() 
\end_layout

\begin_layout Plain Layout

AmountByConcentrationAndVolume=Concentration*Volume _AmountByDoseAndDuration=Dos
e*Duration_ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),IsAbnormal(AmountByConcentrationAndVolume),_I
sAbnormal(AmountByDoseAndDuration)_) 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It can be seen, that whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 need more values source, then we should update the assignment to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
 If we forget to update (as may happen in large complex applications), there
 become inconsistencies between 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Implemented by RIVar
\end_layout

\begin_layout Standard
The should be an alert if the amount is abnormal, therefore the following
 formula relates 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

, so that 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}'s
\end_layout

\end_inset

 value be automatically according to the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{Amount}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=FromInput()
\end_layout

\begin_layout Plain Layout

Alert=IsAbnormal(Amount)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The doctor may administer the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

, then the amount will be calculated by as product.
 It is enough to only add the code:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=Concentration*Volume
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The doctor may administer by setting 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

, then the medication amount will be calculated by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose*Duration}
\end_layout

\end_inset

.
 It is enough to only add the code:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none] 
\end_layout

\begin_layout Plain Layout

Amount=Dose*Duration
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nothing about variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 need updates, therfore there is no chance of consistency problem between
 the variables values.
\end_layout

\begin_layout Subsection
Constraints
\end_layout

\begin_layout Standard
Originally, there is a difference between the concepts of FRP and constraints
 systems.
 FRP is about defining variables as functions over other variables.
 In contrast, constraints systems can relate the same variable with several
 constraints, so that it can be calculated differently depending on the
 input in runtime.
 Our new variant of FRP closes the gap between FRP and constraints systems,
 because in the new model, a variable can be related to several formulas.
\end_layout

\begin_layout Standard
The difrence between our model to the traditional constraints systems is
 the integration with OOP, so that developers can effectively model common
 solutions to several applications.
\end_layout

\begin_layout Subsection
Conclusion
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calls to Calculations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variables
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solutions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Events
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FRP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Types of repetitions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
