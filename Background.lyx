#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Background
\end_layout

\begin_layout Standard
Dependency graphs that contain 
\emph on
cycles
\emph default
 need a special treatment, because it might lead to infinite loops.
 For instance, if an application contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

 and also 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A
\end_layout

\end_inset

 (as in the following figure), then updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, that might again lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, and so on.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (0,5) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3.5,5) {B};       
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge [bend left] (B);  
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge [bend left] (A);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-simple-dependency"

\end_inset

A simple dependency graph with cycles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Furthermore, in the the 
\emph on
glitch
\emph default
 problem 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

, a variable can have several updates caused by a single update.
 Consequently, ignoring repeating updates might lead to incomplete calculations.
 e.g., in the application bellow, updating 
\begin_inset ERT
status open

\begin_layout Plain Layout

X
\end_layout

\end_inset

 leads to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y1
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

Y2
\end_layout

\end_inset

, each of them might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 might lead to update 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 with an incomplete calculation, therfore 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 should not ignore a second update.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (X) at (2,9) {X};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (Y1) at (1,7) {Y1};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (Y2) at (3,7) {Y2};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (2,5) {A}; 
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (2,3) {B};     
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (Y1) edge  (A);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (Y2) edge  (A);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (X) edge  (Y1);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (X) edge  (Y2);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (B);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
??????
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In cycles, in which values are actualy propogated in runtime, there must
 have a variable with 
\emph on
reassigment
\emph default
 
\begin_inset CommandInset citation
LatexCommand citep
key "salvaneschi2014towards"
literal "false"

\end_inset

, i.e., a variable that, during the application execution, is updated according
 to several formulas, or has several 
\emph on
associations
\emph default
.
\end_layout

\begin_layout Standard
Assume, for the sake of contradiction, that there exists a cycle dependency
 graph, such that each variables has a single association.
 So there is a list of reactive variables, each variable has a single associatio
n, with a formula consisting of the next variable, except the last variable
 that is associated with a formula consisting the first variable.
 In runtime, the variables must have values from external input, therefore
 one of the variables must have an association consisting input, that will
 propogate through the cycle.
 This is a contradiction, since it means that it has an additional association.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
n {5} 
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
radius {3cm} 
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
margin {8} % margin in angles, depends on the radius
\end_layout

\begin_layout Plain Layout


\backslash
foreach [count=
\backslash
s] 
\backslash
j in {A,B,...,E} 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, circle] (
\backslash
j) at ({360/
\backslash
n * (
\backslash
s - 1)}:
\backslash
radius) {
\backslash
j};   
\backslash
draw[->, >=latex] ({360/
\backslash
n * (
\backslash
s - 1)+
\backslash
margin}:
\backslash
radius)      arc ({360/
\backslash
n * (
\backslash
s - 1)+
\backslash
margin}:{360/
\backslash
n * (
\backslash
s)-
\backslash
margin}:
\backslash
radius);          
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[above] (X) at (5,5) {$input$};    
\end_layout

\begin_layout Plain Layout


\backslash
draw[dotted][->, >=latex] (X) -- (B);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bottom line is that variables can be updated in response to more than
 one event 
\begin_inset CommandInset citation
LatexCommand citep
key "caspers2017react"
literal "false"

\end_inset

.
 So it is complex to track the dependencies and implementing them, especially
 that the order of the events is not fully predictable, i.e., for a certain
 application and input events, the events execution order might be inconsistent
 
\begin_inset CommandInset citation
LatexCommand citep
key "abelson1996structure"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
There are three approaches to handling the cycles.
\end_layout

\begin_layout Paragraph
Iterations
\end_layout

\begin_layout Standard
In contrast, FrTime and other FRP implementations 
\begin_inset CommandInset citation
LatexCommand cite
key "demetrescu2011reactive"
literal "false"

\end_inset

 support cycles such as by providing a keyword 
\emph on
delay
\emph default
 to break an update loop.
 However, the solution is a 
\begin_inset Quotes eld
\end_inset

compromise consistent
\begin_inset Quotes erd
\end_inset

.
 As explained, variables might not complete the calculation by a single
 update (that might be a glitch).
 A more reliable solution is provided by Microsoft Excel, when changing
 the default behavior to avoid cycles by one of the suggested 
\begin_inset Quotes eld
\end_inset

calculation options
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
https://support.microsoft.com/en-us/office/remove-or-allow-a-circular-reference-85
40bd0f-6e97-4483-bcf7-1b49cd50d123
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The first option is to terminate the updates after an arbitrary iterations
 amount.
 The second option is to ignore an update if the new value has not been
 changed comparing to the value that the variable contains, or changed only
 less than an arbitrary threshold.
\end_layout

\begin_layout Standard
Terminating the updates after an arbitrary iterations amount, may be a solution.
 However, the developer should find the balance, what constant number to
 choose.
 It might be difficult to find out the minimum number, that is the needed
 amount for applications with many dependencies.
 While, an high amount might perform low perfomance by unnecessary updates.
\end_layout

\begin_layout Standard
In the second method the developers need to find a threshold.
 The threshold is needed due to loose of information though calculations,
 e.g., In an application that contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A/3
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B*3
\end_layout

\end_inset

, if the user set 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 might be calculated and updated with 
\begin_inset ERT
status open

\begin_layout Plain Layout

100/3=0.33
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 should not be updated with the new calculated value 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.33*3=0.99
\end_layout

\end_inset

, consequently the chosen constant threshold should be less than 
\begin_inset ERT
status open

\begin_layout Plain Layout

0.01
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Paragraph
No Cycles
\end_layout

\begin_layout Standard
In 
\emph on
true FRP
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 the graph must not have cycles, because the code is constructed similar
 to pure functions.
 The functional style is used in order to achieve the 
\emph on
referential transparency 
\emph default
property, i.e., the same input produces consistenctly the same output.
 
\end_layout

\begin_layout Standard
In addition, in 
\emph on
glitch free
\emph default
 FRP, there are special algoritms to prevent from the incomplete updates
 .
 Indeed, avoiding cycles is a necessary condition to the algorithms 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics,bainomugisha2013survey"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Cycles are not handled by default also by Microsoft Excel (with the term
\emph on
 circular dependencies
\emph default
).
 Also React provides only one-way dataflow 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

, and so also 
\begin_inset CommandInset citation
LatexCommand cite
key "marum2020unified"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
It is interesting to see the effect of preventing cycles
\end_layout

\begin_layout Paragraph
Central Management
\end_layout

\begin_layout Standard
Hotdrink 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

 maintains priority, when a user updates a variable, its priority becomes
 the highest.
 The values of the variables with the old priority is overridden by calculating
 according to the variables with the higher priority.
 The variables and dependencies are managed by a centralized algorithm named
 
\emph on
constraints solver
\emph default
.
\end_layout

\begin_layout Standard
In the traditional programming, the developers uses state to recognize when
 to update or not to update, and when to trigger an event or to not trigger
 an event.
 Consequently, it might be difficult to comprehend the variables and dependencie
s of the functional requirements (required application logic).
 because the code is tangled with non-functional requirements consisting
 of the internal variables (state) and conditions to technically implement
 (as described, to recognize when to update or not to update) the functional
 requirements.
\end_layout

\begin_layout Standard
XState
\begin_inset Foot
status open

\begin_layout Plain Layout
https://xstate.js.org/
\end_layout

\end_inset

 and Redux 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

 reminds the statechart 
\begin_inset CommandInset citation
LatexCommand cite
key "harel1990statemate"
literal "false"

\end_inset

 or just the simple state-machine.
 The updates are still controlled by state and conditions, but they are
 centerlized and not encapsulated in various objects.
 As a result the variables change become more predictable 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Old
\end_layout

\begin_layout Paragraph*
Events
\end_layout

\begin_layout Standard
In the enterprise application 
\emph on
Microsoft Dynamics
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "somani2018dynamics"
literal "false"

\end_inset

 developers can extend the web forms with code that are executed in response
 to events, In addition users can extend the forms without code , but by
 a user friendly customization form.
 The user customize 
\emph on
business rules
\emph default
 by drug and drop and easy selection elements.
 With and without code the application can be customized to calculate fields
 in response to 
\emph on
change events
\emph default
.
 There is a protection to not running infinite loops in cases that there
 are cycles in dependencies: the code is executed only in resonse to change
 that happens directly by the user, and changes happened by business rules
 are ignored.
\end_layout

\begin_layout Standard
In addition, Microsoft Dynamics can be extended by registering code as plugins
 to messages in the server side.
 In the execution context, there is a field 
\emph on
Depth
\emph default
, that is provided to the developers to protect code against infinite loops,
 in cases when the code update fields, and is regsitered in the message
 
\emph on
update.
 
\emph default
The developers can use this field to check if the current execution is a
 repeating update, and how many repetitions (that is depth of execution
 in the call stack).
\end_layout

\begin_layout Paragraph*
Observable Streams
\end_layout

\begin_layout Standard
When handling applications over time, updating variables using the assigment
 operator, we identified time variation in the real world with time variation
 in the computer.
 Stream is an alternative to model phenomena over time, such as varying
 variable's value, without refering explicity the time.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{ReactiveX}
\end_layout

\end_inset

 is a popular library for the stream programming model.
 In 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{ReactiveX}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{Observable}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{Observer}
\end_layout

\end_inset

 implement the observer pattern for a sequence.
 Observers subscribe to Observables, and the Observables calls the observers'
 methods' 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{OnNext}
\end_layout

\end_inset

 for each item in the sequence.
 
\end_layout

\begin_layout Standard
Based on that observable sequence, there are operators to produce streams
 from observing other streams.
 For example, 
\begin_inset ERT
status open

\begin_layout Plain Layout

A=B.Select(b=>b+1)
\end_layout

\end_inset

, observe the items of a stream 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{B}
\end_layout

\end_inset

, whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{B}'s 
\backslash
textit{OnNext}
\end_layout

\end_inset

 is called, then the lambda expression 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{b=>b+1}
\end_layout

\end_inset

 is executed, with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{b}
\end_layout

\end_inset

 containing the new value, then the result is used as parameter in calling
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{A}'s 
\backslash
textit{OnNext}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The use of the operator 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{Select}
\end_layout

\end_inset

, produces pure function over streams, and can compose other pure functions.
 For example: adding 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{C=A.Select(a=>a+1})
\end_layout

\end_inset

 to the program, is equivalent to writing only 
\begin_inset ERT
status open

\begin_layout Plain Layout

C=B.Select(b=>b+2)
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

Select
\end_layout

\end_inset

 is an example to the powerful operators provided, that reserves the functional
 purity, and calculate not only the values, but also 
\emph on
when
\emph default
 to get the values.
\end_layout

\begin_layout Standard
The values in the input stream, such as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{A}
\end_layout

\end_inset

 in the example, are triggered (by calling the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{OnNext}
\end_layout

\end_inset

), by an external execution, such as an input control, that calls 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{A}'s 
\backslash
textit{OnNext}
\end_layout

\end_inset

 whenever there is a change event.
 The items if the output stream is produced according to the time of the
 inputs stream's items.
 The values in the output stream is used to an external execution, such
 as updating an input control, by subscribing to the output stream (which
 is an observable).
\end_layout

\begin_layout Standard
Marble diagrams are useful to understand how operators operate the streams,
 as in figure 2.1, the input and output items are ilustrated over the time-axis.
 In the example (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{Select}
\end_layout

\end_inset

 operator), whenever value is produced in the input stream, value in the
 output is provided.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
matrix[row sep=0.5cm]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (7,0);
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (0x0) at (1,0) {1};
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x0) at (3,0) {3};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (3x0) at (4,0) {8};
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (5x0) at (6,0) {2};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[complete] (6x0) at (6.5,0) {};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
node[box,minimum width=7cm] (op) {Select
\backslash
{
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{tikzpicture}[baseline=-1mm]
\end_layout

\begin_layout Plain Layout

    
\backslash
node[marble,minimum height=6mm] (x) {x};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[marble,minimum height=6mm,right=5mm of x] (y) {x+1};
\end_layout

\begin_layout Plain Layout

    
\backslash
draw [fdash] (x) -- (y);
\end_layout

\begin_layout Plain Layout

  
\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
}};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (7,0);
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (0x2) at (1,0) {2};
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x2) at (3,0) {4};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (3x2) at (4,0) {9};
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (5x2) at (6,0) {3};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[complete] (6x2) at (6.5,0) {};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (0x0) -- (0x0|-op.north);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (2x0) -- (2x0|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (3x0) -- (3x0|-op.north);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (5x0) -- (5x0|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (6x0) -- (6x0|-op.north);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (0x2) -- (0x2|-op.south);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (2x2) -- (2x2|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (3x2) -- (3x2|-op.south);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (5x2) -- (5x2|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (6x2) -- (6x2|-op.south);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Marble-Diagram-for"

\end_inset

Marble Diagram for an execution example for A=B.Select(b=>b+1)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Constraints
\end_layout

\begin_layout Standard
Libraries like Hotdrink, applications like Microsoft Excel and paradigms
 like FRP provide the framework to declare functional dependancies while
 enforcing them under the wood.
 In Hotdrink and the constraints programming the constraints multi-way.
 In Microsoft Excel and the FRP paradigm, the constraints are one-way constraint
s, such that imperative assigment statements are lifted to be continuously
 enforced.
\end_layout

\begin_layout Section
Object Oriented Programming (OOP)
\end_layout

\begin_layout Standard
The key concept behind Objects Oriented Programming (OOP) is that, classes
 evolve without interfering other classes 
\begin_inset CommandInset citation
LatexCommand cite
key "duncan2003component"
literal "false"

\end_inset

.
 Classes use 
\emph on
contracts
\emph default
, and encapsulate the internal implementation.
 In the simplified form, the contract is the 
\emph on
interface
\emph default
, which defines variables and methods that are accessible to the consumers
 or subclasses.
 However, in the presence of events an interface is not enough to define
 a contract.
 
\end_layout

\begin_layout Standard
There are various approaches how to define contracts in such cases, but
 they are usually informal and hard to enforce.
 In implementation inheritance in 
\emph on
the fragile base class problem
\emph default
, the contract between the super class and subclass is broken, such as when
 a change in the super class breaks the sub class.
 And in contracts between providers and consumers, there is a significant
 number of design and implementation errors, often hard to define and correct.
\end_layout

\begin_layout Standard
The reason is that events might lead to 
\emph on
unexpected recursive re-entracnce of objects.
 
\emph default
Re-entracnce of objects is when an object's method calls a method that belongs
 to the same object: If a method update several of its instance variables,
 they of course should be consistent (i.e, calculated or updated according
 to each other), so the object's methods 
\emph on
should not
\emph default
 be called until finishing the execution.
 Furthermore, the method 
\emph on
should not
\emph default
 be called again until finishing its execution (but if there is special
 treatment).
\end_layout

\begin_layout Standard
In the approach to extend OOP with FRP, an existing language is extended
 with a variation of reactive variables as a data type [42].
 Accordingly, libraries such as ReactiveX
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnote{https://reactivex.io}
\end_layout

\end_inset

 and REscala
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnote{https://www.rescala-lang.com}
\end_layout

\end_inset

, support having a variation of reactive variables as objects’ data members
 (named also 
\emph on
instance variables
\emph default
).
\end_layout

\begin_layout Standard
Therefrom, objects' classes can contain
\emph on
 reactive instance variables
\emph default
, that are instance variables of type reactive variables.
 Also, objects' classes can contain formulas based on the reactive instance
 variables they contain.
 The formulas are activated once the objects are created.
 e.g., class 
\begin_inset ERT
status open

\begin_layout Plain Layout

C
\end_layout

\end_inset

 contains two reactive instance variables 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, and contains also the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

.
 Consequently, in each instance of C, 
\begin_inset ERT
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 that is associated to the instance will continuously re-evaluated in response
 to changes in the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 that is associated to the same instance.
\end_layout

\begin_layout Standard
Similar to the problems causes by unexpected recursive re-entracnce of objects,
 the problems in reactive instance variables.
 Reactive instance variables might have cycles when classes encapsulate
 their formulas, e.g., base class contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

, while the derived class contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

B:=A
\end_layout

\end_inset

.
 Similary for glitches: base class contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout

C:=B
\end_layout

\end_inset

 , while the derived class contains 
\begin_inset ERT
status open

\begin_layout Plain Layout

D:=A+C
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
In addition, there is an open question whether to support reassignment 
\begin_inset CommandInset citation
LatexCommand cite
key "salvaneschi2014towards"
literal "false"

\end_inset

.
 Declaring class variables being reactive variables, arises that conflict,
 whether to enable reassignment e.g.
 declaring 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B+1
\end_layout

\end_inset

 and then 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=C+1
\end_layout

\end_inset

.
 In FRP, reassignment should not be enabled, since in FRP we “describe things
 that exist, rather than actions that have happened or are to happen (i.e.,
 what is, not what does)” 
\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push"
literal "false"

\end_inset

.
 In contrast, in OOP reassignment should be enabled for assigning independently
 e.g., 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B+1
\end_layout

\end_inset

 in a base class, and 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=C+1
\end_layout

\end_inset

 in the derived class.
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Paragraph*
Decenterlized/No-Isolation
\end_layout

\begin_layout Standard
In the core of OOP paradigm, objects should hide their variables.
 So instance variables that need to be updated according to other instance's
 variable, should invovlve direct interaction, without to require a third
 party.
\end_layout

\begin_layout Standard
Hotdrink manages the variables by the constraints solver.
\end_layout

\begin_layout Paragraph*
Any dependency
\end_layout

\begin_layout Standard
Classes or types that contains reactive instance variables in their interface,
 allow to declare any dependency from those instance variables.
 If cycles are avoided such as in Soduium, then there is the limitation
 to avoid from declaring certain dependencies.
\end_layout

\begin_layout Paragraph*
Predictable Propogation
\end_layout

\begin_layout Standard
The core of the FRP paradigm is to provide predictable propogation.
 by the referntial transparcncy property, the same sequence of input produce
 consistenly the same output.
\end_layout

\begin_layout Standard
If there are cycles, if the (Bridging the gui gap with reactive values and
 relations...)
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Safe Propogation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any dependency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decenterlized
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FrTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReactiveX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sodium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed REscala
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hotdrink
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
????????
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unsafe Propogation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No Cycles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Centerlized
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FrTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReactiveX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sodium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed REscala
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hotdrink
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
???????
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
unsupported constructions, unpredictable results or to no-isolation
\end_layout

\end_body
\end_document
