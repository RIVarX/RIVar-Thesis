#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Background
\end_layout

\begin_layout Standard
In the development of user interface applications, the task of updating
 variables in response to other variables' updates, might cause unpredictable
 behavior such as infinite loops 
\begin_inset CommandInset citation
LatexCommand cite
key "hung2018architectural"
literal "false"

\end_inset

, e.g., variable A might update variable B in response to its update and vice
 versa.
 Unpredictable behavior might exist especially when an application commences
 scaling and have long chains of updates.
\end_layout

\begin_layout Standard
This section provides an overview, for how FRP and OOP have contributed
 to this task of updating variables in response to other variables' updates.
\end_layout

\begin_layout Section
OOP
\end_layout

\begin_layout Standard
OOP suggests objects encapsulation, by which objects' variables are protected
 from being updated by external code.
 Instead, objects expose methods, by which an object's consumers ask the
 object to update its variables.
 OOP also provides the inheritance mechanism, to reuse software without
 breaking the encapsulation.
\end_layout

\begin_layout Standard
OOP are based on the control-driven imperative paradigm, by which the program
 is executed line by line.
 On top of it, OOP provides 
\emph on
indirect control
\emph default
 
\begin_inset CommandInset citation
LatexCommand citep
key "martin2018clean"
literal "false"

\end_inset

, such that object's consumer calls a method according to its names and
 arguments, but the actual method is known only in runtime.
 This should keep on the object's encapsulation, because the object's consumer
 need to call methods according to the interface and not according to the
 actual implementation.
\end_layout

\begin_layout Standard
There is an option named 
\emph on
inversion of control
\emph default
 (IoC), such that an object's consumer will register code, that will be
 executed by the object in certain events.
 By this option, there is an option to register code that update variables,
 to be executed in the events that other variables are updated.
\end_layout

\begin_layout Standard
Based on OOP and IoC, enterprise applications can provide customers to extend
 the application according to their business needs.
 In the enterprise application 
\emph on
Microsoft Power Apps
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
https://powerapps.microsoft.com
\end_layout

\end_inset

, developers can register plugins that update fields, to be re-calculated
 according other fields.
 The custom plugin might lead to infinite loop of updates caused by several
 registered plugins.
 Therefore, the field 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Depth}
\end_layout

\end_inset


\emph on

\begin_inset Foot
status open

\begin_layout Plain Layout
https://carldesouza.com/dynamics-365-understanding-plugin-depth
\end_layout

\end_inset


\emph default
 is provided to the developer to stop the loop.
 The field is like the cursion depth, containing how many times the current
 plugin is executed.
\end_layout

\begin_layout Standard
In OOP, an object's variables are called its 
\emph on
state
\emph default
, because it represents the state of the object 
\begin_inset CommandInset citation
LatexCommand cite
key "taivalsaari1996notion"
literal "false"

\end_inset

, or that its state is derived from the variables.
 There is a modeling method 
\begin_inset CommandInset citation
LatexCommand cite
key "harel1995statement"
literal "false"

\end_inset

 to present states and events as transition between them, such that in the
 transition, there are actions, that are code to execute during the transition.
 This method is used in front-end applications by the library 
\emph on
Redux
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "caspers2017react"
literal "false"

\end_inset

 and is promoted by 
\emph on
XState
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
https://xstate.js.org
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
FRP
\end_layout

\begin_layout Standard
FRP is a paradigm developed to provide predictable calculations and updates.
 In traditional programming, developers have difficulties controlling the
 task of manually maintaining variables, by calling functions to be executed
 in various events.
 In contrast, FRP provides a declerative style to define the data dependencies
 explicit, and a runtime that maintain them.
\end_layout

\begin_layout Standard
In the most elegant style, functions over reactive variables are declared,
 producing the runtime behavior named 
\emph on
one-way data flow contraint
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "demetrescu2011reactive"
literal "false"

\end_inset

 or 
\emph on
spreadsheet behavior
\emph default
.
 Declaration such as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset

 means 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 to be function of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{C}
\end_layout

\end_inset

, with the runtime behavior that updating 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{C}
\end_layout

\end_inset

 triggers updates of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

.
 This elegance is provided automatically instead of manually maintaining
 the formula as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:manually-maintaining-one-way"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

B.changed += { (e) => B=e; A = B+C; }
\end_layout

\begin_layout Plain Layout

C.changed += { (e) => C=e; A = B+C; }
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:manually-maintaining-one-way"

\end_inset

Manually maintaining one-way data flow contraint 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

A=B.CombineLatest(C,(b,c)=>b+c));
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:CombineLatest"

\end_inset

One-way data flow contraint 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset

 by using streams of events
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although the notion of using the high-level syntax of reactive variables,
 We see in the paradigm the concept of events harmonized in several forms
 
\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push,Kamina2018,blackheath2016functional"
literal "false"

\end_inset

.
 In one form, streams of events are used similar to reactive variables 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

.
 Actualy a reactive variable can be represented by a stream of events representi
ng the variable's values as a list 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional,schuster2016reactive"
literal "false"

\end_inset

.
 This produces more verbose syntax 
\begin_inset CommandInset citation
LatexCommand cite
key "schuster2016reactive"
literal "false"

\end_inset

 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:CombineLatest"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\end_body
\end_document
