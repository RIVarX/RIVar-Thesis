#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
Our journey began by formalizing an approach that enables mutual recursion,
 reducing the need for maintaining acyclic data dependency graphs.
 Instead, we established a well-defined contract for reactive instance variables
, allowing assignments more freely.
 This approach served as the foundation for our work in enabling FRP within
 the context of OOP, combining the strengths of both paradigms.
\end_layout

\begin_layout Standard
To implement this approach, we utilized observable streams inspired by the
 dataflow paradigm.
 This allowed us to create a framework that aligns with constraint programming
 principles, further enhancing its capabilities.
\end_layout

\begin_layout Standard
As a result, our new framework capitalizes on the advantages derived from
 the paradigms and frameworks it builds upon.
 It simplifies the derivation of variables and classes, ensuring predictable
 outcomes.
\end_layout

\begin_layout Section
Future Work
\end_layout

\begin_layout Standard
We anticipate that this approach can be utilized as a state management solution
 to simplify front-end application development.
 In front-end development, state management is often treated separately
 from other aspects of the development process.
 Numerous solutions exist to address this role (refer to 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://docs.flutter.dev/development/data-and-backend/state-mgmt/options
\end_layout

\end_inset

), each with its own maintenance and behavior limitations.
 Our model aims to be easily maintainable, but its behavior is primarily
 focused on inferring values based on the latest received value from any
 source.
\end_layout

\begin_layout Standard
Further research should explore additional options for inferring values
 using reactive variables.
 One possible approach is employing 
\emph on
equality tests
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "perez2015bridging"
literal "false"

\end_inset

, where values that remain unchanged are disregarded.
 Additionally, dealing with conflicting values from different sources may
 require extending the abstraction to handle rejection.
 Furthermore, we should investigate the integration of multiple semantic
 options.
\end_layout

\begin_layout Standard
By considering these avenues, we can continue to enhance our approach and
 expand its capabilities.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We expect this approach to be implemented as a state management solution
 to ease the development of front-end applications.
 In front-end development, state management is separated from other parts
 of the development process.
 There are various solutions to handle this role
\begin_inset Foot
status open

\begin_layout Plain Layout
https://docs.flutter.dev/development/data-and-backend/state-mgmt/options
\end_layout

\end_inset

, each with its own maintenance and behavior limitations.
 Our model should be easy to maintain, but its behavior is limited to inferring
 values based on the latest value received from any of the sources.
\end_layout

\begin_layout Plain Layout
There are additional options to be researched for reactive variables to
 infer their values.
 One such option is the use of 
\emph on
equality tests
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "perez2015bridging"
literal "false"

\end_inset

, in which values that have not changed are ignored.
 Additionally, values that conflict with another source may need to be rejected,
 requiring an extension of the abstraction.
 We should also explore integrating several semantic options.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
databases? implement in distributed settings
\end_layout

\end_inset


\end_layout

\end_body
\end_document
