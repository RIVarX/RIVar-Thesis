#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Conclusion"

\end_inset

Conclusion
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
We introduced an model in which fields are declared to be calculated according
 to each other.
 It is abstracted out details like seperating between input and computed
 fields.
 We continuously calculate based on the latest input, assuming that old
 values can be overridden by the new ones.
 These assumptions should be further tested in real-life applications or
 replaced with an advanced 
\begin_inset Formula $\LSTINLINE{merge}$
\end_inset

 function.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This thesis enables to add filling options by just adding an assignment.
 For example, specifying A:=b+1, A can be filled by filling B, while previous
 filling options are still available.
 The cost is the specific algorithm in the change propagation that takes
 into considereation several filling options.
\end_layout

\begin_layout Section
Add Filling Option
\end_layout

\begin_layout Section
Improving Directions
\end_layout

\begin_layout Paragraph
Add Computed Fields
\end_layout

\begin_layout Paragraph
Add Filling Options
\end_layout

\begin_layout Plain Layout
Among fields 
\begin_inset Formula $\NAME{Drug}$
\end_inset

, 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

, only two of them are required for documenting drugs' amount.
 Users can, for example, define quantities by setting only 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In such a case, the value of 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 is computed.
 Additionaly, users can define quantities by setting only the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In such a case, the value of 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 is computed.
\end_layout

\begin_layout Plain Layout
Adding such redundancy can have a positive impact on the user experience.
 If only one option is available, users are stricted: users must define
 amounts in the terms used in the Order Entry.
 There are drugs for whom it is easier to define quantities by setting 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while for other drugs, by setting 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

.
 Consequently, for some drugs users are forced to
\emph on
 convert the numbers
\emph default
, i.e., to compute it according to an appropiate formula.
 For example, in case that the available fields are 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, and an amount is 
\begin_inset Formula $0.5$
\end_inset

 and 
\begin_inset Formula $100$
\end_inset

 for 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, users calculate 
\begin_inset Formula $Concentration\times Volume$
\end_inset

 out of the application for setting 
\begin_inset Formula $\NAME{Drug}$
\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the Order Entry, setting 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 triggers calculation in 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

.
 Similary, setting 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 triggers calculation in 
\begin_inset Formula $\NAME{Drug}$
\end_inset

.
 One might think that the Order Entry should contain only two of the triple.
 The third field is redundant, as it can be calculated from the other fields
 when needed.
\end_layout

\begin_layout Plain Layout
However, there are drugs for whom it is easier to define quantities by setting
 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while for other drugs, by setting 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

.
 In case that only one option is available, there are cases when the user
 need to
\emph on
 convert the numbers
\emph default
, i.e., take the tuple in mind and compute it according to an appropiate formula.
 For example, in case that the available fields are 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and the user has in mind 
\begin_inset Formula $0.5$
\end_inset

 and 
\begin_inset Formula $100$
\end_inset

 for the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, then the user need to compute 
\begin_inset Formula $Concentration\times Volume$
\end_inset

 for the 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 to fill.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
———-
\end_layout

\begin_layout Plain Layout
By far we discovered the technical complexity in creating fields calculations.
 This might lead some to develop applications without (or to reduce) fields
 redandencies, so that we need not to handle the consistency in field values.
 Holding data once is more efficient for computers, and it takes time and
 resources to handle calculations and avoid inconsistencies.
 Programmers may think like computers and ignore the need of users for redundanc
ies.
 This is also supported by the argument that front-end applications should
 be minimalistic to avoid overwhelming users with too many elements on the
 screen (as mentioned in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Cognitive-load"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Plain Layout
However, in contrast to the computers, humans need redundancies by nature.
 Humans possess multiple channels of information, and tend to choose the
 one that is most convenient for the specific task.
 Consider the Drug Administration UI.
 For some drugs, it is easier to define the quantities by setting 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while for other drugs, it is easier to administer by specifying the 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

.
 If only the first option is available, the user must calculate the necessary
 drug values to achieve the desired concentration.
\end_layout

\begin_layout Plain Layout
The need for redundancies is even broader.
 Generally, we think differently.
 Some individuals find it easier to use different channels of perception
 than others.
 Therefore, different people require different options for a single task.
 Different options also help validate our understanding by utilizing multiple
 channels and cross-checking information.
\end_layout

\begin_layout Plain Layout
Yet popular technologies have already populated features for efficiently
 creating derived data labels like in FRP.
 In the case mentioned above (regarding Drug Administration), this functionality
 can assist users who need to calculate the necessary drug values to achieve
 the desired concentration.
\end_layout

\begin_layout Plain Layout
The missing feature is the ability to easily add various input options,
 allowing the values of other fields to be calculated based on the user's
 input.
 Otherwise, applications become complex and not user-friendly, forcing users
 to adopt a different way of thinking.
 Instead of struggling to understand the application's logic, users expect
 the computer to understand their intentions.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The missing function is to easily add various input options, so that depending
 on the fields the user fills, the values of other fields will be calculated.
 Otherwize, the Applications become complex and not user-friendly, because
 they force the user to think differently.
 instead of that the users need to learn the use cases implemented in the
 application (they work hard to understand the computers), they expect that
 the computers understand them.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Sometimes, certain information holds more weight, and our brains naturally
 consider this weighted input.
\end_layout

\begin_layout Plain Layout
Unlike computers, which analyze information in binary terms, humans perceive
 nuances derived from.
 For us, saying 'no' is different from saying 'no no.' Expanding technological
 options in this direction could lead us to a more user-friendly UX, the
 full potential of which we are yet to fully comprehend.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Subsection
Elements Amount
\end_layout

\begin_layout Plain Layout
In the Order Entry in MetaVision, there is a field selection named 
\emph on
ordering style
\emph default
 that contains options like 
\begin_inset Quotes eld
\end_inset

set concentraion and volume
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

set dose and rate
\begin_inset Quotes erd
\end_inset

.
 According to the selection option, fields become editable or readonly,
 controling the calculations directions.
 If the user select 
\begin_inset Quotes eld
\end_inset

set concentraion and volume
\begin_inset Quotes erd
\end_inset

, those fields become editable, and the other fields will be calculated
 accordingly.
 There are also elements named 
\emph on
locker
\emph default
 to 
\emph on
lock
\emph default
 or 
\emph on
unlock
\emph default
 fields.
 locking a field means that the field's value would be calculated according
 to other fields' values, while unlocking means that the field becomes editable
 makeing other fields to be calculated.
\end_layout

\begin_layout Plain Layout
Those elements, added to the screen to control the calculations flow, have
 a cost of adding complexity to the users.
 The Order Entry is a very large and complex window.
 The users need long training in order to effectively use it.
 The application should be carefuly used because there might be errors in
 using it.
 In order to improve useability, we need the screen to contain less information.
\end_layout

\begin_layout Subsection
Navigations
\end_layout

\begin_layout Plain Layout
In order to help the users, hospitals own 
\emph on
templates
\emph default
 that contain pre filled values, 
\begin_inset Quotes eld
\end_inset

a setup
\begin_inset Quotes erd
\end_inset

 to specific cenarios.
 In such a case, the users should search and find the appropiate setup or
 the specific cenario covered by the individual application.
 This is named 
\emph on
navigations
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "roman2017navigation"
literal "false"

\end_inset


\emph on
.

\emph default
 The users might be overwhelmed by the available options.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
It tends to create small precize components or applications, each solves
 a specific use case.
 Another existing directions: to use 
\emph on
templates
\emph default
.
 The templates contain pre filled values, 
\begin_inset Quotes eld
\end_inset

a setup
\begin_inset Quotes erd
\end_inset

 to specific cenarios.
 In such a case, the users should search and find the appropiate setup or
 the specific cenario covered by the individual application.
 This is named 
\emph on
navigations
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "roman2017navigation"
literal "false"

\end_inset


\emph on
.

\emph default
 The users might be overwhelmed by the available options.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Fast Feedback Loop
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The diffrent combinations to set the fields causes diffrent ways to calculate
 the fields.
 For example, if Dose are Duration is set, Drug's value are calcuated by
 div the value of Dose by the value of Duration.
 if Dose, Volume an Rare are set, then Drug's value is calcualted by
\end_layout

\begin_layout Plain Layout
Focusing on Drug, there are the following ways:
\end_layout

\begin_layout Itemize
Dose/Duration
\end_layout

\begin_layout Itemize
Dose/(Volume*Rate)
\end_layout

\begin_layout Plain Layout
For example,
\end_layout

\begin_layout Plain Layout
There are several ways by which Drug's value are calculated.
 The way in which it will be calculated depends on which fields
\end_layout

\begin_layout Plain Layout
Depending on which fields the user set, the way in which field Drug are
 calculated, are changed.
\end_layout

\begin_layout Description
hh if
\end_layout

\begin_layout Plain Layout
———
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
In order to enhance the Order Entry, it should be easy to make changes according
 to feedback from users.
 We present an example around the field Drug and another field named Alert.
 The field 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 indicates whether the application should trigger an alert for abnormal
 medication amounts.
 Using FRP style, a relationship is to established between 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

, enabling the automatic determination of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 based on the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=FromInput()
\end_layout

\begin_layout Plain Layout

Alert=IsAbnormal(Amount)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
The code needs to be modified (indicated using bold font style) when the
 doctor administers the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 in order to calculate the resulting amount.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput()
\end_layout

\begin_layout Plain Layout

__AmountByConcentrationAndVolume=Concentration*Volume__ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),__IsAbnormal(AmountByConcentration AndVolume)
__)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
If the doctor administers the medication by setting the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

, the medication amount can be calculated using the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose*Duration}
\end_layout

\end_inset

.
 In this scenario, it is necessary to update the code accordingly.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none] 
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput() 
\end_layout

\begin_layout Plain Layout

AmountByConcentrationAndVolume=Concentration*Volume __AmountByDoseAndDuration=Do
se*Duration__ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),
\end_layout

\begin_layout Plain Layout

IsAbnormal(AmountByConcentrationAndVolume),
\end_layout

\begin_layout Plain Layout

__IsAbnormal(AmountByDoseAndDuration)__) 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
It is evident that whenever additional sources of values are required for
 the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 variable, it becomes necessary to update the assignment of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 variable.
 For large applications, there might be many updates, which makes it un-easy
 to make such a change.
\end_layout

\begin_layout Plain Layout
————-
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Classes with 
\begin_inset Formula $\LSTINLINE{RIVar}$
\end_inset

s form like objects with writable fields, such that the fields are continuously
 consistent.
 Previously, in the various models, adding calculations required that they
 be in the same class or component to ensure that the calculations are correct,
 that there are no cycles, or that cycles are handled correctly.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
We did not achieve our goal of providing a proven mechanism that enhances
 healthcare applications.
 However, we have provided a framework that improves upon the aspects discovered
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Motivation"
plural "false"
caps "true"
noprefix "false"

\end_inset

 for the enhancement process.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Reducing Cognitive load
\end_layout

\begin_layout Standard
The model reduces the number of details that users and developers need to
 be aware of.
 First, regarding handling mutltiple fieds or variables according to exact
 use-cases.
 Second, regrading to managing multiple use-cases.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
A field in GUI can be related to their corespondence meaning, 
\end_layout

\begin_layout Plain Layout
The approach abstracts out from the user the choose what fields are 
\emph on
input
\emph default
 and what fields are 
\emph on
computed
\emph default
, Or to choose an exact wizard according to the cenario
\end_layout

\begin_layout Plain Layout
We reduced the duplications in the user interfaces caused from the various
 calculation options.
 The approach abstracts out from the user the choose what fields are 
\emph on
input
\emph default
 and what fields are 
\emph on
computed
\emph default
.
 We continuously calculate based on the latest input, assuming that old
 values can be overridden by the new ones.
 These assumptions should be further tested in real applications or replaced
 with an advanced 
\begin_inset Formula $\LSTINLINE{merge}$
\end_inset

 function.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Improving Delivery Speed
\end_layout

\begin_layout Standard
The model offers flexibility in defining boundaries.
 This depends on the organization's needs, determining the optimal location
 for each field or calculation.
 One criterion for separating code into components is whether it is necessary
 to ensure that changing the code of one component will not affect the others
 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 With these new options, we introduce more flexibility in bounding code,
 enabling faster code modifications.
\end_layout

\begin_layout Paragraph
Improving Front-End Usability
\end_layout

\begin_layout Standard
The model may help to scale up the creation of fields calculations and improve
 front-end usability.
 It can be said that we provide a new mechanism to handle the redundancy.
 For redundancy in fields or variables, the runtime automatically updates
 the values to make them consistent.
 For redundancy in code, the new model provides a new option to reuse code,
 instead of to duplicate components (to avoid harming existing usages).
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Similary, it can be said that the provided mechanism addresses the challenge
 of managing both the 
\emph on
data dependencies
\emph default
 and the 
\emph on
source code dependencies
\emph default
.
 The latter points that if applications that are composed of several components,
 there might be that changing the source code of one component lead to subsequen
t changes in the source code of other components, meaning that the code
 of the component depends on the code of the other coomponents 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 The new mechanism should be used to specify SSOT, thus to 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
——–
\end_layout

\begin_layout Plain Layout
the 
\emph on
source code dependencies
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

 can be managed
\end_layout

\begin_layout Plain Layout
This addresses the challenge of managing the 
\emph on
source code dependencies
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

 of the code that manages the data dependencies.
 In applications that are composed of several components, changing the source
 code of one component might lead to subsequent changes in the source code
 of other components, meaning that the code of the component depends on
 the code of the other coomponents.
 By the OOP features,
\end_layout

\begin_layout Plain Layout
This model provides more boundery options 
\end_layout

\begin_layout Plain Layout
By the use of 
\begin_inset Formula $\NAME{rivarjs}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.npmjs.com/package/rivarjs
\end_layout

\end_inset


\end_layout

\end_inset

 for 
\begin_inset Formula $\NAME{JavaScript}$
\end_inset

 or other similar extensions for others programming languages, we provide
 a new model of extensibility.
 Classes with RIVars form like objects with writable fields, such that the
 fields are continously consistent.
 Previously in any model, adding calculations required to being in the same
 class or component.
 to make sure that the calculations are correct, that there is no cycles
 or that the cycles are handled correctly.
\end_layout

\begin_layout Plain Layout
By the use of 
\begin_inset Formula $\NAME{rivarjs}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.npmjs.com/package/rivarjs
\end_layout

\end_inset


\end_layout

\end_inset

 for 
\begin_inset Formula $\NAME{JavaScript}$
\end_inset

 or other similar extensions for others programming languages, we achive
 predictability while enabling to decouple formulas from the used reactive
 variables, so that expressions can be associated to reactive variables
 from outside of objects, and that variables are updated directly by their
 dependencies, without a central madiator.
\end_layout

\begin_layout Plain Layout
This lets a new model of extensibility.
 Classes with RIVars form like objects with writable fields, such that the
 fields are continously consistent.
 Previously in any model, adding calculations required to being in the same
 class or component.
 to make sure that the calculations are correct, that there is no cycles
 or that the cycles are handled correctly.
 This model forms a new type of contract, that 
\end_layout

\begin_layout Plain Layout
This not only helps in managing the data dependencies on runtime but also
 the 
\emph on
source code dependencies
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 Source code dependencies are the dependencies derived from the direction
 of changes in the source code of the applications.
 In applications that are composed of several components, changing the source
 code of one component might lead to subsequent changes in the source code
 of other components, meaning that the code of the component depends on
 the code of the other components.
\end_layout

\begin_layout Plain Layout
———-
\end_layout

\begin_layout Plain Layout
The FRP paradigm makes this easier by allowing developers to explicitly
 declare data dependencies 
\begin_inset CommandInset citation
LatexCommand cite
key "maier2010deprecating,bainomugisha2013survey"
literal "false"

\end_inset

, leaving the challenge of managing the 
\emph on
source code dependencies
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

, this consists of the changes required in the application code.
 In applications that are composed of several components, changing the source
 code of one component might lead to subsequent changes in the source code
 of other components, meaning that the code of the component depends on
 the code of the other coomponents.
\end_layout

\begin_layout Plain Layout
We have developed a new semantics for creating data dependencies without
 the need to be aware of transitive dependencies.
 This means that variables forming the data dependencies can be part of
 OOP interfaces.
 Consequently, we have achieved a framework that harmonizes the abstraction
 mechanisms of both OOP and FRP, which is also considered a decentralized
 constraints system, and also a state management solution for front-end
 applications
\end_layout

\end_inset


\end_layout

\begin_layout Section
Future Work
\end_layout

\begin_layout Paragraph
Evaluation
\end_layout

\begin_layout Standard
We hope to evaluate the model in improving front-end usability.
 We have considered several options for moving forward.
 One option is to refactor parts of an existing complex healthcare system
 and analyze the time that it takes to fix bugs or to develop new features
 be fore and after the change.
 However, this approach would require the cooperation of the private organizatio
n that owns the system, as we would need to publish internal information.
 Therefore we think about alternative directions.
\end_layout

\begin_layout Standard
We provide an extension library, as a state management solution to development
 communities, 
\begin_inset Formula $\NAME{RIVarX}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.nuget.org/packages/RIvar.RIvarX
\end_layout

\end_inset


\end_layout

\end_inset

 for 
\begin_inset Formula $\LSTINLINE{C\#}$
\end_inset

 and 
\begin_inset Formula $\NAME{rivarjs}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.npmjs.com/package/rivarjs
\end_layout

\end_inset


\end_layout

\end_inset

 for 
\begin_inset Formula $\NAME{JavaScript}$
\end_inset

.
 They should be checked against real-life components and applications.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
(One idea, or general patterns, such as cascading combo boxes, where selecting
 a value in one combo box filters the options available in another combo
 box.
\end_layout

\begin_layout Plain Layout
Another interesting direction is to develop 
\family typewriter
CLIs
\family default
 or 
\family typewriter
IDEs
\family default
 for programming languages such as 
\begin_inset Formula $\NAME{pop-pl}$
\end_inset

, a patient-oriented prescription programming language
\begin_inset CommandInset citation
LatexCommand cite
key "florence2015pop"
literal "false"

\end_inset

.
 Inspired from programming environments and extensions like 
\begin_inset Formula $\NAME{Visual}$
\end_inset

 
\begin_inset Formula $\NAME{Studio}$
\end_inset

 and 
\begin_inset Formula $\NAME{Resharper}$
\end_inset

, the UX can be improved in the form of simple writing.
 Creating front-ends with a large number of fields can cause cognitive overload,
 while redundancy improves usability.
 Therefore, to enable redundancy without overwhelming users, front-ends
 might switch to IDEs or smart CLIs.
 In the future model, fields will appear on the screen as if information
 is being typed into a notepad, so that we can freely add redundancy to
 the language.
\end_layout

\begin_layout Plain Layout
We can also research this direction in domains other than healthcare, specifical
ly 
\begin_inset Formula $\NAME{DevOps}$
\end_inset

 tools.
 As in 
\begin_inset Formula $\NAME{Azure}$
\end_inset


\begin_inset Formula $\NAME{Devops}$
\end_inset

, there is interchangeability of front-ends and text editors.
 When specifying pipelines, there are the classic pipelines, which are being
 migrated to 
\begin_inset Formula $\NAME{YAML}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://learn.microsoft.com/en-us/azure/devops/pipelines/migrate/from-classic-pipe
lines?view=azure-devops
\end_layout

\end_inset


\end_layout

\end_inset

.
 We also think about tasks done by 
\family typewriter
CLIs
\family default
 that we can improve for a user-friendly front-end, specifically conflict
 resolution.
 As an alternative to the 
\begin_inset Formula $\NAME{npm}$
\end_inset

 
\family typewriter
CLI
\family default
, we think about drop-down lists that the user can select the package version
 from, while other lists are filtered accordingly.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Expanding the Model
\end_layout

\begin_layout Standard
Our model should be advanced for cases where a function to calculate data
 based on other data is computationally expensive.
 One approach to consider is adopting a pull model (rather than the currently
 used push model)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push"
literal "false"

\end_inset

.
 The pull model retrieves updated data on demand, saving resources by avoiding
 unnecessary continuous updates.
\end_layout

\begin_layout Standard
Another direction for expansion is to improve the model's handling of scenarios
 where exact dependencies are difficult to pinpoint.
 This is a common issue when dealing with large chunks of data, and it can
 lead to redundant and expensive updates.
 For example, a minor change in code repository that triggers a full CI/CD
 from scratch.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The approach can be expanded.
 The consistency of front-end variable values is similar to the consistency
 needed in the backend or data store.
 For example, systems that handle different aspects might hold records for
 the same entities, with the need to synchronize the data.
\end_layout

\begin_layout Plain Layout
We believe that more options for inferring values, in addition to the presented
 merge operation, will be discovered, while maintaining the consistency
 of the values of the variables.
 We chose the direction to update the variable in response to each change
 in any of the sources.
 However, it might be the case that changes to the value under certain condition
s should be rejected.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
One possible approach is employing 
\emph on
equality tests
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "perez2015bridging"
literal "false"

\end_inset

, where values that remain unchanged are disregarded.
 Additionally, dealing with conflicting values from different sources may
 require extending the abstraction Furthermore, further investigation should
 be conducted on the integration of multiple semantic options.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
performance considerations (non functional requirements) may require changing
 the order of the updates, such as reducing consistency levels for heavy
 calculations.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We expect this approach to be implemented as a state management solution
 to ease the development of front-end applications.
 In front-end development, state management is separated from other parts
 of the development process.
 There are various solutions to handle this role
\begin_inset Foot
status open

\begin_layout Plain Layout
https://docs.flutter.dev/development/data-and-backend/state-mgmt/options
\end_layout

\end_inset

, each with its own maintenance and behavior limitations.
 Our model should be easy to maintain, but its behavior is limited to inferring
 values based on the latest value received from any of the sources.
\end_layout

\begin_layout Plain Layout
There are additional options to be researched for reactive variables to
 infer their values.
 One such option is the use of 
\emph on
equality tests
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "perez2015bridging"
literal "false"

\end_inset

, in which values that have not changed are ignored.
 Additionally, values that conflict with another source may need to be rejected,
 requiring an extension of the abstraction.
 We should also explore integrating several semantic options.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
databases? implement in distributed settings
\end_layout

\end_inset


\end_layout

\end_body
\end_document
