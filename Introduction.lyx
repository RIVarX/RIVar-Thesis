#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Introduction"

\end_inset

Introduction
\end_layout

\begin_layout Standard
Preserving data consistency and currency is a crucial aspect of software
 systems.
 This requires implementing 
\emph on
change propagation
\emph default
.
 Change propagation is a process in which a change in data is disseminated
 and updates other data that depends on it.
 Updating data has several names depending on the type of data.
 For example: assigning to a variable
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "abelson1996structure"
literal "false"

\end_inset

, updating a GUI field value, merging branches (that is a common process
 in version control systems, where two developers have worked on the same
 code simultaneously), upgrading a version (that means replacing an existing
 version of a product or component with a newer one), and so on.
 These are all data updates that can be part of a change propagation process.
 The process is transitive.
 For example, A (GUI) field representing working hours is updated according
 to the input from the entry time and exit time fields.
 Updating the working hours field can lead to an update of the total monthly
 hours field.
 A field representing the hourly rate can then be calculated based on the
 total monthly hours field, and so on.
\end_layout

\begin_layout Section
Motivation
\end_layout

\begin_layout Standard
We will present motivation through a 
\family typewriter
Drug Administration
\family default
 application.
 The application is part of a broader window called 
\family typewriter
Order Entry
\begin_inset Foot
status open

\begin_layout Plain Layout
Similar to Computerized Provider Order Entry (CPOE)
\end_layout

\end_inset


\family default
 in a clinical information system 
\family typewriter
MetaVision
\family default
 provided by 
\family typewriter
iMDsoft
\family default
.
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://imd-soft.com/
\end_layout

\end_inset


\end_layout

\end_inset

 As illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1-2-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, 
\family typewriter
Drug Administration
\family default
 addresses the need of clinicians to manage medication quantities.
 The application consists of six fields: 
\family typewriter
Drug
\family default
, 
\family typewriter
Volume
\family default
, 
\family typewriter
Concentration
\family default
, 
\family typewriter
Rate
\family default
, 
\family typewriter
Dose
\family default
 and 
\family typewriter
Duration
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This thesis is motivated by the need to improve usability problems in healthcare
 applications 
\begin_inset CommandInset citation
LatexCommand cite
key "gawande2018doctors"
literal "false"

\end_inset

.
 We focus on a small scale application, in how to reduce complexity related
 to non-functional requirements (i.e., requirements that are not the essential
 requirements as seen by users).
 The application is named 
\family typewriter
Drug Administration
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A small part from Order Entry in 
\family typewriter
MetaVision
\family default
, an healthcare system provided by 
\family typewriter
iMDsoft
\family default
.
\end_layout

\end_inset

 
\family default
and illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1-2-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 
\family typewriter
Drug Administration
\family default
 addresses clinicians need to deal with medications amounts.
 
\family typewriter
Drug Administration
\family default
 consists six fields: 
\family typewriter
Drug
\family default
, 
\family typewriter
Volume
\family default
, 
\family typewriter
Concentration
\family default
, 
\family typewriter
Rate
\family default
, 
\family typewriter
Dose
\family default
 and 
\family typewriter
Duration
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tabular}{|c c c| }    
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

Drug & Concentration & Volume 
\backslash

\backslash
   
\end_layout

\begin_layout Plain Layout


\backslash
framebox(35,15){
\backslash
textit{100}} & 
\backslash
framebox(35,15){
\backslash
textit{0.33}} & 
\backslash
framebox(35,15){300} 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

 Dose & Duration & Rate 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

 
\backslash
framebox(35,15){10} & 
\backslash
framebox(35,15){10} & 
\backslash
framebox(35,15){
\backslash
textit{30}} 
\backslash

\backslash
  
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout


\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

Drug Administration, contains the following fields:
\end_layout

\begin_layout Plain Layout


\backslash
begin{description}      
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Drug
\begin_inset Quotes erd
\end_inset

] relates to amount of medication/drug administered to a patient, (e.g., 20
 mg).
    
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Volume
\begin_inset Quotes erd
\end_inset

] relates to Infusion fluid volume.
 An Infusion injects the medication into the patients body, by mixing the
 Drug with fluids (e.g., 20 ml).
 
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Concentration
\begin_inset Quotes erd
\end_inset

] amount of the 
\backslash
textbf{Drug} per 
\backslash
textbf{Volume} (e.g., 0.5 mg/ml).
  
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Rate
\begin_inset Quotes erd
\end_inset

] relates to 
\backslash
textbf{Volume} flow administered into the patients body per time unit (e.g.,
 20 ml per hour).
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Dose
\begin_inset Quotes erd
\end_inset

 (or Dosage)] 
\backslash
textbf{Drug} administered into the patients body per time unit (e.g., 20 mg
 per hour).
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Duration
\begin_inset Quotes erd
\end_inset

] relates to the duration from starting the injection until stopping it.
  
\end_layout

\begin_layout Plain Layout


\backslash
end{description}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-calculations-1-2-1"

\end_inset


\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Drug Administration.
\end_layout

\end_inset

 Drug Administration.
 The fields are illustrated with example values, in case the user sets 
\family typewriter
Volume
\family default
, 
\family typewriter
Dose
\family default
 and 
\family typewriter
Duration
\family default
.
 The fields 
\family typewriter
Drug
\family default
, 
\family typewriter
Concentration
\family default
, and 
\family typewriter
Volume
\family default
 are displayed in italic typeface to indicate that these values are calculated
 based on the set values.
\begin_inset Note Note
status open

\begin_layout Plain Layout
User interface component for drug administration.
 The upper panel represents the bag component, and the lower panel represents
 the pump component.
 The fields are illustrated with example values, in case the user sets Volume,
 Dose and Duration.
 The fields Drug, Concentration, and Volume are displayed in italic typeface
 to indicate that these values are calculated based on the set values.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Drug relates to amount of medication/drug administered to a patient, (e.g.,
 20 mg).
\end_layout

\begin_layout Description
Volume relates to Infusion fluid volume.
 An Infusion injects the medication into the patients body, by mixing the
 
\series bold
Drug
\series default
 with fluids (e.g., 20 ml).
\end_layout

\begin_layout Description
Concentration amount of the 
\series bold
Drug
\series default
 per 
\series bold
Volume
\series default
 (e.g., 0.5 mg/ml).
\end_layout

\begin_layout Description
Rate relates to 
\series bold
Volume
\series default
 flow administered into the patients body per time unit (e.g., 20 ml per hour).
\end_layout

\begin_layout Description
Dose (or Dosage) 
\series bold
Drug
\series default
 administered into the patients body per time unit (e.g., 20 mg per hour).
\end_layout

\begin_layout Description
Duration relates to the duration from starting the injection until stopping
 it.
\end_layout

\begin_layout Standard
For preserving data consistency and currency, the application performs automatic
 change propagation based on the fields the user updates.
 A procedure named 
\family typewriter
Calculate
\family default
, whose content is shown in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Centerlized-Calculation-1-3-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, is executed whenever any field is modified.
 The procedure contains code that can handle different scenarios resulting
 from various combinations of edited fields.
 For example, the scenario in
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:first_if}
\end_layout

\end_inset

 specifically addresses the case where the user edits 
\family typewriter
Dose
\family default
, 
\family typewriter
Duration
\family default
, and 
\family typewriter
Volume
\family default
.
 In this scenario, the values for 
\family typewriter
Drug
\family default
, 
\family typewriter
Concentration
\family default
, and 
\family typewriter
Rate
\family default
 are recalculated accordingly.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

If edited triple is of Dose,  Duration, and Volume  |
\backslash
label{line:first_if}|
\end_layout

\begin_layout Plain Layout

  Drug = Dose*Duration
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/Volume |
\backslash
label{line:concentrationByDrugAndVolume1}|
\end_layout

\begin_layout Plain Layout

  Rate = Volume/Duration
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Drug, Dose, and Rate
\end_layout

\begin_layout Plain Layout

  Duration = Drug/Dose
\end_layout

\begin_layout Plain Layout

  Volume = Duration*Rate 
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/Volume |
\backslash
label{line:concentrationByDrugAndVolume2}|
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Concentration,  Volume, and Duration
\end_layout

\begin_layout Plain Layout

  Drug = Volume*Concentration
\end_layout

\begin_layout Plain Layout

  Rate = Volume/Duration 
\end_layout

\begin_layout Plain Layout

  Dose = Drug/Duration
\end_layout

\begin_layout Plain Layout

End If
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Centerlized-Calculation-1-3-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Drug Administration Calculation.
\end_layout

\end_inset

Drug Administration Calculation.
 The code shows how to calculate the values of the fields based on different
 combinations of three input fields.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Even this simple 
\family typewriter
Drug Administration
\family default
 application illustrates cognitive overload in development and user experience.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The problems are more familiar as Development Experience (DX) and User Experienc
e (UX) 
\begin_inset CommandInset citation
LatexCommand cite
key "gualtieri2009best"
literal "false"

\end_inset

.
 cognitive overload in development (DX) refers to the mental effort required
 by developers to understand, design, and implement the application.
 cognitive overload in use (UX) refers to the mental effort required by
 users to interact with and understand the application.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Even this simple 
\family typewriter
Drug Administration
\family default
 application illustrates two typical problems: Development Experience (DX)
 and User Experience (UX).
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
UX and DX are terms used to describe the ease or difficulty of using or
 developing an application, respectively 
\begin_inset CommandInset citation
LatexCommand cite
key "gualtieri2009best"
literal "false"

\end_inset

.
 We specifically focus on the aspect of cognitive overload within these
 experiences.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Cognitive Overload in Development Experience
\end_layout

\begin_layout Standard
In the various scenarios within the 
\family typewriter
Calculate
\family default
 procedure, there are overlapping calculations.
 For example, both 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume1}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume2}
\end_layout

\end_inset

 calculate 
\family typewriter
Concentration
\family default
 based on 
\family typewriter
Drug
\family default
 and 
\family typewriter
Volume
\family default
.
 The order of calculations differs in each scenario, which hinders reusability
 and leads to code repetition.
\end_layout

\begin_layout Standard
The problem worsens as the application expands and new features are added
 to meet customer requirements.
 For example, suppose we need to add an 
\family typewriter
Alert
\family default
 field that indicates whether to trigger an alert for unusual drug quantities.
 This means that every time the 
\family typewriter
Drug
\family default
 value is updated, the 
\family typewriter
Alert
\family default
 must also be updated.
 In the current implementation, this requires adding the 
\family typewriter
Alert
\family default
 update logic five times, according to the five different ways in which
 the value of 
\family typewriter
Drug
\family default
 is determined, as follows.
\end_layout

\begin_layout Itemize
The 
\family typewriter
Drug
\family default
 value can be entered directly.
\end_layout

\begin_layout Itemize
If the user enters 
\family typewriter
Volume
\family default
 and Concentration, the value of 
\family typewriter
Drug
\family default
 should be computed from these values.
\end_layout

\begin_layout Itemize
The 
\family typewriter
Volume
\family default
 value might be computed if the user enters 
\family typewriter
Duration
\family default
 and 
\family typewriter
Dose
\family default
.
 In this case, 
\family typewriter
Duration
\family default
 and 
\family typewriter
Rate
\family default
 are used to determine the Volume, which is then used along with the entered
 
\family typewriter
Concentration
\family default
 to compute 
\family typewriter
Drug
\family default
.
\end_layout

\begin_layout Itemize
If the user enters 
\family typewriter
Dose
\family default
 and 
\family typewriter
Duration
\family default
, the 
\family typewriter
Drug
\family default
 value is computed from these values.
\end_layout

\begin_layout Itemize
If 
\family typewriter
Volume
\family default
, 
\family typewriter
Rate
\family default
, and 
\family typewriter
Dose
\family default
 are entered, then 
\family typewriter
Volume
\family default
 and 
\family typewriter
Rate
\family default
 are used to determine the value for 
\family typewriter
Duration
\family default
, which is then used with 
\family typewriter
Dose
\family default
 to determine a value for 
\family typewriter
Drug
\family default
.
\end_layout

\begin_layout Standard
Even in a small application, when a single feature addition necessitates
 code duplication in five different locations, managing such additions in
 larger applications can become highly challenging.
 Locating, updating, and testing all instances of the relevant code is time-cons
uming and resource-intensive.
 This ultimately leads to a significant slowdown in the delivery of new
 features to customers and hinders the ability to adapt the software quickly
 to their evolving needs.
\end_layout

\begin_layout Subsection
Cognitive Overload in User Experience
\end_layout

\begin_layout Standard
The user interface as well suffers from problems as a result of the procedural
 design.
 
\end_layout

\begin_layout Standard
In addition to the six numeric fields, there is an additional field in the
 application called 
\family typewriter
ordering style
\family default
 which has several options to choose from.
 One option is 
\family typewriter
set concentration and volume
\family default
, another option is 
\family typewriter
set dose and rate
\family default
, and there are also additional options.
 Depending on the option selected, certain fields may be enabled for editing
 or read-only, which affects the order of calculations.
 If the user selects 
\family typewriter
set concentration and volume
\family default
, those fields become editable, and the other fields will be calculated
 accordingly.
 If the user selects 
\family typewriter
set dose and rate
\family default
, those fields become editable, and the other fields will be calculated
 accordingly.
 
\end_layout

\begin_layout Standard
In addition to the 
\family typewriter
ordering style
\family default
 field, an additional element, 
\emph on
locker
\emph default
, has been added next to each of the six numeric fields.
 The lockers are used to lock or unlock fields.
 Locking a field means that its value will be calculated based on the values
 of other fields, while unlocking a field allows it to be edited.
 The lockers function like toggle buttons; each click changes the previous
 state – a locked field becomes unlocked, and vice versa.
 Of the six fields, three must be editable by the user, and the others should
 be calculated.
 Therefore, unlocking one field causes another to be locked in its place.
 Selecting the 
\family typewriter
ordering style
\family default
 determines the initial state of the lockers: for each field, whether it
 is locked or unlocked.
 Fields that are editable according to the selected 
\family typewriter
ordering style
\family default
 cannot be locked.
 For example, if the 
\family typewriter
ordering style
\family default
 is set to 
\family typewriter
set concentration and volume
\family default
, then the concentration and volume fields will be unlocked and cannot be
 locked.
\end_layout

\begin_layout Standard
The functionality of 
\family typewriter
ordering style
\family default
 and the lockers are not concepts from the problem space and the professional
 world of the users, but rather concepts from the solution space as part
 of the application's design.
 Therefore, from the users' perspective, these are 
\begin_inset Quotes eld
\end_inset

unnecessary
\begin_inset Quotes erd
\end_inset

 fields that burden their use of the application.
 This problem is reminiscent of complaints heard among medical professionals
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "gawande2018doctors"
literal "false"

\end_inset

, who are forced to spend time on computers at the expense of time with
 patients.
\end_layout

\begin_layout Standard
In 
\family typewriter
MetaVision
\family default
, to ease the burden on users (who experience the aforementioned cognitive
 overload), an option to use 
\emph on
templates
\emph default
 was added.
 The templates contain pre-populated values and settings tailored to specific
 scenarios.
 However, this also burdens users, as it requires them to be familiar with
 the various templates and know how to choose the correct template for the
 right case.
 Apart from that, the drawback of templates is that they need to be prepared
 and maintained (when there are changes/extensions in the application, the
 old templates need to be addressed).
 And also in real-time, locating the correct template for the right case
 (
\emph on
navigations
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "roman2017navigation"
literal "false"

\end_inset

 in reminiscent of complaints).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
locker}[1]{
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

    % Draw the body of the lock
\end_layout

\begin_layout Plain Layout

    
\backslash
draw (0,0) rectangle (#1,#1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % Draw the shackle (the curved part of the lock)
\end_layout

\begin_layout Plain Layout

    
\backslash
draw (#1, #1) arc (0:180:#1/2);
\end_layout

\begin_layout Plain Layout

  
\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
openedlocker}[1]{
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

    % Draw the body of the lock
\end_layout

\begin_layout Plain Layout

    
\backslash
draw (0,0) rectangle (#1,#1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % Draw the shackle (the curved part of the lock)
\end_layout

\begin_layout Plain Layout

    
\backslash
draw (#1, #1) arc (0:130:#1/2);
\end_layout

\begin_layout Plain Layout

  
\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tabular}{|c c c| }  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
multicolumn{3}{ |l|}{ordering style }  
\backslash

\backslash
   
\end_layout

\begin_layout Plain Layout


\backslash
multicolumn{3}{ |l|}{
\backslash
framebox(130,15){set Dose and Rate {$
\backslash
nabla$}}}
\end_layout

\begin_layout Plain Layout

 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

Drug & Concentration & Volume 
\backslash

\backslash
   
\end_layout

\begin_layout Plain Layout


\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
locker{0.25}} & 
\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
locker{0.25}} & 
\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
locker{0.25}} 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

 Dose & Duration & Rate 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

 
\backslash
framebox(35,15){ } 
\backslash
framebox(10,15){
\backslash
locker{0.25}}& 
\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
locker{0.25}}& 
\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
openedlocker{0.25}} 
\backslash

\backslash
  
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout


\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Order-Entry-1-1-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Drug Administration - Full Version.
\end_layout

\end_inset

 At the top, there is the Ordering Style field, represented by a combobox,
 where users can select from the available options.
 Below this, each field consists of a label above its name, an area to display
 its value, and a lock icon on its right.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
State of the Art
\end_layout

\begin_layout Standard
To reduce cognitive overload, programming paradigms such as 
\emph on
Functional Reactive Programming
\begin_inset space ~
\end_inset

(FRP)
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 and 
\emph on
Object Oriented Programming
\begin_inset space ~
\end_inset

(OOP)
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "wegner1990concepts"
literal "false"

\end_inset

 can be utilized.
 These paradigms incorporate abstraction mechanisms to reduce cognitive
 load for the developer, which should in turn positively affect the cognitive
 load in the user experience of the resulting software.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The cognitive overload associated with developing such systems and the cognitive
 overload in their use can be reduced by developing in 
\emph on
Functional Reactive Programming (FRP)
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 and 
\emph on
Object Oriented Programming (OOP)
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "wegner1990concepts"
literal "false"

\end_inset

 paradigms, or a combination thereof.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The FRP paradigm provides an abstraction mechanism of a declarative approach
 to propagate changes.
 In FRP, dependencies are defined between variables, named 
\emph on
reactive variable
\begin_inset space ~
\end_inset


\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "schuster2016reactive"
literal "false"

\end_inset

 (in some variations, known also as 
\emph on
behavior
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push"
literal "false"

\end_inset

, 
\emph on
signal
\begin_inset space ~
\end_inset


\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "maier2010deprecating"
literal "false"

\end_inset

, 
\emph on
cell
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 and also
\emph on
 reactive value
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "drechsler2014distributed"
literal "false"

\end_inset

), so that changes are propagated automatically.
 For example
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Reactive-variables-basics-1-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), given two reactive variables 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, the formula 
\begin_inset Formula $A:=B+1$
\end_inset

 defines that 
\begin_inset Formula $B$
\end_inset

 depends on 
\begin_inset Formula $A$
\end_inset

.
 Later, when an input is provided to the 
\begin_inset Formula $B$
\end_inset

 variable by 
\begin_inset Formula $B=1$
\end_inset

 and then 
\begin_inset Formula $B=6$
\end_inset

, then 
\begin_inset Formula $A$
\end_inset

 is updated automatically such that 
\begin_inset Formula $A=2$
\end_inset

 and then 
\begin_inset Formula $A=7$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{minipage}{0.4
\backslash
textwidth}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

A:=B+1
\end_layout

\begin_layout Plain Layout

B=1 // causes A=2
\end_layout

\begin_layout Plain Layout

B=6 // causes A=7
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{minipage}
\end_layout

\begin_layout Plain Layout


\backslash
hspace{3cm}
\end_layout

\begin_layout Plain Layout


\backslash
begin{minipage}{0.4
\backslash
textwidth}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, circle] (B) at (0,0) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, circle] (A) at (-2,0) {A};
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (A) -- node[above] {} (B);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{minipage}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Reactive-variables-basics-1-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Reactive variables example.
\end_layout

\end_inset

Reactive variables example.
 The 
\begin_inset Formula $\LSTINLINE{:=}$
\end_inset

 operation establishes a data dependency, depicted by the graph from 
\begin_inset Formula $\LSTINLINE A$
\end_inset

 to 
\begin_inset Formula $\LSTINLINE B$
\end_inset

.
 Consequently, the subsequent 
\begin_inset Formula $\LSTINLINE=$
\end_inset

 operations of assigning values to 
\begin_inset Formula $\LSTINLINE B$
\end_inset

 cause corresponding changes to
\begin_inset space ~
\end_inset


\begin_inset Formula $\LSTINLINE A$
\end_inset

.
\begin_inset Note Note
status open

\begin_layout Plain Layout
This is an example of using reactive variables, where the value of variable
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 depends on the value of variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B}
\end_layout

\end_inset

.
 (We choose to represent the dependancy from the derived variable to the
 variable it is derived from, to be consistent with derived class that in
 uml the dependencay is illustrated from the derived class to the subclass.
 The direction presents that change causes the dependancy to change, and
 not the direction of the data flow.) Whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B}
\end_layout

\end_inset

 is updated, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 is automatically updated accordingly.
 The formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+1}
\end_layout

\end_inset

 associates the variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 with the expression 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B+1}
\end_layout

\end_inset

, which means that the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 changes in response to any changes in the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The OOP paradigm provides an abstraction mechanism to reduce code duplication
 through inheritance and polymorphism with classes and objects.
 This paradigm utilizes design patterns for event management to trigger
 code that updates a variable (or a set of variables) in response to the
 update of another variable (or set of variables), in a way that decouples
 the code updating the variable from the code triggered in response to the
 update.
\end_layout

\begin_layout Standard
Some works combine the FRP and OOP paradigms.
 One approach is implemented by the 
\family typewriter
ReactiveX
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://reactivex.io/
\end_layout

\end_inset


\end_layout

\end_inset

 library.
 In this approach, a type of variable is created that represents a reactive
 variable in OOP and has methods that create syntax similar to formulas
 in FRP.
 For example, in the expression 
\begin_inset Formula $\LSTINLINE{A=B.map(x=>x+1)}$
\end_inset

, a map function is applied, which produces a reactive variable that will
 be assigned to A.
 The map method triggers the registration of a value change event for reactive
 variable 
\begin_inset Formula $\LSTINLINE B$
\end_inset

, which will activate a value change of the new reactive variable by applying
 the function 
\begin_inset Formula $\LSTINLINE{x=>x+1}$
\end_inset

 to the value of 
\begin_inset Formula $\LSTINLINE B$
\end_inset

.
 This results in the expression having a meaning similar to the formula
 
\begin_inset Formula $\LSTINLINE{A:=B+1}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The FRP promotes a declerative approach for change propagation.
 In FRP we declare dependencies between variables named 
\emph on
reactive variable
\begin_inset space ~
\end_inset


\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "schuster2016reactive"
literal "false"

\end_inset

 (in some variations, known also as 
\emph on
behavior
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push"
literal "false"

\end_inset

, 
\emph on
signal
\begin_inset space ~
\end_inset


\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "maier2010deprecating"
literal "false"

\end_inset

, 
\emph on
cell
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 and also
\emph on
 reactive value
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "drechsler2014distributed"
literal "false"

\end_inset

) that are recaluclated in response and according to to dependant variables’
 updates, similar to cells containing formulas in 
\family typewriter
Spreadsheet
\family default
 applications.
 The variables can get input (
\begin_inset Formula $=$
\end_inset

 operator) or be assigned 
\begin_inset Formula $(:=$
\end_inset

 operator) with an expression consisting of a set of other reactive variables.
 The assigment defines that the value of the variable is set to the value
 of the expression, and continuously re-evaluated in response to changes
 in the value of any of the variables appearing in the expression.
 For example
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Reactive-variables-basics-1-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), given two reactive variables 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, the formula 
\begin_inset Formula $A:=B+1$
\end_inset

 associates the variable 
\begin_inset Formula $A$
\end_inset

 with the expression 
\begin_inset Formula $B+1$
\end_inset

, and the value of 
\begin_inset Formula $A$
\end_inset

 changes in response to any input provided to the value of 
\begin_inset Formula $B$
\end_inset

.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The problem and known solutions of change propagation are reflected in libraries
 and software infrastructures for application development.
 One of the popular libraries is 
\family typewriter
React
\family default
.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://react.dev/
\end_layout

\end_inset


\end_layout

\end_inset

 In this library, the term 
\emph on
state
\emph default
 is similar to variables and is managed by a specific API or with the help
 of dedicated libraries.
 The graphical user interface is defined declaratively and updated automatically
 according to changes in the state.
\end_layout

\begin_layout Section
Limitations
\end_layout

\begin_layout Standard
While the OOP and FRP paradigms offer abstraction mechanisms that avoid
 the duplication problems inherent in the procedural paradigm, they have
 limitations: a central problem relevant to complex systems is how to implement
 the propagation mechanism so that each object manages its own state, rather
 than having the state managed by a central component.
\end_layout

\begin_layout Subsection
FRP Limitations
\end_layout

\begin_layout Standard
In the FRP programming paradigm, the correctness of change propagation relies
 on the dependency graph being acyclic
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey,margara2018semantics"
literal "false"

\end_inset

.
 The implication of a cycle is that changing the value of a particular variable
 triggers a chain of changes in the values of other variables, which in
 turn triggers a change in the value of the first variable, and so on.
 Since defining cycles is prohibited, it is not always possible to define
 a specific variable as dependent on other variables.
 The main issue is that checking for cycles requires a centralized approach
 to dependency management.
\end_layout

\begin_layout Subsection
OOP Limitations
\end_layout

\begin_layout Standard
In the OOP programming paradigm, while the event mechanism allows for independen
ce between the code that updates a variable and the code triggered in response
 to the update, sometimes code components share common variables.
 These components also pass information between themselves (through arguments).
 Such sharing often leads to coupling.
\end_layout

\begin_layout Standard
Reactive systems in the OOP paradigm sometimes resemble real-world systems
 called 
\emph on
complex systems
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Complex_system
\end_layout

\end_inset


\end_layout

\end_inset

.
 In these systems, it is difficult to find out the behavior of each of their
 components because the components have a mutual influence on each other.
 But especially, the system is unpredictable due to the phenomenon of feedback
 loops.
 Feedback occurs when an influence on a particular component triggers a
 chain where each component affects the next until the last component in
 the chain affects the first component, causing the chain to start again.
 This phenomenon is evident in the values of the variables of the components.
 Changing the value of a particular variable triggers a chain of changes
 in the values of other variables, which in turn triggers a change in the
 value of the first variable, and so on.
\end_layout

\begin_layout Standard
In OOP, this problem is known as the 
\emph on
object reentrance
\emph default
 problem, which occurs when an object's method is called while its state
 is inconsistent.
 This situation can arise when another method of the same object has already
 started modifying the state but has not yet completed its operation.
 The problem can occur when a method of one object calls a method of another
 object, without being aware that the second method, directly or indirectly,
 will trigger another method of the first object before the first method
 has had a chance to complete its operation and update the state consistently.
\end_layout

\begin_layout Standard
Just as feedback loops make it difficult to isolate the behavior of each
 component, the object reentrance problem in OOP creates difficulties in
 designing interfaces.
 An interface is similar to a contract between the object's creator and
 its user.
 Similarly, in implementation inheritance, there is a contract (specialization
 interface) between a superclass and a subclass.
 This difficulty indicates a problem in applying OOP principles to implement
 change propagation.
 This difficulty brings us back to the question of how to implement the
 propagation mechanism so that each object manages its own state, rather
 than having the state managed by a central component.
\end_layout

\begin_layout Section
Thesis's Approach in a Nutshell
\end_layout

\begin_layout Standard
This thesis presents a novel approach: combining an OOP instance variable
 with an FRP reactive variable to define a new variable type: 
\emph on
Reactive Instance Variable
\begin_inset space ~
\end_inset

(RIVar)
\emph default
.
 This type of variable possesses the characteristics of a reactive variable,
 in that it is used declaratively.
 However, unlike a regular reactive variable, it has an association with
 an object and a class.
 
\end_layout

\begin_layout Standard
Consequently, methods in OOP (typically constructors) can include formulas
 similar to those in FRP, but with the possibility that the left-hand variable
 of the formula belongs to a different object or class.
 This type of variable has an operation named 
\emph on
reactive assignment
\emph default
 with a meaning similar to the assignment sign
\begin_inset space ~
\end_inset

(
\begin_inset Formula $:=$
\end_inset

) in FRP.
 A variable from this type is exposed to other classes and objects, to be
 
\emph on
reactively assigned
\emph default
 in their operations.
 The following paragraph describes a 
\family typewriter
Drug Administration
\family default
 implementation according to this approach.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
A reactive assignment operation is defined for this variable type, with
 a meaning similar to that of the assignment symbol in FRP.
 This variable type is exposed to other classes and objects, so reactive
 assignments can be made to it.
\end_layout

\begin_layout Plain Layout
This thesis presents an approach where methods in OOP (typically constructors)
 can include formulas similar to those in FRP, but with the possibility
 that the left-hand variable of the formula belongs to a different object
 or class.
 This type of variable has an operation named 
\emph on
reactive assignment
\emph default
 with a meaning similar to the assignment sign
\begin_inset space ~
\end_inset

(
\begin_inset Formula $:=$
\end_inset

) in FRP.
 A variable from this type is exposed to other classes and objects, to be
 
\emph on
reactively assigned
\emph default
 in their operations.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As depicted in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-1-2-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, a class 
\family typewriter
Bag
\family default
 represents a bag with fields 
\family typewriter
Drug
\family default
, 
\family typewriter
Volume
\family default
 and 
\family typewriter
Concentration
\family default
.
 a class 
\family typewriter
Pump
\family default
 represents a 
\family typewriter
Pump
\family default
 that is connected to a patient's body to infuse a bag.
 
\family typewriter
Pump
\family default
 contains a field 
\family typewriter
TheBag
\family default
 referencing to an instance of a 
\family typewriter
Bag
\family default
.
 In addition, 
\family typewriter
Pump
\family default
 contains fields 
\family typewriter
Dose
\family default
, 
\family typewriter
Rate
\family default
 and 
\family typewriter
Duration
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale=0.8]%[show  background  grid]
\end_layout

\begin_layout Plain Layout


\backslash
begin{interface}{IBag}{0,-5}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Drug}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Volume}
\end_layout

\begin_layout Plain Layout


\backslash
end{interface}
\end_layout

\begin_layout Plain Layout


\backslash
begin{class}{Pump}{-10,-5}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Duration}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Dose}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Rate}
\end_layout

\begin_layout Plain Layout


\backslash
end{class}
\end_layout

\begin_layout Plain Layout


\backslash
composition{Pump}{TheBag}{}{IBag}
\end_layout

\begin_layout Plain Layout


\backslash
begin{class}{Bag}{0,-10}
\end_layout

\begin_layout Plain Layout


\backslash
implement {IBag}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Concentration }
\end_layout

\begin_layout Plain Layout


\backslash
end{class}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-Administration-UML-1-2-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Drug Administration Class Diagram.
\end_layout

\end_inset

Drug Administration Class Diagram.
 Illustrating the access relationships between the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 classes.
 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 can perform calculations involving 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Concentration}$
\end_inset

 variables.
 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 can perform calculations involving its variables: 
\begin_inset Formula $\LSTINLINE{Dose}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Rate}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Duration}$
\end_inset

, as well as the 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

 variables of the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 instance.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then, reactive assignments are declared as depicted in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:PumpCode-1-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The 
\family typewriter
Bag
\family default
 class contains (implemented by executing in the constructor) 
\begin_inset Formula $\LSTINLINE{Volume:=Concentration*Drug}$
\end_inset

 such that 
\family typewriter
Volume
\family default
 will be recalculated depending on 
\family typewriter
Concentration
\family default
 and 
\family typewriter
Drug
\family default
.
 Likewise, class 
\family typewriter
Pump
\family default
 contains 
\begin_inset Formula $\LSTINLINE{Duration:=Rate*Volume}$
\end_inset

 and also 
\begin_inset Formula $\LSTINLINE{TheBag.Drug:=Dose*Du}$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
-
\end_layout

\end_inset


\begin_inset Formula $\LSTINLINE{ration}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class Bag
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  Variable Drug, Volume, Concentration |
\backslash
label{line:PumpCode_RIVars1}|
\end_layout

\begin_layout Plain Layout

  Volume:=Concentration*Drug |
\backslash
label{line:PumpCode_formula3}|
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

class Pump
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  Variable TheBag|
\backslash
label{line:PumpCode_TheBag}|
\end_layout

\begin_layout Plain Layout

  Variable Duration, Dose, Rate|
\backslash
label{line:PumpCode_RIVars2}|
\end_layout

\begin_layout Plain Layout

  TheBag.Drug:=Dose*Duration  |
\backslash
label{line:PumpCode_formula}|
\end_layout

\begin_layout Plain Layout

  Duration:=Rate*Volume |
\backslash
label{line:PumpCode_formula2}|
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:PumpCode-1-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Pseudo code of classes 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset


\end_layout

\end_inset

Pseudocode of the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 Classes.
 Variables are declared in
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cref{line:PumpCode_RIVars1,line:PumpCode_RIVars2}
\end_layout

\end_inset

.
 Reactive assignments are presented in
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cref{line:PumpCode_formula,line:PumpCode_formula2,line:PumpCode_formula3}
\end_layout

\end_inset

 (actualy, it should incorporate them into the constructors of the classes).
 The reactive assignments involves the variables declared in
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cref{line:PumpCode_RIVars1,line:PumpCode_RIVars2}
\end_layout

\end_inset

.
 In 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

, the reactive assignments involve variables of the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 instance, which is declared in
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cref{line:PumpCode_TheBag}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This approach reintroduces the cycles question, as it allows cycles 
\emph on
by design
\emph default
.
 For example, in the implementation of 
\family typewriter
Drug Administration
\family default
, a cycle is created that includes the nodes 
\family typewriter
Duration
\family default
, 
\family typewriter
Volume
\family default
, and 
\family typewriter
Drug
\family default
 (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:cycleByComponents-2-2"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 A naive implementation of variable propagation leads to an infinite loop.
 However, even a single redundant update can be problematic because it might
 accidentally overwrite a previous value.
 For example, as illustrated in
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Unpredictable-Calculation-3-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, 
\family typewriter
Concentration
\family default
 is updated with the rounded value 0.33, which is calculated from 100/300.
 This causes the recalculation for 
\family typewriter
Drug
\family default
 to be 0.33 * 300, which produces 99 and overwrites the original value of
 100.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{tikzpicture}[node distance=3cm, 
\end_layout

\begin_layout Plain Layout

                      ByPumpEdge/.style={draw=black,<-},
\end_layout

\begin_layout Plain Layout

                      ByBagEdge/.style={draw=black,<-, dashed},
\end_layout

\begin_layout Plain Layout

                      >=latex]
\end_layout

\begin_layout Plain Layout

    % Nodes
\end_layout

\begin_layout Plain Layout

    
\backslash
node (concentration) [circle, draw] at (0,0) {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (concentration.south) {concentration};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (volume) [circle, draw, below left of=concentration] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (volume.south) {volume};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (drug) [circle, draw, below right of=concentration] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (drug.south) {drug};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (dose) [circle, draw, below of=drug] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (dose.south) {dose};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (rate) [circle, draw, below of=volume] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (rate.south) {rate};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (duration) [circle, draw, below right of=rate] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (duration.south) {duration};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % Edges
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (rate) -- (duration);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (volume) -- (duration);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (duration) -- (drug);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (dose) -- (drug);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByBagEdge] (concentration) -- (volume);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByBagEdge] (drug) -- (volume);
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cycleByComponents-2-2"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Mutual Recursion from Combined Dependency Graphs of 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 Instances.
\end_layout

\end_inset

Mutual Recursion from Combined Dependency Graphs of 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 Instances.
 The solid edges denote dependencies initiated within the 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 instance, while dotted edges indicate dependencies initiated within the
 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 instance.
 In the graph created, the nodes 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Duration}$
\end_inset

 are interconnected through the edges, representing the mutual recursion.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{UI}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{Pump}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Bag}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Duration=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Drug=100}{Bag}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Dose=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}      
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{VolumeOfFluid=300}{Bag}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Concentration=0.33}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Drug=99}{Bag}{}  
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Rate=30}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}        
\end_layout

\begin_layout Plain Layout


\backslash
end{call}   
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Unpredictable-Calculation-3-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Unexpected Feedback Loop: Unintended Override of User Input
\end_layout

\end_inset

Sequence diagram illustrating the interactions between the User Interface
\begin_inset space ~
\end_inset

(UI), 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 objects.
 Initially, the UI sets the value of 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

 to 100.
 However, due to the complex interactions and dependencies between the objects,
 the 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

 value undergoes modifications and eventually gets updated to 99.
 This unintended alteration exemplifies the challenge posed by feedback
 loops, which can result unintended override of user input.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Contribution
\end_layout

\begin_layout Standard
The thesis makes the following contribution:
\end_layout

\begin_layout Itemize
A programming approach of reactive instance variable.
\end_layout

\begin_layout Itemize
An implementation strategy for managing propagation changes that addresses
 the cycles question.
\end_layout

\begin_layout Standard
The contribution is evaluated by:
\end_layout

\begin_layout Itemize
Implementing extensions to the 
\family typewriter
C#
\family default
 and 
\family typewriter
JavaScript
\family default
 programming languages according to the approach.
 
\end_layout

\begin_layout Itemize
Implementing a 
\family typewriter
Drug Administration
\family default
 application using both language extensions and diverse GUI frameworks (
\family typewriter
WinForms
\family default
, 
\family typewriter
HTML
\family default
, and 
\family typewriter
React
\family default
).
 
\end_layout

\begin_layout Itemize
Comparing the code efficiency of different 
\family typewriter
Drug Administration
\family default
 application implementations: one using event-driven programming, one using
 
\family typewriter
Excel
\family default
 (that represents programming with reactive variables), and one using the
 new approach.
\end_layout

\begin_layout Itemize
Comparing the new approach with programming with reactive variables in the
 context of application evolution.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
..
\end_layout

\begin_layout Itemize

\series bold
Feasibility
\series default
: The proposed approach is implemented as extensions to the 
\family typewriter
C#
\family default
 and 
\family typewriter
JavaScript
\family default
 programming languages, demonstrating its feasibility and adaptability across
 different technologies.
 This includes the development of a 
\family typewriter
Drug Administration
\family default
 application using both language extensions and diverse GUI frameworks (
\family typewriter
WinForms
\family default
, 
\family typewriter
HTML
\family default
, and 
\family typewriter
React
\family default
).
 
\end_layout

\begin_layout Itemize

\series bold
Comparative analysis
\series default
: Code efficiency is compared across implementations of a 
\family typewriter
Drug Administration
\family default
 application: one implemented using event-driven programming, one using
 reactive variables (with 
\family typewriter
Excel
\family default
), and one using the new approach (with the proposed extensions).
 
\end_layout

\begin_layout Itemize

\series bold
Case study
\series default
: A case study compares the use of reactive variables with the new approach
 within the context of application evolution, 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We present 
\emph on
Reactive Instance Variable
\family typewriter
\emph default

\begin_inset space ~
\end_inset

(
\family default
RIVar).
 RIVar is a combination of reactive variable from 
\emph on
Functional Reactive Programming 
\emph default
(FRP) 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

 with 
\emph on
instance variable
\emph default
 from 
\emph on
Object-Oriented Programming
\begin_inset space ~
\end_inset


\emph default
(OOP)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "wegner1990concepts"
literal "false"

\end_inset

.
 Therefrom, our contribution includes:
\end_layout

\begin_layout Itemize
A novel approach combining FRP with OOP.
\end_layout

\begin_layout Itemize
New semantics for handling cycles and apparent conflicts emerged from adapting
 the encapsulation principle of OOP.
\end_layout

\begin_layout Itemize
A library implementation of our approach.
 For 
\begin_inset Formula $\LSTINLINE{C\#}$
\end_inset

 programming language, we create a 
\family typewriter
nuget
\family default
 package called 
\begin_inset Formula $\NAME{RIVarX}$
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.nuget.org/packages/RIvar.RIvarX
\end_layout

\end_inset


\end_layout

\end_inset

 For 
\begin_inset Formula $\NAME{JavaScript}$
\end_inset

 programming language, we create a 
\family typewriter
npm
\family default
 package called 
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.npmjs.com/package/rivarjs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A case study from the healthcare domain to illustrate the practical application
 of the presented principals.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Our contribution is in introducing a concept 
\begin_inset Formula $\RIVar$
\end_inset

.
 This name refers to 
\family typewriter
Reactive Instance
\family default
 
\family typewriter
Variable
\family default
, a combination of 
\family typewriter
reactive variable
\family default
 with 
\family typewriter
instance variable
\family default
 (i.e., field associated with an object).
\end_layout

\begin_layout Plain Layout
Upon 
\begin_inset Formula $\RIVar$
\end_inset

, we implement libraries available in 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/RIVarX
\end_layout

\end_inset

.
 For 
\begin_inset Formula $\LSTINLINE{C\#}$
\end_inset

 programming language, we create a 
\family typewriter
nuget
\family default
 package called 
\begin_inset Formula $\NAME{RIVarX}$
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.nuget.org/packages/RIvar.RIvarX
\end_layout

\end_inset


\end_layout

\end_inset

 For 
\begin_inset Formula $\NAME{JavaScript}$
\end_inset

 programming language, we create a 
\family typewriter
npm
\family default
 package called 
\begin_inset Formula $\NAME{rivarjs}$
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.npmjs.com/package/rivarjs
\end_layout

\end_inset


\end_layout

\end_inset

 In both, we created a class named 
\begin_inset Formula $\RIVar$
\end_inset

 with a method named 
\family typewriter
Set
\family default
, that represents the new assignment operation.
 We also created an extension method named 
\family typewriter
Lift
\family default
, for creating the expressions.
\end_layout

\begin_layout Plain Layout
The frameworks have been integrated with UI frameworks.
 Conceptually, 
\begin_inset Formula $\RIVar$
\end_inset

 consists of observable streams facilitating binding with the UI.
 When a UI change event occurs, it adds an event to the variable stream.
 Conversely, when a new event appears in the stream, it triggers a corresponding
 change in the UI.
 Additionaly, for an integration with 
\begin_inset Formula $\NAME{React}$
\end_inset

, we created a component, 
\family typewriter
RIVarView,
\family default
 that seamlessly integrates 
\begin_inset Formula $\RIVar$
\end_inset

 with 
\begin_inset Formula $\NAME{React}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Outline.
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Background"
plural "false"
caps "true"
noprefix "false"

\end_inset

 presents the challenge of preserving data consistency and currency in the
 context of OOP.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Approach"
plural "false"
caps "true"
noprefix "false"

\end_inset

 explores the approach of reactive instance variables in detail.
 An implementation strategy for managing propagation changes is presented
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Implementation-Strategy"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Implementation"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we detail the implementations of extensions to the 
\family typewriter
C#
\family default
 and 
\family typewriter
JavaScript
\family default
 programming languages.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Evaluation"
plural "false"
caps "true"
noprefix "false"

\end_inset

 presents several evaluation processes, including a comparative analysis
 of the code efficiency of different implementations for 
\family typewriter
Drug Administration
\family default
.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Related-Work"
plural "false"
caps "true"
noprefix "false"

\end_inset

 provides a critical review of related work, demonstrating the unique aspects
 of our approach.
 Finally, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Conclusion"
plural "false"
caps "true"
noprefix "false"

\end_inset

 concludes this work with a summary of the research and a discussion of
 future research directions.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
–
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Background"
plural "false"
caps "true"
noprefix "false"

\end_inset

 presents the challenge of preserving data consistency and currency in the
 context of OOP.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Approach"
plural "false"
caps "true"
noprefix "false"

\end_inset

 provides an in-depth presentation of the approach of reactive instance
 variables.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Implementation-Strategy"
plural "false"
caps "true"
noprefix "false"

\end_inset

 presents the implementation strategy for managing propagation changes.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Implementation"
plural "false"
caps "true"
noprefix "false"

\end_inset

 presents the implementations of extensions to the 
\family typewriter
C#
\family default
 and 
\family typewriter
JavaScript
\family default
 programming languages.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Evaluation"
plural "false"
caps "true"
noprefix "false"

\end_inset

 presents several evaluation processes, including a comparative analysis
 of the code efficiency of different implementations for 
\family typewriter
Drug Administration
\family default
.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Related-Work"
plural "false"
caps "true"
noprefix "false"

\end_inset

 provides a critical review of related work, demonstrating the unique aspects
 of our approach.
 Finally, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Conclusion"
plural "false"
caps "true"
noprefix "false"

\end_inset

 concludes this work with a summary of the research and a discussion of
 future research directions.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Background"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we present the challenge of preserving data consistency and currency in
 the context of OOP.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Approach"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we explain the approach of reactive instance variable in detail.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Implementation-Strategy"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we present an implementation strategy to manage propogation change and
 cycles.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Implementation"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we present in detail the implementations of extensions to the 
\family typewriter
C#
\family default
 and 
\family typewriter
JavaScript
\family default
 programming languages.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Evaluation"
plural "false"
caps "true"
noprefix "false"

\end_inset

 we present several evaluation processes.
\end_layout

\begin_layout Plain Layout
a comparative analysis for the code efficienty of implementations for 
\family typewriter
Drug Administration
\family default
.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Related-Work"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we present related work to clarify the exact contribution of the current
 work.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Conclusion"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we summarize the work.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Background"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we provide some background in the context of GUI.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Approach"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we present the approach.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Evaluation"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we present a validation.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Related-Work"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we present related work.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Conclusion"
plural "false"
caps "true"
noprefix "false"

\end_inset

 summarizes our findings and discusses future work.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
