#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
The assignment operator 
\begin_inset CommandInset citation
LatexCommand cite
key "abelson1996structure"
literal "false"

\end_inset

 causes the target variable to depend on the assigned expression.
 This dependency includes three dependancy types: data dependency, control
 dependency and source code dependency.
 
\end_layout

\begin_layout Itemize
Data dependency: in a running application, a change in one variable requires
 a second variable to change.
\end_layout

\begin_layout Itemize
Control dependency: when a piece of code calls directly to another piece
 of code, then the second piece of code depends on the first piece of code.
 Because, depending on the first piece of code, the second piece of code
 
\emph on
will
\emph default
 or
\emph on
 will not 
\emph default
be executed.
 An assignment statement causes a control dependency, because the program
 is executed the code of the right side, and then flows to assign the result.
\end_layout

\begin_layout Itemize
Source code dependency 
\begin_inset CommandInset citation
LatexCommand citep
key "martin2018clean"
literal "false"

\end_inset

: when a change in one piece of code requires change in another piece of
 code, then the second piece of code depends on the first piece of code.
 
\end_layout

\begin_layout Standard
In reactive applications, when variables' values should be continuously
 re-evaluated with other variables' values, it is time consuming to do the
 updates, because it might be that there were no changes.
 Consequently, it is useful to use the 
\emph on
inversion of control
\emph default
 principal: 
\begin_inset Quotes eld
\end_inset

Don't call us, we'll call you
\begin_inset Quotes erd
\end_inset

.
 Variables' values are changed as a reaction to other variables' changes.
 
\end_layout

\begin_layout Standard
Inversion of control principal are used in implementations of 
\emph on
Functional Reactive Programming
\emph default
 (FRP) 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional,elliott2009push"
literal "false"

\end_inset

 libraries.
 Then developers can declare formulas that are 
\emph on
assignment-like statements
\emph default
.
 The formulas cause the variables' values be changed as a reaction to other
 variables' values' changes.
 In this thesis, we focus on inverting the 
\emph on
source code dependency
\emph default
 as well.
\end_layout

\begin_layout Standard
For the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout

Var:=Exp
\end_layout

\end_inset

, whenever Exp's value is changed then Var's value is changed.
 By the source code dependency inversion, 
\begin_inset ERT
status open

\begin_layout Plain Layout

Var
\end_layout

\end_inset

 is accessed by an interface, while the actual 
\begin_inset ERT
status open

\begin_layout Plain Layout

Var
\end_layout

\end_inset

 is encapsulated and managed independently.
 Specifically, objects can own logic which continously re-evaluating internal
 and external variables, by simple assignment-like statements
\emph on
.
\end_layout

\begin_layout Standard
Our approach integrates the FRP and OOP paradigms.
 We are not the first in the field 
\begin_inset CommandInset citation
LatexCommand cite
key "salvaneschi2014towards,boix2013object"
literal "false"

\end_inset

.
 However, with our focus on the source code dependencies inversion, we handle
 the main benefit of the OOP paradigm 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Contribution
\end_layout

\begin_layout Itemize
We propose RIvar, being consistent with both 
\emph on
instance variables
\emph default
 from OOP and 
\emph on
reactive variables
\emph default
 from FRP.
\end_layout

\begin_layout Itemize
We characterize the design space of existing algorithms for change propagation,
 motivating the need for new algorithms that better suit to the new setting.
\end_layout

\begin_layout Itemize
We present an algorithm for RIvars.
 
\end_layout

\begin_layout Itemize
We present a reduction from the new algorithm to one traditional algorithm.
\end_layout

\begin_layout Itemize
We discuss a small-scale case study to indicate design improvements enabled
 by the proposed abstraction.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{Outline.}
\end_layout

\end_inset

 Chapter 3 presents a motivation example, Chapter 4 presents the proposed
 semantics, Chapter 5 uses the new semantics by implementing the new type
 
\emph on
RIvar
\emph default
 for C# programming language.
 Chapter 6 evaluate the results by the help of a prototype application.
\end_layout

\end_body
\end_document
