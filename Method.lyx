#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Method"

\end_inset

Approach
\end_layout

\begin_layout Standard
The value that is fed back is derived from the same original event that
 triggered the previous value.
 This reminds the simultaneous events, detailed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Observable-Streams"
plural "false"
caps "true"
noprefix "false"

\end_inset

, that causes glitches.
 Therefore we demonstrate an order over the values, so that stale values
 will be ignored.
\end_layout

\begin_layout Standard
The order over the values depends on a sequential change events, that are
 the external inputs.
 Each value is derived from a set of events, so also from their time, or
 their locations in the order.
 As in the examples in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:timestamps"
plural "false"
caps "true"
noprefix "false"

\end_inset

, a value that is directly triggered by an event is mapped to its timestamp.
 A value that is derived from other values is mapped to a timestamps set
 resulted from the 
\begin_inset Formula $\LSTINLINE{union}$
\end_inset

 operation on the timestamps of the values it is derived from.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Variable + Source
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Timestamps Set
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X (external input)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Y (external input)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D (external input)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Z1 = X*Y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Z2 = X+D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
V = Z1+Z2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,2,3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:timestamps"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Mapping between values and sets of timestamps.
\end_layout

\end_inset

Mapping between values and sets of timestamps.
 The first three rows represent events that produce new values, followed
 by calculations based on those changes.
 When a value is calculated, a set is generated by taking the union of the
 input values' sets.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Subsequently, it is possible to compare each pair of values.
 As seen in the examples in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparing-Timestamps-Set-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, values that are mapped to greater timetsamps can still be stale.
 Because it might be a superset, which resulted from a feedback.
 Instead, a newer value must be one, that overrides the effects of a variable's
 previous value.
\end_layout

\begin_layout Standard
Subsequently, it is possible to compare each value tuple.
 As seen in the examples in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparing-Timestamps-Set-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, if the value is derived from newer events, it still can be a stale value.
 A newer value must be one, that overrides the effects of a variable's previous
 value.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operand 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Relation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operand 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{2}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1,2}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1,3}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1,2}
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Comparing-Timestamps-Set-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Comparing the order of the values, based on their set of timetsamps.
\end_layout

\end_inset

Comparing the order of the values, based on their set of timetsamps.
 Each line represents two values that are compared.
 The cells in the columns of the operands, contain the timestamps of the
 values, that are used in the comparison
\begin_inset Note Note
status open

\begin_layout Plain Layout
according to their timetsamps.
 Generally, a greater timestamp indicates a newer event, which means a "greater"
 value.
 However, a superset is considered "less than" a subset in this case, and
 this is a critical point to note.
 This is because the value is generated recursively and there is no timestamp
 indicating a stale value in the subset.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
..
\end_layout

\begin_layout Chapter
Old
\end_layout

\begin_layout Section
The Order Model
\end_layout

\begin_layout Plain Layout
The incoming values have an order that is derived from the UI change events.
 Each value is derived from a set of values that originates from these external
 events.
 Value that is calculated from 
\end_layout

\begin_layout Plain Layout
Any binary operator, as well as the assignment operator, can either block
 or pass incoming events based on a comparison procedure that takes into
 account the timestamps of the originating events.
\end_layout

\begin_layout Plain Layout
The procedure starts with the external input sequence being provided with
 an attached timestamp (an incremental natural number).
 Each generated value carries a set of the timestamps of the input events
 it was derived from (
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:timestamps"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 This is done by producing timestamps from the union operation on the timestamps
 of the values it was generated from.
 The comparison itself considers the events' sets, similar to the examples
 shown in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparing-Timestamps-Set-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (2,7) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (Plus) at (2,5) {+1}; 
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=diamond,draw=black] (Equal) at (2,3) {=};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (2,1) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge  (Plus);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (Plus) edge  (Equal);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (Equal) edge  (A);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Formula-Graph-2variables-1"

\end_inset

Formula 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B+1
\end_layout

\end_inset

 over reactive variables A and B
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{A}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{eq}{:=}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{B}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Exp}{B+1}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{B}{Subscribe}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{Subscribe}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{Subscribe}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evaluating-the-formula-1"

\end_inset

Evaluating the formula A:=B+1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{E}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{A}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{eq}{:=}{}  
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{B}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Exp}{B+1}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{E}{OnNext(2)}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{B}{OnNext(2)}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Exp}{OnNext(3)}{eq}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{OnNext(3)}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{A}{OnNext(3)}{E}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Propogation-on-the-1"

\end_inset

Propogation on the formula A:=B+1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Consistency
\end_layout

\begin_layout Plain Layout
The evaluation model dictates that any subsequent value, whether from calculatio
ns or external input, overrides the effects of a variable's previous value,
 which refers to the values in the updates caused by that value.
 This ensures that all variables remain consistent based on the latest specified
 values.
 However, if a defined formula relies on input variables that have not been
 updated to the same extent as the variable in question, the application
 will become inconsistent with the formula.
 Therefore, consistency is only guaranteed for formulas whose input variables
 contain the latest values.
\end_layout

\begin_layout Plain Layout
———–
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Basic-Interactions"

\end_inset

Change Propogation Model
\end_layout

\begin_layout Plain Layout
???????????
\end_layout

\begin_layout Plain Layout
In this way, variables can be defined in terms of each other, creating a
 cycle, where each node is subscribed to the next.
\end_layout

\begin_layout Plain Layout
The way to avoid the unexpected feedback loop, is by handling the simultaneous
 events (detailed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Change-Propogation"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 The value that is fed back is derived from the same original event that
 triggered the previous value.
 As a result, this and the previous value are simultaneous events.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The variable's stream is like the result of an operator over the streams.
\end_layout

\begin_layout Plain Layout
The Variables can subscribe to multiple assignments that are subscribed
 to several expressions.
\end_layout

\begin_layout Plain Layout
In addition, variables can be like an input variable, to get values by the
 operator 
\begin_inset Formula $\LSTINLINE =$
\end_inset

, which is like subscribing to one more observables stream.
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the new variant the variables and operators, including the assignment
 operator, are observable streams as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Observable-Streams"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 Therefore, the formulas create subscribtions which establish connections
 to the change propogation.
 For instance, the 
\begin_inset Formula $\LSTINLINE{A:=B+1}$
\end_inset

means that the operator 
\begin_inset Formula $\LSTINLINE +$
\end_inset

 observes 
\begin_inset Formula $\LSTINLINE B$
\end_inset

 and the operator 
\begin_inset Formula $\LSTINLINE{:=}$
\end_inset

observes the operator 
\begin_inset Formula $\LSTINLINE{+1}$
\end_inset

 (which means
\begin_inset Formula $\LSTINLINE{f(x)=x+1}$
\end_inset

).
\end_layout

\begin_layout Plain Layout
In the new variant of FRP, the variables and operators, including the assignment
 operator, are treated as observable streams (as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Observable-Streams"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 Subscriptions are created by observers to establish connections for change
 propagation.
 For instance, the expression 
\begin_inset Formula $\LSTINLINE{A:=B+1}$
\end_inset

 implies that the operator 
\begin_inset Formula $\LSTINLINE +$
\end_inset

 observes the variable 
\begin_inset Formula $\LSTINLINE B$
\end_inset

, and the assignment operator 
\begin_inset Formula $\LSTINLINE{:=}$
\end_inset

 observes the operator 
\begin_inset Formula $\LSTINLINE{+1}$
\end_inset

 (representing the function
\begin_inset Formula $\LSTINLINE{f(x)=x+1}$
\end_inset

).
 Observers create subscriptions to these observable streams to receive and
 react to changes in the emitted values.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
————
\end_layout

\begin_layout Plain Layout
Our approach introduces a new variant for FRP for calculations that objects
 will contain.
 As described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Motivation"
plural "false"
caps "true"
noprefix "false"

\end_inset

, a graph are composed from objects' internal calculations that involve
 shared variables.
 Consequently, the new variant need to satisfy constraints: first, to support
 multiple assignments into a single variable.
 Second, The objects internals should not be updated observed from outside
 by a madiator or a centeral mechanism, Instead, each variable is an observable
 stream, leading that each variable updates its depedant variables.
\end_layout

\begin_layout Plain Layout
the calculations that objects will contain establishes a depedancy graph.
\end_layout

\begin_layout Plain Layout
Our approach introduces a new variant for FRP for calculations that objects
 will contain (as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Motivation"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 The new variant should handle, for an application, the overral graph from
 the specified calculations.
\end_layout

\begin_layout Plain Layout
Our approach introduces a new variant for FRP for calculations that objects
 will contain (as defined in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Motivation"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 The new variant should handle for an application, the overral graph from
 the specified calculations.
 Additionaly, the objects internals should not be observed outside, or be
 accessed, also in runtime.
 This
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The fact the the calculations are associated internaly to objects means
 for the FRP variant, that in the propogation change, we avoid coupling
 to a madiator approach where each variable updates its dependencies
\end_layout

\begin_layout Plain Layout
This includes the propogation change nechanism that each variable updates
 its dependencies
\end_layout

\begin_layout Plain Layout
Avoid coupling to a specific architectural design with a bottleneck of another
 component that has access to the objects' internal state, we adopted a
 "no-mediator" approach where each variable updates its dependencies.
\end_layout

\begin_layout Plain Layout
Therefore, the
\end_layout

\begin_layout Plain Layout
The variables are observable streams,
\end_layout

\begin_layout Plain Layout
Therefore we inroduce a custom assignment operation
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Our approach incorporates an assignment operator, 
\begin_inset Formula $\LSTINLINE{:=}$
\end_inset

, which links a variable to be continually updated according to an expression,
 similar to traditional FRP implementations.
 However, unlike FRP, this does not replace or override previous assignments.
\end_layout

\begin_layout Plain Layout
This initiates the
\end_layout

\begin_layout Plain Layout
The dataflow in a situation of feedback loops can be descirbed as a graph.
 The edges represents the flow of the data
\end_layout

\begin_layout Plain Layout
We describe variables expressions and input as nodes.
\end_layout

\begin_layout Plain Layout
Considering feedback loops situations, we describe variables expressions
 and input nodes.
\end_layout

\begin_layout Plain Layout
describing the flow of the data
\end_layout

\begin_layout Plain Layout
the node for which there is the feedback depends on several expression,
 or an expression has an input that trigger a chain of updates which
\end_layout

\begin_layout Plain Layout
To address the feedback loops typicaly caused by the objects interactions,
 we introduce 
\begin_inset Formula $\RIVar$
\end_inset

, which stands for 
\series bold
Reactive Instance Variable
\series default
, as its instances are reactive variables that can be associated to objects.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{tikzpicture}[node distance=3cm, 
\end_layout

\begin_layout Plain Layout

                      ByPumpEdge/.style={draw=black,<-},
\end_layout

\begin_layout Plain Layout

                      ByBagEdge/.style={draw=black,<-, dashed},
\end_layout

\begin_layout Plain Layout

                      >=latex]
\end_layout

\begin_layout Plain Layout

    % Nodes
\end_layout

\begin_layout Plain Layout

    
\backslash
node (concentration) [circle, draw] at (0,0) {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (concentration.south) {concentration};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (volume) [circle, draw, below left of=concentration] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (volume.south) {volume};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (drug) [circle, draw, below right of=concentration] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (drug.south) {drug};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (dose) [circle, draw, below of=drug] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (dose.south) {dose};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (rate) [circle, draw, below of=volume] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (rate.south) {rate};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (duration) [circle, draw, below right of=rate] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (duration.south) {duration};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % Edges
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (rate) -- (duration);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (volume) -- (duration);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (duration) -- (drug);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (dose) -- (drug);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByBagEdge] (concentration) -- (volume);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByBagEdge] (drug) -- (volume);
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cycleByComponents-1"

\end_inset


\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Mutual recursion created in runtime from created dependency graphs within
 independent components.
\end_layout

\end_inset

 Mutual recursion created in runtime from created dependency graphs within
 Bag and Pump.
 The nodes Volume, Drug, and Duration that are interconnected through the
 edges represent the mutual recursion.
 The solid edges denote dependencies initiated within the Pump instance,
 while dotted edges indicate dependencies initiated within the Bag instance.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
delete:
\end_layout

\begin_layout Plain Layout
We address cycles created from mutual recursions, where reactive variables
 are defined in terms of each other.
 ???????
\end_layout

\begin_layout Plain Layout
One of the nodes must be connected to a node from outside of the cycle or
 to a
\end_layout

\begin_layout Plain Layout
As illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:cycle-to-multiple-assignment"
plural "false"
caps "true"
noprefix "false"

\end_inset

, there must be a node among the constituents of the cycle that depends
 on a node originating from outside the cycle or receives updates from external
 input.
 This node is connected to multiple sources, including the node that links
 it to the cycle and a node or input from outside the cycle.
\end_layout

\begin_layout Plain Layout
——-
\end_layout

\begin_layout Plain Layout
In our approach components can be interconnected, by fields
\end_layout

\begin_layout Plain Layout
We address the functionality to calculate fields based on other fields,
 by a framework that is based on OOP and FRP.
 The framework consists of objects that contain reactive variables.
 The ssignment operaotr 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{:=}
\end_layout

\end_inset

 establishes a data dependency like FRP to be continually updated according
 to an expression.
 However, unlike FRP, our approach allows multiple assignments to the same
 variable without replacing or overriding the previous assignment.
\end_layout

\begin_layout Plain Layout
Like OOP, we have objects inheritace and objects composition.
 In both cases, we can assign
\end_layout

\begin_layout Plain Layout
Each component defines its own private dependency graph according to its
 specified behavior.
 However, during runtime, the dependency graphs from the components are
 combined to form the overall dependency graph.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This thesis addresses the complex data dependencies that arise in component-base
d UI applications, particularly those involving mutual recursion.
 We utilize the frameworks of OOP and FRP.
 Subsequently, we define 
\begin_inset Formula $\RIVar$
\end_inset

, which stands for 
\series bold
Reactive Instance Variable
\series default
, to specify the data dependencies in a similar fashion to how reactive
 variables operate in FRP and how instance variables are accessed from outside
 of objects.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Change Propagation
\end_layout

\begin_layout Plain Layout
The objects internals should not be updated observed from outside by a madiator
 or a centeral mechanism, Instead, each variable is an observable stream,
 leading that each variable updates its depedant variables.
\end_layout

\begin_layout Plain Layout
The variables are independent objects that update each other directly, without
 any intermediaries involved.
 Each observable variable triggers its corresponding observer variable,
 which notifies its subscribers, and so on.
 This might lead to infinite loops caused by cycles or errors resulting
 from outdated values.
 Therefore, we establish a predictable order for updates and ensure that
 the observer doesn't process outdated events.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Stale Values
\end_layout

\begin_layout Plain Layout
Additionally, simultaneous events also occur in supporting cycles.
 As we explained, in a cycle, there should be a node that depends on an
 external input, in addition to its dependencies on nodes within the cycle.
 According to the principles we presented, the merge function should be
 applied, combining updates from both sources.
 Therefore, this particular node should be the first to receive an update
 caused by itself.
 It is expected that it should not propagate this stale update forward.
 This principle is further illustrated by an example in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:cycle-merge-produce-concurrent-events"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
The Framework
\end_layout

\begin_layout Plain Layout
Thanks to the new variant of FRP, we can introduce 
\begin_inset Formula $\RIVar$
\end_inset

, which is the name for reactive instance variables.
 Similar to reactive variables, they are automatically updated based on
 their dependencies.
 Similar to instance variables, they are part of the objects, and therefore
 services can make these variables available in their interfaces for their
 clients to use.
 Subclasses can also use the variables belonging to their superclass via
 the specialization interface 
\begin_inset CommandInset citation
LatexCommand cite
key "taivalsaari1996notion"
literal "false"

\end_inset

.
 This concept leads us to a new framework that extends the traditional OOP.
\end_layout

\begin_layout Plain Layout
With this new framework, developers can model domain business concepts that
 are connected to graphical user interfaces (GUIs).
 As illustrated in the drug administration example (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), real-world entities can be represented by objects, and their attributes
 can be represented by 
\begin_inset Formula $\RIVar$
\end_inset

s.
 As mentioned in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:PumpCode"
plural "false"
caps "true"
noprefix "false"

\end_inset

, objects' classes can contain assignments in their definitions to continuously
 calculate 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The assignments are part of the objects' internal behavior, which connects
 the public 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The values of the attributes are stored within observable streams, which
 serve as a lower-level representation off 
\begin_inset Formula $\RIVar$
\end_inset

s.
 The input streams can be connected to user interface change events, and
 output streams can trigger field updates that display the calculated values
 from the model.
\end_layout

\begin_layout Plain Layout
The framework empowers OOP framework with enhanced extensibility.
 The unique concept of assignments adding the source to the variable, and
 allowing assignments to be hidden, results in an "extend only" operator.
 This is particularly evident in the inheritance mechanism, where subclasses
 only extend their input stream by inheriting assignments assigned to their
 superclass's reactive instance variables.
 This approach avoids the "fragile base class" issue, where changes in the
 implementation or behavior of a superclass inadvertently affect the behavior
 of its subclasses, even if the subclasses were not intended to be modified.
 Similarly, objects can expose reactive instance variables, and in a composition
, the functionality of objects is only extended.
 Overall, the introduction of this assignment operator has the potential
 to develop software that is open to extensions and closed to modifications,
 aligning with the principles of the Open-Closed Principle (OCP).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We seperate the drug administration UI component into two distinct components:
 the pump and the bag.
 This enhances modularity and code reuse.
 The bag component encapsulates the drug, volume, and concentration fields,
 while the pump component incorporates an instance of the bag along with
 the dose, rate, and duration fields.
 This separation allows for the creation of different variants of the drug
 administration without duplicating the entire component.
 For instance, we can create two types of bags: one with concentration and
 one without.
 By duplicating only the bag, we minimize code redundancy, simplifying future
 changes.
 Otherwise, duplicating the entire component would necessitate making updates
 in multiple places whenever changes are required in the pump.
\end_layout

\begin_layout Plain Layout
The required behavior is similar to behavior produced by reactive variables.
 For example, "Concentration" field, which denotes the drug amount per unit
 volume, should be recalculated in response to changes in the values of
 "Amount" and "Volume".
 To maintain the specified design, each component must implement its own
 internal coherence behavior.
 For instance, within the pump component, we explicitly state that the amount
 of the bag should be recalculated based on the dose and duration values.
 Meanwhile, other specifications that are internally related to the bag
 component remain hidden, such as the concentration being recalculated in
 response to updates in the "Amount" and "Volume" fields.
\end_layout

\begin_layout Plain Layout
By specifying behavior similar to reactive variables, we establish a dependency
 graph.
 For instance, when we specify that the Volume field should update based
 on "concentration" and "drug", we create a dependency where the volume
 depends on the "concentration" and "drug".
 Similary, the pump exhibits a behavior where the duration depends on the
 volume, and the bag's drug depends on the duration.
 Each component defines its own private dependency graph according to its
 specified behavior.
 However, during runtime, the dependency graphs from the components are
 combined to form the overall dependency graph.
\end_layout

\begin_layout Plain Layout
This graph contains a cycle through the nodes duration, volume and drug
 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:cycleByComponents"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 This might lead to a feedback loop, where value that are calculated is
 feed as a new input.
 In contrast, we expect that the compoistion leads to building larger components
 from smaller ones while preserving their individual behaviors.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration"
plural "false"
caps "true"
noprefix "false"

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 class contains the variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 The class contains a formula (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:formula}
\end_layout

\end_inset

) defining 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to be re-evaluated whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 is updated.
 Then once an instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 is created (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:ctor}
\end_layout

\end_inset

), any change to its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 causes its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to re-evaluate.
\end_layout

\begin_layout Plain Layout
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Specialization-Interface"
plural "false"
caps "true"
noprefix "false"

\end_inset

, class 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 extends 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 and adds the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug:=Dose*Duration}
\end_layout

\end_inset

.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Specialization-Interface"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we illustrates 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 by composition.
 In the example, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 is assigned from outside of the object.
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class DrugAdministration{
\end_layout

\begin_layout Plain Layout

  RIVar<double> Drug, Volume
\end_layout

\begin_layout Plain Layout

  RIVar<double> Concentration:=Drug/VolumeOfFluid |
\backslash
label{line:formula}|
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Main(){
\end_layout

\begin_layout Plain Layout

DrugAdministration administration=new DrugAdministration() |
\backslash
label{line:ctor}| 
\end_layout

\begin_layout Plain Layout

administration.Drug=50
\end_layout

\begin_layout Plain Layout

administration.Volume=100 // administration.Concentration=0.5
\end_layout

\begin_layout Plain Layout

administration.Drug=25  // administration.Concentration=0.25
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-Administration"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 class contains the variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 The class contains a formula (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:formula}
\end_layout

\end_inset

) defining 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to be re-evaluated whenever 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 is updated.
 Then once an instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 is created (
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:ctor}
\end_layout

\end_inset

), any change to its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 causes its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to re-evaluate.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class ExtendedDrugAdministration {
\end_layout

\begin_layout Plain Layout

  IDrugAdministration drugAdministration
\end_layout

\begin_layout Plain Layout

  ExtendedDrugAdministration(DrugAdministration drugAdministration){ 
\end_layout

\begin_layout Plain Layout

    this.drugAdministration=drugAdministration
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  drugAdministration.Drug:= drugAdministration.Concentration*drugAdministration.Vol
umeOfFluid
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Service-Interface"

\end_inset

 An example to a variable that is assigned externally by an expression.
 The instance of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

 has a variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 which is assigned externaly to be updated according to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class ExtendedDrugAdministration:DrugAdministration {
\end_layout

\begin_layout Plain Layout

  RIVar<double> Dose, Rate, Duration
\end_layout

\begin_layout Plain Layout

  Drug:=Dose*Duration
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Specialization-Interface"

\end_inset

An example of a subclass that assigns variables that belonged to the superclass.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{ExtendedDrugAdministration}
\end_layout

\end_inset

 assigns variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 belonging to its superclass 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{DrugAdministration}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
