#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
%\usepackage[usenames,dvipsnames]{color}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{graphicx}
\usepackage{url}
\usepackage{tocloft}
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{pgf-umlsd}
\usepackage{algorithm,algpseudocode}
\usepackage{listings}
\lstset{numbers=left, numberfirstline=true, firstnumber=1, stepnumber=1}
\usepackage[section]{placeins}
\usetikzlibrary{positioning,arrows,arrows.meta}
\lstset{%
  breaklines=true,
  breakatwhitespace=true,
   moredelim=[is][\underbar]{_}{_}
}
\usepackage{tikz,rxmarbles}
\usetikzlibrary[arrows,shapes,positioning,matrix]
\tikzset{pair/.style={draw,rectangle,minimum height=1.5cm}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Approach and Method
\begin_inset CommandInset label
LatexCommand label
name "chap:Method"

\end_inset


\end_layout

\begin_layout Standard
The name RIVar refers to Reactive Instance Variable.
 This special variable is similar to a 
\emph on
reactive
\emph default
 variable and an 
\emph on
instance
\emph default
 variable.
 Similar to reactive variables, the variables can be updated directly by
 external inputs, and also by transitive updates according to assigned expressio
ns.
 The variables has the two assignment forms: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{:=}
\end_layout

\end_inset

 to associate expressions and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{=}
\end_layout

\end_inset

 to provide input.
 Similar to instance variables, the variables are associated to objects
 of the OOP paradigm.
 Accordingly, the updates are executed by direct interactions by synchronous
 method calls.
 In addition, The assignment behaves similar to instance variables (or their
 
\emph on
setters
\emph default
, that are objects' methods used to assign instance variables) in that the
 variables can be assigned from outside of objects.
\end_layout

\begin_layout Standard
Objects can expose a well-defined interface for assigning the variables.
 Therefore, services can expose variables for their clients to assign.
 In addition, subclasses can assign variables belong to the superclass (speciali
zation interface).
 The assignment relates the variable to be updated according to the specified
 formula.
 Consequently, formulas are unconditionally added, sometimes complicating
 the calculations.
\end_layout

\begin_layout Standard
Two issues might exist in a dependency graph represents an application data
 dependencies.
 First, cycles caused from 
\emph on
mutual recursions
\emph default
 (named also 
\emph on
indirect recursions
\emph default
), where reactive variables are defined in terms of each other.
 Second, a variable depends on two or more expressions.
 Similary, a variable might depends on a single expression but get updates
 from external input in addition to the updates coming from the assigned
 expression.
 However, the issues are related.
 Because, as visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:cycle-to-multiple-assignment"
plural "false"
caps "true"
noprefix "false"

\end_inset

, a 
\begin_inset Quotes eld
\end_inset

wave
\begin_inset Quotes erd
\end_inset

 of updates through a cycle, must be caused by a variable having more than
 one source.
 Therefore, the two phenomenons should be handled at once, by providing
 semantics and implementation to variables with several sources.
 Given a cycle in a data dependancy graph, in order that the data will flow
 in the cycle, there must be, that one of the nodes get updates from a node
 or input that is does not belong to the cycle.
 This node depends on node fro the cycle and also depends
\end_layout

\begin_layout Standard
Objects can expose a well-defined interface for assigning the variables.
 Therefore, services can expose variables for their clients to assign.
 In addition, subclasses can assign variables belong to the superclass (speciali
zation interface).
 The assignment relates the variable to be updated according to the specified
 formula in addition to existing assignments related to the same variable.
 This means that the assignment adds the formula to the existing formulas
 handled by the runtime.
 The semantics to add the formula, fits well with the conceptual specialization
 (subtyping) 
\begin_inset CommandInset citation
LatexCommand cite
key "taivalsaari1996notion"
literal "false"

\end_inset

, making the derived class only extending the base class.
 
\end_layout

\begin_layout Standard
Variables assigned externally, so formulas are unconditionally added, sometimes
 complicating the calculations.
 There might be 
\emph on
mutual recursions
\emph default
 (named also 
\emph on
indirect recursions
\emph default
), where reactive variables are defined in terms of each other.
 In addition, there might be a variable with several diffrent assignments.——
\end_layout

\begin_layout Standard
——–
\end_layout

\begin_layout Standard
The semantics to add the formula, fits well with the conceptual specialization
 (subtyping) 
\begin_inset CommandInset citation
LatexCommand cite
key "taivalsaari1996notion"
literal "false"

\end_inset

, making the derived class only extending the base class.
\end_layout

\begin_layout Standard
—–
\end_layout

\begin_layout Standard
There are two phenomenons in dependency graphs.
 First, cycles caused from 
\emph on
mutual recursions
\emph default
 (named also 
\emph on
indirect recursions
\emph default
), where reactive variables are defined in terms of each other.
 Second, variables having several sources, from being an input variable
 while having one or more assignments, or just from having several assignments.
 However, the phenomenons are very related.
 Because, as visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:cycle-to-multiple-assignment"
plural "false"
caps "true"
noprefix "false"

\end_inset

, a 
\begin_inset Quotes eld
\end_inset

wave
\begin_inset Quotes erd
\end_inset

 of updates through a cycle, must be caused by a variable having more than
 one source.
 Therefore, the two phenomenons should be handled at once, by providing
 semantics and implementation to variables with several sources.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (0,5) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3.5,5) {B};       
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge [bend left] (B);  
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge [bend left] (A);
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(A) + (1.75,-0.75)$)    {A:=B};
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(A) + (1.75,0.75)$)    {B:=A};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:simple-cycle"

\end_inset

A dependancy graph that consists of a single cycle from the mutual recursion,
 such that the variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{B}
\end_layout

\end_inset

 are defined in terms of each other.
 The nodes denote the variables and and each directed edge represents a
 dependency between two variables.
 The direction of the edge represents the direction of the dependence, with
 the head of the edge pointing towards the dependent variable and the tail
 pointing towards the independent variable.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}  
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
n {5} 
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
radius {3cm} 
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
margin {8} % margin in angles, depends on the radius
\end_layout

\begin_layout Plain Layout


\backslash
foreach [count=
\backslash
s] 
\backslash
j in {A,B,...,E} 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, circle] (
\backslash
j) at ({360/
\backslash
n * (
\backslash
s - 1)}:
\backslash
radius) {
\backslash
j};   
\backslash
draw[<-, >=latex] ({360/
\backslash
n * (
\backslash
s - 1)+
\backslash
margin}:
\backslash
radius)      arc ({360/
\backslash
n * (
\backslash
s - 1)+
\backslash
margin}:{360/
\backslash
n * (
\backslash
s)-
\backslash
margin}:
\backslash
radius);          
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[above] (X) at (-3,3) {$input$};    
\end_layout

\begin_layout Plain Layout


\backslash
draw[dotted][<-, >=latex] (X) -- (C);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cycle-to-multiple-assignment"

\end_inset

Illustrating the relationship between cycles and several assignments.
 A cycle of variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

-
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{E}
\end_layout

\end_inset

 defined in terms of each other are represented by a directed graph with
 a cycle of directed edges.
 In addition, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{C}
\end_layout

\end_inset

 depends directly or indirectly on external input, is represented by a dashed
 arrow.
 As a result, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{C}
\end_layout

\end_inset

 has two assignments (two 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{:=}
\end_layout

\end_inset

 or one 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{:=}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{=}
\end_layout

\end_inset

).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the next sections we introduce a new variant of FRP that supports complex
 dependancy graphs from introducing mutual recursions and several assignments.
 The updates are taken with two fundamentals.
 First, we use only synchronous method calls from the basic objects framework.
 Second, we satisfy the 
\emph on
referential transparency
\emph default
 property related to FRP 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

, i.e.,  the same input will produce consistently the same output.
 We provide the property using the formulation of the guarantee 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

: 
\begin_inset Quotes eld
\end_inset

the same sequence of events produces the same results, regardless of the
 timing of those events
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
The Computational Model
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Computational-Model"

\end_inset


\end_layout

\begin_layout Standard
This section provides a new variant of FRP in high level, that follows the
 approach's fundamentals.
 We describe this as a computation model.
 The computation model comprises the basic items used in FRP applications,
 the problem description model, that is the style or method used to represent
 an FRP application, and the execution model, which present the process
 of how the FRP application is executed according to the specification.
\end_layout

\begin_layout Subsection
Basic Items
\end_layout

\begin_layout Standard
There are three basic items: reactive variables, operators and assignments.
 reactive variables are the typical 
\emph on
continuous
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push"
literal "false"

\end_inset

 variables represeting real world variables in the problem domain, independant
 of time.
 Operator is a lifted function, such that a function over values are lifted
 to being over reactive variables: the constructed expression continously
 reflects the varying value calculated from the reactive variables.
 Assignment over reactive variables would be a 
\emph on
lifted
\emph default
 assignment, such that an assigned reactive variable should reflect the
 assigned expression continuously.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Problem-Description-Model"

\end_inset

Problem Description Model
\end_layout

\begin_layout Standard
The reactive variables, operators and assignments are used to build FRP
 applications.
 A FRP application has the functional style, in such that any statement
 is just like declaring functions over reactive variables.
 Unlike the functional paradigm there may be 
\emph on
several-assignments
\emph default
, i.e., several formulas in which their target variable is pointed to the
 same variable.
\end_layout

\begin_layout Standard
Nevertheless, the case of several assignments is interepted as a single
 assignment operator over the variable and assigned expressions in the various
 statements.
 For example, as seen in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:assigmentOperator"
plural "false"
caps "true"
noprefix "false"

\end_inset

, the two statements of a FRP application 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=D+1}
\end_layout

\end_inset

, produces the function 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

(
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

(A,B+C),D)}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout

            
\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (1,1) {A};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3,1) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (C) at (5,1) {C};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (D) at (7,1) {D};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (Plus) at (4,3) {+}; 
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (Plus1) at (6,3) {+1}; 
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=diamond,draw=black] (Equal) at (4,5) {=};     
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout


\backslash
path (B) edge  (Plus);
\end_layout

\begin_layout Plain Layout


\backslash
path (C) edge  (Plus);
\end_layout

\begin_layout Plain Layout


\backslash
path (Plus) edge  (Equal);
\end_layout

\begin_layout Plain Layout


\backslash
path (D) edge  (Plus1);
\end_layout

\begin_layout Plain Layout


\backslash
path (A) edge  (Equal);
\end_layout

\begin_layout Plain Layout


\backslash
path (Plus1) edge  (Equal);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:assigmentOperator"

\end_inset

An assignment operator over reactive variables.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The n-ary assignment operator should be equivalent to a composite of several
 binary assignments.
 For example, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

(A,(B+C),D)}
\end_layout

\end_inset

 behaves the same as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

(
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

(A,B+C),D)}
\end_layout

\end_inset

 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:assigmentMutipleLevel"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 In this sense, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset

 referes to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

(A,B+C)}
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=D}
\end_layout

\end_inset

 accumulates the meaning to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

(
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

(A,B+C),D)}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (1,1) {A};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (3,1) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (C) at (5,1) {C};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (D) at (7,1) {D};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (Plus) at (4,3) {+}; 
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (Plus1) at (6,3) {+1}; 
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=diamond,draw=black] (Equal) at (4,5) {=};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=diamond,draw=black] (Equal2) at (4,7) {=};     
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout


\backslash
path (B) edge  (Plus);
\end_layout

\begin_layout Plain Layout


\backslash
path (C) edge  (Plus);
\end_layout

\begin_layout Plain Layout


\backslash
path (Plus) edge  (Equal);
\end_layout

\begin_layout Plain Layout


\backslash
path (D) edge  (Plus1);
\end_layout

\begin_layout Plain Layout


\backslash
path (A) edge  (Equal);
\end_layout

\begin_layout Plain Layout


\backslash
path (Equal) edge  (Equal2);
\end_layout

\begin_layout Plain Layout


\backslash
path (Plus1) edge  (Equal2);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:assigmentMutipleLevel"

\end_inset

A composition of binary assignments
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In addition to the FRP application, there is also the 
\emph on
FRP application consumer
\emph default
, unless it, the FRP application is useless
\emph on
.
 
\emph default
The FRP application is effectful only when it is connected to external events
 of inputs, and also the external events of outputs are observed.
 So, the role of the FRP application consumer is to trigger events, feeding
 the reactive variables with values, and observe the reactive variables
 by being subscribed to their events.
\end_layout

\begin_layout Standard
In this scope, we just use statements of the form 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Var=input}
\end_layout

\end_inset

 to trigger a single event of an external input.
 For example, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A=1}
\end_layout

\end_inset

 refers to that the reactive variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 has just being updated by an external input to the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{1}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Execution Model
\begin_inset CommandInset label
LatexCommand label
name "subsec:Execution-Model"

\end_inset


\end_layout

\begin_layout Standard
An external input, caused a variable's value to change, causes a depth-first
 search (DFS) traversal on the graph starting from this variable's node.
 In the traversal, the dependant variables would update according to the
 new input.
 
\end_layout

\begin_layout Standard
The DFS traversal is caused by synchronous calls process: whenever an element's
 value is changed, it makes recursive synchronous calls to elements depending
 on it, calculating their new values.
\end_layout

\begin_layout Standard
The result of a DFS of the graph can be described in terms of a spanning
 tree of the vertices reached during the search.
 The traversal and updates are simple while edges are 
\emph on
tree edges
\emph default
, however we should consider also the 
\emph on
special
\emph default
 edges (back edges, cross edges and forward edges).
 Reactive variables will always be visited through tree edges going from
 an assignment, so we should consider only assignments and operators.
\end_layout

\begin_layout Standard
For operators, the special edges reminds the glitch issue 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics,bainomugisha2013survey"
literal "false"

\end_inset

.
 The root element's change causes two (or more) visits in the elements that
 have the special edge, while only the last produced a correct calculation.
 However if the graph contains cycles, it is not simple to identify what
 is the last visit.
 So, we use a 
\emph on
model of order
\emph default
 and will ignore visits with less updated value than the existing one.
\end_layout

\begin_layout Standard
For assignments, in the first glance it does not make sence having a special
 edge, because it seems to be defined conflicts.
 However, as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:assignment-special-edge"
plural "false"
caps "true"
noprefix "false"

\end_inset

, any element in the spanning graph is supposed to depend on other variables
 from the graph.
 That's why each visit represents not only the current external input but
 also the preceding external inputs affected the other dependant variables.
 According to the model of order, the visit representing the latest external
 inputs, should be the correct calculation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black,dashed] (B) at (1,7) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (3,7) {A};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black,dashed] (C) at (5,7) {C};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (op1) at (2,5) {+};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (op2) at (4,5) {+};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (eq) at (3,3) {=};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]},dashed] (B) edge  (op1);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]},dashed] (C) edge  (op2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (op1);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (op2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (op1) edge  (eq);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}, color=blue] (op2) edge  (eq);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\begin_layout Plain Layout

*Dotted Lines (in contrast to the solid lines) refers to that it is not
 part of the spanning graph of the vertices reached during the search.
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:assignment-special-edge"

\end_inset

A special edge in DFS to an assignment element 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
The Model of Order
\begin_inset CommandInset label
LatexCommand label
name "sec:Order-Model"

\end_inset


\end_layout

\begin_layout Standard
The external events are sequential.
 Each event has a timestamp (an incremental natural number) as X, Y and
 D in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:timestamps"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 Then a value inferred by other values has several timestamps, the ones
 that the value is based on (Z1 and Z2 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:timestamps"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 Transitively, a value derived from other values has the timestamps produced
 from the union operation on the timestamps of the values it is derived
 from (V in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:timestamps"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
 For the sake of simplicity, timestamps are uniformely represented as sets
 containing one or more timestamps.
 
\end_layout

\begin_layout Standard
Any value can be compared against any other value according to their timestamps
 set.
 Greater timestamps, as the first two lines in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparing-Timestamps-Set-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

 are indicators to more recent events.
 However, if the set is a superset, as in the third line in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparing-Timestamps-Set-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, then it is a recursive update, so considered as not being more updated.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X (external input)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value=8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timestamps: {1}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Y (external input)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value=2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timestamps: {2}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D (external input)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value=1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timestamps: {3}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Z1 = X*Y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value=16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timestamps: {1,2}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Z2 = X+D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value=9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timestamps: {1,3}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
V=Z1+Z2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value=25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timestamps: {1,2,3}
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:timestamps"

\end_inset

Values' Timestamps
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{2}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1,2}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1,3}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1,2}
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Comparing-Timestamps-Set-1"

\end_inset

Comparing Timestamps Set
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Computation with the Stream Model
\begin_inset CommandInset label
LatexCommand label
name "sec:stream"

\end_inset


\end_layout

\begin_layout Standard
Essentiality there are two principals.
 First, variable's low level abstraction is an observable stream of values
 represeting its varying value.
 Second, a single variable can have several sources (from being an input
 variable while having one or more assignments, or just from having several
 assignments).
\end_layout

\begin_layout Subsection
Observable Stream
\end_layout

\begin_layout Standard
In addition to the reactive variable's continuous abstraction, there is
 also the discrete stream abstraction.
 Because even when a reactive variable represents a real-world variable
 in high level, in computers reactive variables' actual values cannot continuous
ly provided.
 For example, temperature nay depend on an actual stream of discrete events,
 being sampled by a thermometer.
\end_layout

\begin_layout Standard
Similary in UI applications, the logic may be in terms of continuously update
 fields according to other fields.
 Many times, UI application observe fields’ change events, once a value
 is changed, dependant fields are calculated and presented.
 The fields change events feed reactive variables (as observable variables),
 and the fields updates are from subscribing to reactive variables (as latent
 variables).
\end_layout

\begin_layout Standard
A reactive variable, and any other element in the FRP application, is a
 stream of values represeting its varying value.
 The stream can be described as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Streams-of-values"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The x axis represents the time, and whenever the value is changed, there
 is a circle with the new value.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
matrix[row sep=0.5cm]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (6.5,0);
\end_layout

\begin_layout Plain Layout

  
\backslash
node at (0.2,0.2) {A};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (1x0) at (1,0) {5};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x0) at (2,0) {3};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (3x0) at (4.5,0) {2};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Streams-of-values"

\end_inset

Streams of values representing a varying value.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Several Sources
\end_layout

\begin_layout Standard
A variable with more than one source refers to having several streams of
 samples contributing to inferre its values.
 This is similar to situations when several devices sample a single real-world
 variable.
\end_layout

\begin_layout Standard
In this thesis, the values are inferred according to the time: whenever
 a new value exists in any of the sources, the value would be propagated
 to the target variable.
 Taking values from several sources according to the time, is equivalent
 to the merge function over streams ( as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:merge-several-sources"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
matrix[row sep=0.5cm]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (6.5,0);
\end_layout

\begin_layout Plain Layout

  
\backslash
node at (0.2,0.2) {Source A};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (1x0) at (2,0) {5};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x0) at (3,0) {3};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (3x0) at (4.5,0) {2};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (6.5,0);
\end_layout

\begin_layout Plain Layout

   
\backslash
node at (0.2,0.2) {Source B};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (0x1) at (1.25,0) {2};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (1x1) at (3.75,0) {1};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x1) at (5.5,0) {6};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
node[box,minimum width=6.5cm] (op) {Merge};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (6.5,0);
\end_layout

\begin_layout Plain Layout

    
\backslash
node at (0.2,0.2) {Variable};
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (1x3) at (2,0) {5};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x3) at (3,0) {3};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (3x3) at (4.5,0) {2};
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout


\backslash
node[marble,circle] (4x3) at (1.25,0) {2};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (5x3) at (3.75,0) {1};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (6x3) at (5.5,0) {6};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (1x0) -- (1x0|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (2x0) -- (2x0|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (3x0) -- (3x0|-op.north);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (0x1) -- (0x1|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (1x1) -- (1x1|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (2x1) -- (2x1|-op.north);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (1x3) -- (1x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (2x3) -- (2x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (3x3) -- (3x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (4x3) -- (4x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (5x3) -- (5x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (6x3) -- (6x3|-op.south);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:merge-several-sources"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

A variable varying value inffered from several sources.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The assignment element is a function over streams that should produce a
 single stream, with the meaning of inferring the value, by merging the
 streams.
 Therfore, the assignment element will be referred to, as the 
\emph on
merge
\emph default
 function.
\end_layout

\begin_layout Subsection
Execution Model
\end_layout

\begin_layout Standard
The elements of the FRP application, as an events stream, or an observable,
 emits values to subscribers 
\begin_inset CommandInset citation
LatexCommand cite
key "meijer2012your"
literal "false"

\end_inset

, based on the 
\emph on
observer
\emph default
 and 
\emph on
iterator
\emph default
 patterns 
\begin_inset CommandInset citation
LatexCommand cite
key "gamma1995design"
literal "false"

\end_inset

.
 Each operator and assignment provides its subscribers 
\emph on
a single values stream based on several values streams
\emph default
 which it is subscribed to.
 It tracks its input values from the inputs streams it is subscribed to,
 calculating and 
\emph on
deciding
\emph default
 what values to notify its subscribers; some inputs might be with an incorrect
 order or redundant updates due to cycles or glitches 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
There are two stages.
 First, evaluating the statements.
 Second, reacting to the FRP application consumer, i.e., updating and triggering
 variables according to external events.
 In the first stage of evaluation, the elements subscribe to each other
 according to the problem described.
 In the second stage, the connected elements update each other, by calling
 each other's OnNext, whenever they need to update.
 For example, the statement 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+1}
\end_layout

\end_inset

 described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Formula-Graph-2variables"
plural "false"
caps "true"
noprefix "false"

\end_inset

, is evaluated as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Evaluating-the-formula"
plural "false"
caps "true"
noprefix "false"

\end_inset

, then as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Propogation-on-the"
plural "false"
caps "true"
noprefix "false"

\end_inset

, when the UI updates B with the value 2 causing the elements update each
 other.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (2,7) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=rectangle,draw=black] (Plus) at (2,5) {+1}; 
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=diamond,draw=black] (Equal) at (2,3) {=};     
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (2,1) {A};     
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge  (Plus);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (Plus) edge  (Equal);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (Equal) edge  (A);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Formula-Graph-2variables"

\end_inset

Formula 
\begin_inset ERT
status open

\begin_layout Plain Layout

A:=B+1
\end_layout

\end_inset

 over reactive variables A and B
\end_layout

\end_inset


\end_layout

\end_inset

, and 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{A}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{eq}{:=}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{B}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Exp}{B+1}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{B}{Subscribe}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{Subscribe}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{Subscribe}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evaluating-the-formula"

\end_inset

Evaluating the formula A:=B+1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{E}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{A}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{eq}{:=}{}  
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{B}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Exp}{B+1}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{E}{OnNext(2)}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{B}{OnNext(2)}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Exp}{OnNext(3)}{eq}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{eq}{OnNext(3)}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{A}{OnNext(3)}{E}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Propogation-on-the"

\end_inset

Propogation on the formula A:=B+1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Executing the Assignments
\end_layout

\begin_layout Standard
Executing the assignment statements accumulates merged streams.
 The execution is sequentially, with the imperative style, line by line.
 For example, the statement 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=B+C}
\end_layout

\end_inset

 is executed as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A=merge(A,B+C)}
\end_layout

\end_inset

.
 The next statement 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A:=D+1}
\end_layout

\end_inset

 is executed as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A=merge(A,D+1)}
\end_layout

\end_inset

 according to the current value of A.
 So that the execution if the two statements behaves as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A=merge(merge(A,B+C),D+1)}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Executing the merge, is not by creating a new stream to produce values whenever
 there is a value in any of the two sources.
 Instead, as seen in the example in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Recursive-Merge"
plural "false"
caps "true"
noprefix "false"

\end_inset

, we use the existing stream of the variable, and produce the merge by 
\begin_inset Quotes eld
\end_inset

adding
\begin_inset Quotes erd
\end_inset

 the missing values according to the other source.
 In order to add the missing values, the assignment/merge operator need
 to track the two sources, and do comparison according to our model of order.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
matrix[row sep=0.5cm]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (6.5,0);
\end_layout

\begin_layout Plain Layout

  
\backslash
node at (0.2,0.2) {A};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (1x0) at (2,0) {5};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x0) at (3,0) {3};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (3x0) at (4.5,0) {2};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (6.5,0);
\end_layout

\begin_layout Plain Layout

   
\backslash
node at (0.2,0.2) {B};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (0x1) at (1.25,0) {2};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (1x1) at (3.75,0) {1};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x1) at (5.5,0) {6};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
node[box,minimum width=6.5cm] (op) {Merge};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (6.5,0);
\end_layout

\begin_layout Plain Layout

    
\backslash
node at (0.2,0.2) {A};
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (1x3) at (2,0) {5};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x3) at (3,0) {3};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (3x3) at (4.5,0) {2};
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout


\backslash
node[marble,circle] (4x3) at (1.25,0) {2};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (5x3) at (3.75,0) {1};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (6x3) at (5.5,0) {6};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (1x0) -- (1x0|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (2x0) -- (2x0|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (3x0) -- (3x0|-op.north);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (0x1) -- (0x1|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (1x1) -- (1x1|-op.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [fdash] (2x1) -- (2x1|-op.north);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (1x3) -- (1x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (2x3) -- (2x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (3x3) -- (3x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (4x3) -- (4x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (5x3) -- (5x3|-op.south);
\end_layout

\begin_layout Plain Layout


\backslash
draw [rdash] (6x3) -- (6x3|-op.south);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Recursive-Merge"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

A=merge(A,B)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
According to our approach, the variables are interacted by traditional messages
 from the objects containing them.
 Therefore, in the implemented solution of FRP, a mediator is not allowed.
 Instead, we use a push model, such that a variable synchronously calls
 its derived variables whenever it has a new value.
 In addition, any dependency produced from any formula, is supported.
\end_layout

\begin_layout Standard
In order to cover all types of dependency graphs, we provide semantics to
 the assignment operator.
 An assignment refers to adding more source to get values to the variable,
 therefore a variable inffer its values over time from all the sources provided.
 As a result, the assignments and operators have a similarity in that they
 may produce a single stream by several input streams.
\end_layout

\begin_layout Standard
We provide an order model to handle the time issue, because the 
\emph on
visit time
\emph default
 of the DFS traversal is insufficient for visits caused from the same event
 (simultaneous events 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

).
 Therefore, values are attached with information to discover their time.
 
\end_layout

\begin_layout Standard
We use the order model as the algorithm used in the assignment operator,
 how to choose the values among the input streams.
 Consequently, whenever there is a new value from any of the sources, it
 is pushed to the target variable.
 This makes the similarity stronger between the assignments and operators.
\end_layout

\end_body
\end_document
