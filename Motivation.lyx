#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{algorithm,algpseudocode}
\usepackage{pgf-umlsd}
\usepackage{listings}
\lstset{numbers=left, numberstyle=\tiny, numbersep=5pt, numberfirstline=true, firstnumber=1, stepnumber=1}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Motivation"

\end_inset

Problem
\end_layout

\begin_layout Standard
Maintaining consistency in field values are crucial in front ends applications.
 When users fill in one field, it is essential to recalculate the values
 of other related fields.
 For example, in 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 
\begin_inset Formula $\NAME{Administration}$
\end_inset

 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), there are several options to define the quantities: by 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 or by 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In the first option, 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 is calculated based on 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while in the second option, 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 is calculated based on the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tabular}{|c c c| }    
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

Drug & Concentration & Volume 
\backslash

\backslash
   
\end_layout

\begin_layout Plain Layout


\backslash
framebox(35,15){
\backslash
textit{100}} & 
\backslash
framebox(35,15){
\backslash
textit{0.33}} & 
\backslash
framebox(35,15){300} 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

 Dose & Duration & Rate 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

 
\backslash
framebox(35,15){10} & 
\backslash
framebox(35,15){10} & 
\backslash
framebox(35,15){
\backslash
textit{30}} 
\backslash

\backslash
  
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout


\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-calculations-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
User interface component for drug administration.
\end_layout

\end_inset

User interface component for drug administration.
 The upper panel represents the bag component, and the lower panel represents
 the pump component.
 The fields are illustrated with example values, in case the user sets Volume,
 Dose and Duration.
 The fields Drug, Concentration, and Volume are displayed in italic typeface
 to indicate that these values are calculated based on the set values.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An efficient mechanism to develop fields calculations has a potenstial to
 improve front ends usability.
 Specificaly, in applications for healthcare, it is desirable to solve usability
 problems 
\begin_inset CommandInset citation
LatexCommand cite
key "gawande2018doctors"
literal "false"

\end_inset

.
 An efficient mechanism will promote the use of redundancies in the user
 interfaces.
 Redundancies improves the usability, because the user is not enforced to
 one strict representation.
 For instance, in 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 
\begin_inset Formula $\NAME{Administration}$
\end_inset

, there are drugs, where it is easier to set the 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while in others it is easier to set by the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
\end_layout

\begin_layout Standard
The inefficiency experienced by legacy applications in the market lies in
 the time-consuming process of implementing changes.
 One contributing factor is the limited cognitive capacity of developers
 when it comes to analyzing the extensive details within the application
 source code, dealing with large code bases and code repetition.
 To address this, recommended practices emphasize the design of multiple
 objects and components with well-defined responsibilities 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 Furthermore, the separation to responsibilities should be alligned to the
 business needs 
\begin_inset CommandInset citation
LatexCommand cite
key "evans2004domain"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The inefficiency faced by legacy applications in the market is the prolonged
 time required to implement changes.
 Numerous books, courses, and blogs have been published on the topic of
 improving and refactoring code and design.
 The limited cognitive in the developers brain in analysing a huge amount
 of detailes existing the application source code, causing that the problem
 is to handle large code base, and to handle code repetition.
 In the recommended practices, multiple objects and components with distinct
 responsibilities are designed 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 In addition, the separation to responsibilities should be alligned to the
 business needs 
\begin_inset CommandInset citation
LatexCommand cite
key "evans2004domain"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This outlines a framework of objects, where each object contains calculations.
 For instance, the 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 
\begin_inset Formula $\NAME{Administration}$
\end_inset

 can be composed of 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

, with fields and relationships ilustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The calculations within an object involve variables it directly holds,
 as well as variables from other objects it contains, or variables from
 its parent objects.
 In the example, 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 contain calculations involving 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Concentration}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 contain calculations involving its variables: 
\begin_inset Formula $\LSTINLINE{Dose}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Rate}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Duration}$
\end_inset

, as well as the 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

 of the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 instance it contains.
 
\end_layout

\begin_layout Standard
The calculations are defined by formulas as illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:PumpCode"
plural "false"
caps "true"
noprefix "false"

\end_inset

, for the variables to recalculate according to changes in other variables.
 As a result, the defined behavior of objects, creates data dependency graphs.
 These dependency graphs from the objects are then combined to form the
 overall dependency graph.
 
\end_layout

\begin_layout Standard
The problem is how to satisfy the 
\emph on
superposition
\emph default
 property, which ensures that the behaviors produced by smaller objects
 are preserved when constructing larger composite objects.
 Formally, the behavior of a class is denoted as 
\begin_inset Formula $F(x)$
\end_inset

, where 
\begin_inset Formula $x$
\end_inset

 represents an instance of the class.
 We expect that this behavior satisfies the property 
\begin_inset Formula $F(x_{1}+x_{2})=F(x_{1})+F(x_{2})$
\end_inset

.
 However, in the context of calculations, redundant updates pose a challenge
 to achieving this property.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

class Bag
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  Variable Drug, Volume, Concentration |
\backslash
label{line:PumpCode_RIVars1}|
\end_layout

\begin_layout Plain Layout

  Volume:=Concentration*Drug |
\backslash
label{line:PumpCode_formula3}|
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

class Pump
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  Variable TheBag|
\backslash
label{line:PumpCode_TheBag}|
\end_layout

\begin_layout Plain Layout

  Variable Duration, Dose, Rate|
\backslash
label{line:PumpCode_RIVars2}|
\end_layout

\begin_layout Plain Layout

  TheBag.Drug:=Dose*Duration  |
\backslash
label{line:PumpCode_formula}|
\end_layout

\begin_layout Plain Layout

  Duration:=Rate*Volume |
\backslash
label{line:PumpCode_formula2}|
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:PumpCode"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Pseudo code of the calculations in the classes 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

.
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cref{line:PumpCode_formula,line:PumpCode_formula2,line:PumpCode_formula3}
\end_layout

\end_inset

 represent the needed calculations.
 The calculations involves the instance variables declared in 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cref{line:PumpCode_RIVars1,line:PumpCode_RIVars2}
\end_layout

\end_inset

.
 In 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

, the calculations involve variables of the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 instance, that is declared in 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash
cref{line:PumpCode_TheBag}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale=0.8]%[show  background  grid]
\end_layout

\begin_layout Plain Layout


\backslash
begin{interface}{IBag}{0,-5}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Drug}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{VolumeOfFluid}
\end_layout

\begin_layout Plain Layout


\backslash
end{interface}
\end_layout

\begin_layout Plain Layout


\backslash
begin{class}[text width=8 cm]{Pump}{0,0}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Duration}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Dose}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Rate}
\end_layout

\begin_layout Plain Layout


\backslash
end{class}
\end_layout

\begin_layout Plain Layout


\backslash
composition{Pump}{TheBag}{}{IBag}
\end_layout

\begin_layout Plain Layout


\backslash
begin{class}{Bag}{0,-10}
\end_layout

\begin_layout Plain Layout


\backslash
implement {IBag}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Concentration }
\end_layout

\begin_layout Plain Layout


\backslash
end{class}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-Administration-UML-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Drug Administration Class Diagram.
\end_layout

\end_inset

Drug Administration Class Diagram.
 Illustrating the access relationships between the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 classes.
 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 can perform calculations involving 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Concentration}$
\end_inset

 variables.
 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 can perform calculations involving its variables: 
\begin_inset Formula $\LSTINLINE{Dose}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Rate}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Duration}$
\end_inset

, as well as the 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

 variables of the 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 instance.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The issue is how to avoid redundant updates from an 
\emph on
unexpected feedback loop
\emph default
, where a change in one variable leads to a subsequent change that feeds
 back and affects the original variable itself.
 In the provided example, the graph exhibits a cycle involving the nodes
 
\begin_inset Formula $\LSTINLINE{Duration}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:cycleByComponents"
plural "false"
caps "true"
noprefix "false"

\end_inset

), which can potentially result in an infinite loop due to such an unexpected
 feedback loop.
 Even a single redundant update can be undesirable.
 If the feedback loop causes a variable to be updated, it can potentially
 override previous valid values, as the example illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Unpredictable-Calculation"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{UI}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{Pump}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Bag}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Duration=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Drug=100}{Bag}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Dose=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}      
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{VolumeOfFluid=300}{Bag}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Concentration=0.33}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Drug=99}{Bag}{}  
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Rate=30}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}        
\end_layout

\begin_layout Plain Layout


\backslash
end{call}   
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Unpredictable-Calculation"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Unexpected Feedback Loop: Unintended Override of User Input
\end_layout

\end_inset

Sequence diagram illustrating the interactions between the User Interface
 (UI), 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 objects.
 Initially, the UI sets the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 to 100.
 However, due to the complex interactions and dependencies between the objects,
 the
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
lstinline{Drug}
\end_layout

\end_inset

 value undergoes modifications and eventually gets updated to 99.
 This unintended alteration exemplifies the challenge posed by feedback
 loops, which can result unintended override of user input.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{tikzpicture}[node distance=3cm, 
\end_layout

\begin_layout Plain Layout

                      ByPumpEdge/.style={draw=black,<-},
\end_layout

\begin_layout Plain Layout

                      ByBagEdge/.style={draw=black,<-, dashed},
\end_layout

\begin_layout Plain Layout

                      >=latex]
\end_layout

\begin_layout Plain Layout

    % Nodes
\end_layout

\begin_layout Plain Layout

    
\backslash
node (concentration) [circle, draw] at (0,0) {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (concentration.south) {concentration};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (volume) [circle, draw, below left of=concentration] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (volume.south) {volume};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (drug) [circle, draw, below right of=concentration] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (drug.south) {drug};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (dose) [circle, draw, below of=drug] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (dose.south) {dose};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (rate) [circle, draw, below of=volume] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (rate.south) {rate};
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\backslash
node (duration) [circle, draw, below right of=rate] {};
\end_layout

\begin_layout Plain Layout

    
\backslash
node[below] at (duration.south) {duration};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % Edges
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (rate) -- (duration);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (volume) -- (duration);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (duration) -- (drug);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByPumpEdge] (dose) -- (drug);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByBagEdge] (concentration) -- (volume);
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[ByBagEdge] (drug) -- (volume);
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  
\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cycleByComponents"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Mutual recursion in runtime from combined dependency graphs of 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 instances.
\end_layout

\end_inset

Mutual recursion in runtime from combined dependency graphs of 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 instances.
 The solid edges denote dependencies initiated within the 
\begin_inset Formula $\LSTINLINE{Pump}$
\end_inset

 instance, while dotted edges indicate dependencies initiated within the
 
\begin_inset Formula $\LSTINLINE{Bag}$
\end_inset

 instance.
 In the graph created, the nodes 
\begin_inset Formula $\LSTINLINE{Volume}$
\end_inset

, 
\begin_inset Formula $\LSTINLINE{Drug}$
\end_inset

, and 
\begin_inset Formula $\LSTINLINE{Duration}$
\end_inset

 are interconnected through the edges, representing the mutual recursion.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Previous Approaches
\end_layout

\begin_layout Standard
TBD
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Alternatives
\end_layout

\begin_layout Plain Layout
One common tool for implementing this functionality is a spreadsheet.
 In spreadsheets, a cell represents a field and can contain a formula that
 defines its dependency on other cells.
 Alternatively, the visual fields can be connected to reactive variables.
 In frameworks such as React, the view can be continuously updated by the
 framework.
\end_layout

\begin_layout Plain Layout
The drug administration application contain fields, in such that a field
 is sometimes useful to fill it directly by the user, while the same field
 can be usefull to be computed according to ther fields that the user filled.
 However, reactive variables are classified into input and output categories.
 In spreadsheet, a cell can either contain a formula or a value.
 Similary in MobX, the property can have either an observable annotation
 or computed annotation.
 typicaly, there is a need to duplicate fields or sets of related fields.
 For example, making several drug administration forms.
 The user then should choose the needed form, before filling the form out.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
In the existing mechanisms, maintaining functionality becomes challenging
 when there is a significant number of calculations involved, especially
 that the codebase grows with repeated code segments.
 For instance, as illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Centerlized-Calculation-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, if the dose, duration, and volume have changed, then the drug, concentration,
 and rate are calculated.
 If the drug, dose, and rate have changed, then the duration, volume, and
 concentration are calculated, and so on.
 However, this method also introduces redundancy, as seen in 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume1}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume2}
\end_layout

\end_inset

 where the same statement is repeated.
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

If edited triple is of Dose,  Duration, and VolumeOfFluid
\end_layout

\begin_layout Plain Layout

  Drug = Dose*Duration
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/VolumeOfFluid |
\backslash
label{line:concentrationByDrugAndVolume1}|
\end_layout

\begin_layout Plain Layout

  Rate = VolumeOfFluid/Duration
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Drug, Dose, and Rate
\end_layout

\begin_layout Plain Layout

  Duration = Drug/Dose
\end_layout

\begin_layout Plain Layout

  VolumeOfFluid = Duration*Rate 
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/VolumeOfFluid |
\backslash
label{line:concentrationByDrugAndVolume2}|
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Concentration,  Volume, and Duration
\end_layout

\begin_layout Plain Layout

  Drug = Volume*Concentration
\end_layout

\begin_layout Plain Layout

  Rate = VolumeOfFluid/Duration 
\end_layout

\begin_layout Plain Layout

  Dose = Drug/Duration
\end_layout

\begin_layout Plain Layout

End If
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Centerlized-Calculation-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Drug administration calculation.
\end_layout

\end_inset

Example calculation logic for interdependent fields in a drug administration
 front-end application.
 The code shows how to calculate the values of the fields Drug, Concentration,
 VolumeOfFluid, Dose, Duration, and Rate based on different combinations
 of three input fields.
 When fields are interdependent like this, updating one field requires modifying
 all the locations where the other fields are updated, creating a centralized
 maintenance model.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Spreadsheets is a popular application that provide a limited functionality
 to fields calculations.
 Each cell, representing a field, can contain either a formula or a value.
 However, this leads to duplication, as in the drug administration, it leads
 to implement several modes
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
available in https://github.com/RIVarX/Evaluation/blob/main/duplicate_solutions.xl
sx
\end_layout

\end_inset

.
 In the first mode, users set the concentration, volume, and duration, and
 the other fields are calculated.
 In the second mode, users set the dose, rate, and duration, and once again,
 the other fields are calculated.
 This pattern can continue for additional modes, adding redundancy across
 the different modes.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Unpredictable Calculation
\end_layout

\begin_layout Plain Layout
In the original application, the calculation is centerlized.
 Whenever a user sets a new value to any of the fields, a calculation procedure
 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Centerlized-Calculation"
plural "false"
caps "true"
noprefix "false"

\end_inset

) is executed.
 The procedure consists of branches according to the user-cases, in each
 branch there are three values being used to calculate the other values.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

If edited triple is of Dose,  Duration, and VolumeOfFluid
\end_layout

\begin_layout Plain Layout

  Drug = Dose*Duration
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/VolumeOfFluid
\end_layout

\begin_layout Plain Layout

  Rate = VolumeOfFluid/Duration
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Drug, Dose, and Rate
\end_layout

\begin_layout Plain Layout

  Duration = Drug/Dose
\end_layout

\begin_layout Plain Layout

  VolumeOfFluid = Duration*Rate 
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/VolumeOfFluid
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Concentration,  Volume, and Duration
\end_layout

\begin_layout Plain Layout

  Drug = Volume*Concentration
\end_layout

\begin_layout Plain Layout

  Rate = VolumeOfFluid/Duration 
\end_layout

\begin_layout Plain Layout

  Dose = Drug/Duration
\end_layout

\begin_layout Plain Layout

End If
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Centerlized-Calculation"

\end_inset

Part of a centralized calculation procedure
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Plain Layout
We tried to seperate an application unsuccessfully.
 The calculations are defined separately in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

.
 Also the runtime is seperated, managing the updates on top of the objects'
 interactions (standard calls).
 But the resulted calculations does not fit the requirements.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following UI application (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations"
plural "false"
caps "true"
noprefix "false"

\end_inset

) handles drug administration.
 It observes the fields' change events, once a value is changed, dependant
 fields are calculated and presented.
 The application is a prototype of a small part from an existing application.
 The goal is to reduce the complexity existing in the traditional application.
\end_layout

\begin_layout Plain Layout
In order to simplify the application, we seperate the model to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

.
 Also the UI is seperated to micro-frontends 
\begin_inset CommandInset citation
LatexCommand cite
key "peltonen2021motivations"
literal "false"

\end_inset

 respectively.
 The architectural design is illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 refers to giving 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}'s content
\end_layout

\end_inset

.
 injecting medicines into a patient's bloodstream.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,3.5) (4,5.5)}, inner sep=0pt, label=center:Bag micro-frontend]
 (C) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,3.5) (4,5.5)}, xshift=6cm, inner sep=0pt, label=center:Pump
 micro-frontend] (D) {};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,0) (4,2)}, inner sep=0pt, label=center:Bag Domain Object]
 (A) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,0) (4,2)}, xshift=6cm, inner sep=0pt, label=center:Pump
 Domain Object] (B) {};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (A)--(B) node[anchor=south,inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (A)--(C) node[inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (D)--(B) node[inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Design of the drug administration application, showcasing observer interaction
 through dashed lines.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Drug Administration Data Model
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 refers to a medical device used to deliver fluids with medication into
 a patient’s body in a controlled manner.
 Accordingly, we model 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 class with contained 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{IBag}
\end_layout

\end_inset

 representing the connected bag, containing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 relates to amount of medication administered to a patient, (e.g.
 100 mg).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 relates to the fluid volume mixed with the drug (e.g., 300 ml).
 Based on the existing bag, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 contains the data related to giving the bag's content over time.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Rate}
\end_layout

\end_inset

 relates to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 flow administered into the patient’s body per time unit (e.g., 30 ml per
 hour).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 relates to the dosage, which is the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 administered into the patient’s body per time unit (e.g., 10 mg per hour).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

 relates to the duration from starting the injection until stopping it.
 According to the architectural design and as visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Calculation-spread-over-objects-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, the fields in the user interface can trigger changes to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 which trigger changes also to the bag.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 interacts with the bag indirectly using an interface.
\end_layout

\begin_layout Plain Layout
In order to achive our goal to seperate the drug administration model, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 and its bag will be loosely coupled.
 The bag will be defined as an interface, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 will only send messages to it, to update 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
 Such as example is visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Calculation-spread-over-objects-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 When 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 send a message to the bag, it should not be aware of any internal information
 related to the bag.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

, in addition to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

, contains also 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 relating to the amount of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 per 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 (e.g.
 0.33 mg/ml).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 should not be aware of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 interacts with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

 by the interface it is implemented, named 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{IBag}
\end_layout

\end_inset

.
 The data model and the relationships are visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-3"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}   
\end_layout

\begin_layout Plain Layout


\backslash
newthread{UI}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{Pump}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Bag}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Duration=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Drug=100}{Bag}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Dose=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Calculation-spread-over-objects-1"

\end_inset

Calculation procedure spread over seperated objects.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
In order to update existing fields according to other fields, we need
\end_layout

\begin_layout Plain Layout
Front ends applications typicaly invovles behavior like reactive variables.
 Specificaly in the following drug administration example, the UI component
 contains six fields: The "Drug" field specifies the amount of medication
 administered to the patient (e.g., 100 mg).
 The "VolumeOfFluid" field indicates the volume of fluid mixed with the
 drug (e.g., 300 ml).
 The "Concentration" field represents the amount of the drug per unit volume
 of fluid (e.g., 0.33 mg/ml).
 The "Rate" field specifies the flow rate of the fluid into the patient's
 body per unit of time (e.g., 30 ml per hour).
 The "Dose" field represents the dosage, which is the amount of drug administere
d to the patient's body per unit of time (e.g., 10 mg per hour).
 The "Duration" field indicates the duration of the injection, from start
 to end.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
.
 However, typically, the data dependency graphs produced by this type of
 application are more complex than the typical graphs handled in the field.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
.
 the duration depends on the volume (and rate), which depends on the drug
 (and concentration), which in turn depends again on the duration (and dose).
 The components behavior are indepedently, so the behavior is inpredictable.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{UI}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{Pump}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Bag}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Duration=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Drug=100}{Bag}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Dose=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}      
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{VolumeOfFluid=300}{Bag}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Concentration=0.33}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Drug=99}{Bag}{}  
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Rate=30}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}        
\end_layout

\begin_layout Plain Layout


\backslash
end{call}   
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Calculation-spread-over-objects-1-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
A sequence diagram for the drug administration behavior.
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

The drug administration behavior is represented by a sequence diagram, which
 is divided into two objects or microfrontends.
 The task of performing calculations is shared between the 
\backslash
lstinline{Pump} and 
\backslash
lstinline{Bag}.
 Initially, the user specifies a 
\backslash
lstinline{Dose} of 10 and a 
\backslash
lstinline{Duration}.
 In response, the 
\backslash
lstinline{Drug} is calculated to be 100.
 Next, the user sets the 
\backslash
lstinline{VolumeOfFluid} to 300, which causes the 
\backslash
lstinline{Concentration} to be calculated as 0.33.
 However, the subsequent calculation of 
\backslash
lstinline{Drug} unexpectedly results in 99.
 This unpredictability can be attributed to two factors.
 Firstly, during the update of 
\backslash
lstinline{Concentration}, the value of 100/300 was rounded, leading to the
 loss of information in the process.
 This caused 
\backslash
lstinline{Concentration} to be calculated as 0.33, and consequently, 
\backslash
lstinline{Drug} was calculated to be 99.
 Secondly, there was a cycle in which 
\backslash
lstinline{Concentration} was updated based on 
\backslash
lstinline{Drug}, which was in turn updated based on 
\backslash
lstinline{Concentration}.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
We use the simple drug administration example, ilustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

The example is a UI component that contains 6 fields.
 The field 
\backslash
lstinline{Drug} specifies the amount of medication administered to the patient,
 for example, 100 mg.
 The field 
\backslash
lstinline{VolumeOfFluid} indicates the volume of fluid mixed with the drug,
 for example, 300 ml.
 The field 
\backslash
lstinline{Concentration} represents the amount of the drug per unit volume
 of fluid, for example, 0.33 mg/ml.
 The field 
\backslash
lstinline{Rate} specifies the flow rate of the fluid into the patient's
 body per unit of time, for example, 30 ml per hour.
 The field 
\backslash
lstinline{Dose} represents the dosage, which is the amount of drug administered
 to the patient's body per unit of time, for example, 10 mg per hour.
 The field 
\backslash
lstinline{Duration} indicates the duration of the injection, from the start
 to the end.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
The drug administration UI component need to be seperated into two UI components
: the pump and the bag.
 The bag contains the drug, volume, and concentration, while the pump contains
 an instance of the bag along with the fields for dose, rate, and duration.
 Consequently, to create a different variant of the drug administration,
 we don't need to duplicate the entire component.
 Instead, we can create two types of bags: one that includes concentration
 and one that doesn't.
 By duplicating only the bag, we reduce code redundancy and make future
 changes easier.
 If we had duplicated the entire component, any updates to the pump would
 require making changes in two places.
\end_layout

\begin_layout Plain Layout
The fields need to behaves similar to reactive variables.
 For example, consider the field "Concentration" which represents the amount
 of a drug per unit volume.
 Similar to reactive variables, this field should be recalculated in response
 to updates in the "Amount" and "Volume" values.
 In order, to keep on the specified design, we need that each component
 implement its internal coherence behavior.
 For instance, in the pump component, it should be specified, that the Amount
 of the bag, should be recalculated according to the Dose and Duration.
 In the same time, other specifications that is related intenaly to bag
 remain hodden.
 For instance, that the concentration is recalculated in response to updates
 in the "Amount" and "Volume".
\end_layout

\begin_layout Plain Layout
By spedifiing behavior similar to reactive variables, we initiate a depedancy
 graph.
 For example, in specifiing Concentration to update based on "Amount" and
 "Volume" values, we iniate a dependency, that concentration depends on
 amount and volume.
 As the components specified such behavuier privetly, each contains privately
 a depedency graph, according to its specified behavior.
 while the runtime, the epedency graph is composed from the two components.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Seperation
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The fields in the example need to be similar to reactive variables.
 For example, consider the field "Concentration" which represents the amount
 of a drug per unit volume.
 Similar to reactive variables, this field should be recalculated in response
 to updates in the "Amount" and "Volume" values.
 One common tool for implementing this functionality is a spreadsheet.
 In spreadsheets, a cell represents a field and can contain a formula that
 defines its dependency on other cells.
 Alternatively, the visual fields can be connected to reactive variables.
 For instance, MobX provides a framework to implement reactive variables
 as a state management solution to integrate with React.
 React provide a framework that continuously update the view, containing
 the visual fields.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Redandantancy
\end_layout

\begin_layout Plain Layout
in the code->need to mainain it, when we need to add or update code, that
 have
\end_layout

\begin_layout Plain Layout
in variables/calculations, it might be heavy executions
\end_layout

\end_inset


\end_layout

\begin_layout Section
Redandant Code
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Cycles-1"

\end_inset

Cycles
\end_layout

\begin_layout Plain Layout
In the FRP paradigm, where FRP runtimes are developed, There are two opposing
 methods about cycles.
 In one method, cycles are avoided, because the paradigm derived from the
 functional paradigm, with the referential transparency property 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

.
 In addition, avoiding cycles is a necessary condition to algorithms to
 handle glitches 
\begin_inset CommandInset citation
LatexCommand cite
key "margara2018semantics,bainomugisha2013survey"
literal "false"

\end_inset

.
 According to the second method, forbidding cycles makes FRP unacceptably
 weak, because many applications have cycles by their nature 
\begin_inset CommandInset citation
LatexCommand cite
key "cooper2006embedding,perez2015bridging"
literal "false"

\end_inset

.
 Following the approach that cycles are avoided, there is an approach that
 the needed dependency graph is dynamically changed 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
FRP runtimes that support cycles uses various techniques to stop arisen
 loops.
 Terminating when it closes a cycle 
\begin_inset CommandInset citation
LatexCommand cite
key "sannella1993multi"
literal "false"

\end_inset

, adding to the language a special operator to inform the runtime when to
 break the cycle 
\begin_inset CommandInset citation
LatexCommand cite
key "cooper2006embedding"
literal "false"

\end_inset

, stop after a number of iterations, stop if the value has not changed,
 or changed only less than a threshold (available in 
\emph on
Microsoft Excel
\emph default
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://support.microsoft.com/en-us/office/remove-or-allow-a-circular-reference-85
40bd0f-6e97-4483-bcf7-1b49cd50d123
\end_layout

\end_inset

).
 The various methods caused from the unknown, that a repeating update is
 either needed because previous update was a glitch, or that it is unneeded
 because the repeating update is caused from a cycle.
\end_layout

\begin_layout Plain Layout
Our model provides the semantics described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "par:Any-Formula"
plural "false"
caps "true"
noprefix "false"

\end_inset

: cycles are resulted from variables with more than one source.
 Those variables are updated whenever there is a newer value from any of
 the sources.
 Technically, loops are terminated, because values caused from cycles are
 not newer.
 However, we are not the first to handle cycles, as said in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:ConstraintsInBackground"
plural "false"
caps "true"
noprefix "false"

\end_inset

, constraints systems that handle two-way constraints handle cycles by their
 nature 
\begin_inset CommandInset citation
LatexCommand cite
key "sannella1993multi"
literal "false"

\end_inset

.
 Nevertheless, the model treats the meaning issue about cycles more explicity.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The fields in the example need to be similar to reactive variables.
 For example, consider the field "Concentration" which represents the amount
 of a drug per unit volume.
 Similar to reactive variables, this field should be recalculated in response
 to updates in the "Amount" and "Volume" values.
 In various programming environments, including JavaScript, a similar behavior
 can be achieved by associating code with a change event for a specific
 field.
 This code will be triggered and executed whenever there is a modification
 to the field's value 
\begin_inset CommandInset citation
LatexCommand cite
key "mdn-change-event"
literal "false"

\end_inset

.
 For example, to recalculate the Concentration when the "Amount" and "Volume"
 values are updated, we can register the code responsible for updating the
 Concentration within the change events associated with the "Amount" and
 "Volume" fields.
\end_layout

\begin_layout Plain Layout
The example need to be seperated into two UI components: the pump and the
 bag.
 The bag contains the drug, volume, and concentration, while the pump contains
 an instance of the bag along with the fields for dose, rate, and duration.
 Consequently, to create a different variant of the drug administration,
 we don't need to duplicate the entire component.
 Instead, we can create two types of bags: one that includes concentration
 and one that doesn't.
 By duplicating only the bag, we reduce code redundancy and make future
 changes easier.
 If we had duplicated the entire component, any updates to the pump would
 require making changes in two places.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The fields in the example need to be similar to reactive variables.
 For example, consider the field "Concentration" which represents the amount
 of a drug per unit volume.
 Similar to reactive variables, this field should be recalculated in response
 to updates in the "Amount" and "Volume" values.
 One common tool for implementing this functionality is a spreadsheet.
 In spreadsheets, a cell represents a field and can contain a formula that
 defines its dependency on other cells.
 Alternatively, the visual fields can be connected to reactive variables.
 For instance, MobX provides a framework to implement reactive variables
 as a state management solution to integrate with React.
 React provide a framework that continuously update the view, containing
 the visual fields.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
In implementing the example by reactive variables, each reactive variable
 is classified into either 
\emph on
input
\emph default
 or 
\emph on
output
\emph default
 categories, often resulting in duplications.
 For instance, in spreadsheets, a cell can contain either a formula or a
 value.
 This leads to implement several modes to the drug administration.
 In the first mode, users set the concentration, volume, and duration, and
 the other fields are calculated.
 In the second mode, users set the dose, rate, and duration, and once again,
 the other fields are calculated.
 This pattern can continue for additional modes, but has redundancy across
 the different modes.
\end_layout

\begin_layout Plain Layout
In implementing the example without reactive variables, we can customize
 the updates by using visual field change events.
 For instance, as illustrated in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Centerlized-Calculation"
plural "false"
caps "false"
noprefix "false"

\end_inset

, if the dose, duration, and volume of fluid have changed, then the drug,
 concentration, and rate are calculated.
 If the drug, dose, and rate have changed, then the duration, volume, and
 concentration are calculated, and so on.
 However, this method also introduces redundancy, as seen in 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume1}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume2}
\end_layout

\end_inset

 where the same statement is repeated.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
