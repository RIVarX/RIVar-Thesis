#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{algorithm,algpseudocode}
\usepackage{pgf-umlsd}
\usepackage{listings}
\lstset{numbers=left, numberstyle=\tiny, numbersep=5pt, numberfirstline=true, firstnumber=1, stepnumber=1}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Problem"

\end_inset

Motivation
\end_layout

\begin_layout Section
Motivation
\end_layout

\begin_layout Standard
The original 
\family typewriter
Drug Administration
\family default
 application presents negative impacts from using the 
\emph on
Procedural Programming
\emph default
 paradigm.
 This paradigm utilizes a sequence of instructions organized into "procedures"
 to perform specific tasks.
 The programmer defines these procedures, which accept input data, perform
 computations or operations on them, and return output.
 Procedural programming refers to a common communication style between humans
 and computers.
\end_layout

\begin_layout Itemize
Command-Line Interface (CLI) utilization: The user provides a command (input),
 and the system executes a corresponding procedure to produce the desired
 output.
\end_layout

\begin_layout Itemize
Application Programming Interface (API) interaction: The programmer calls
 an API function with input parameters, and the function executes a predefined
 procedure to generate results.
\end_layout

\begin_layout Itemize
Large Language Model (LLM) prompting: The user provides a prompt (input),
 which is processed it through an LLM, like 
\family typewriter
ChatGPT
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://chatgpt.com/
\end_layout

\end_inset


\end_layout

\end_inset

 and 
\family typewriter
Gemini
\family default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://gemini.google.com/
\end_layout

\end_inset


\end_layout

\end_inset

, that generates textual output.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Furthermore, the procedural programming approach is sometimes reflected
 in the way users interact with Graphical User Interfaces (GUIs).
 Navigating to a specific window or application within a GUI can be likened
 to selecting a procedure, while entering values into fields mirrors the
 process of defining input data for the procedure.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An example of such communication can be found in the use of the 
\begin_inset Formula $\LSTINLINE{RandomForestClassifier}$
\end_inset

 algorithm from the 
\family typewriter
scikit-learn
\family default
 library (API) in the 
\family typewriter
Python
\family default
 programming language for creating a random forest model for classification.
\end_layout

\begin_layout Standard
This algorithm has many parameters that can be controlled, including:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\LSTINLINE{n\_estimators}$
\end_inset

: The number of trees in the forest.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\LSTINLINE{criterion}$
\end_inset

: The cost function for calculating the split at each node (for example,
 "gini" or "entropy").
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\LSTINLINE{max\_depth}$
\end_inset

: The maximum depth of each tree.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\LSTINLINE{min\_samples\_split}$
\end_inset

: The minimum number of samples required to split a node.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\LSTINLINE{min\_samples\_leaf}$
\end_inset

: The minimum number of samples required in a leaf.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\LSTINLINE{max\_features}$
\end_inset

: The number of features to consider at each split.
 Â  
\end_layout

\begin_layout Standard
The values of the arguments must be consistent and appropriate:
\end_layout

\begin_layout Itemize
Only if you choose to use the 
\begin_inset Formula $\LSTINLINE{max\_depth}$
\end_inset

 parameter (tree depth limit), you can use the 
\begin_inset Formula $\LSTINLINE{min\_samples\_leaf}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{min\_samples\_split}$
\end_inset

 parameters to prevent overfitting.
 
\end_layout

\begin_layout Itemize
Only if you choose to use the 
\begin_inset Formula $\LSTINLINE{max\_features}$
\end_inset

 parameter (feature number limit), you can use the 
\begin_inset Formula $\LSTINLINE{n\_estimators}$
\end_inset

 parameter (number of trees) to compensate for the decrease in diversity.
\end_layout

\begin_layout Standard
This example illustrates that a large number of arguments requires maintaining
 consistency according to specific rules.
\end_layout

\begin_layout Standard
The need to maintain consistency among the arguments stems from the phenomenon
 of 
\emph on
redundancy
\emph default
.
 Redundancy is an essential part of human communication style, but it can
 cause friction between user and software.
 For example, in the sentence "This coming Sunday, November 7th," the date
 is repeated twice: "This coming Sunday" and "November 7th." When developing
 an application with input of such messages, it is necessary to address
 potential conflicts or inconsistencies in the information, such as a situation
 where "This coming Sunday, November 7th" is entered, but "this coming Sunday"
 is not "November 7th." Possible consequences of this phenomenon include:
\end_layout

\begin_layout Itemize
Reducing redundancy, which can impair user experience.
 
\end_layout

\begin_layout Itemize
Bugs and difficulties in understanding the system when managing information
 consistency.
\end_layout

\begin_layout Subsection
Methods for Treating Cycles
\end_layout

\begin_layout Standard
Conventional methods of handling cycles, we would learn from 
\family typewriter
Microsoft Excel Spreadsheet
\family default
.
 In 
\family typewriter
Excel
\family default
, formulas are created in cells, referencing other cells.
 Any cell that contains a formula will contain values according to that
 formula.
 Therefore when a user updates a cell, any cell that refers to it in its
 formula, is updated in response.
 
\end_layout

\begin_layout Standard

\family typewriter
Excel
\family default
 prohibits cycles.
 However, this can be changed by configuration.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://support.microsoft.com/en-gb/office/change-formula-recalculation-iteration-
or-precision-in-excel-73fc7dac-91cf-4d36-86e8-67124f6bcce4
\end_layout

\end_inset

 If cycles are enabled, it should be customized how to break cycles.
 
\family typewriter
Excel
\family default
 offers two methods for breaking cycles: the first stopping after a customized
 number of iterations, and the second checking if a value hasn't changed
 or changed less than a set threshold.
\end_layout

\begin_layout Standard
The cycles treatment is reflected also through an SDK provided for developing
 plugins for 
\family typewriter
Microsoft Dynamics
\family default
.
 The SDK provides a property named 
\family typewriter
Depth
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://learn.microsoft.com/en-us/dotnet/api/microsoft.xrm.sdk.iexecutioncontext.depth
?view=dataverse-sdk-latest
\end_layout

\end_inset


\end_layout

\end_inset

 for plugins code.
 This property should help for a plugin that is re-executed as a result
 of its own execution.
 In such chains, the property 
\family typewriter
Depth 
\family default
contains a number that is increased in each execution.
 A developer can compare the value of 
\family typewriter
Depth
\family default
, and customizing a logic according to the iterations.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This helps to avoid an infinite loop, that each update message cause a plugin
 to exeute which in turn, call update, that cause again an update message
 and so on.
 The method to stop propagation according to changes detection, is typicaly
 provided as well.
 In most SDK, code have have access during the execution the old and new
 values, to be compared and detect changes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Normaly, depedancies causes
\end_layout

\begin_layout Plain Layout
We use FRP, data dependencies initate data flow.
 For example A:=B makes B to depends on A, and this makes a data flow from
 B to A.
 Consequently, representing data dependencies as edges have a direction
 reversed from edges representd the resulted dataflow.
 For example, the data deoendencies of A:=B seems A->B and the dataflow
 seems B<-A.
 Therefore, an incoming edge in dataflow inform a variable that depends
 on an expression, or that it is an input variable (updated by a user or
 any external input).
\end_layout

\begin_layout Plain Layout
Returning back to cycle's starting point, which is a node with two incoming
 edges.
 This inform one of two cases.
 First, a variable that is an input variable that also depends on an expression.
 Second, a variable that depends on two expressions simultaneously.
 For instance, a scenario where both 
\begin_inset Formula $\LSTINLINE{A:=B}$
\end_inset

 and 
\begin_inset Formula $\LSTINLINE{B:=A}$
\end_inset

 are present and 
\begin_inset Formula $\LSTINLINE A$
\end_inset

 is an input variable, from where values are propagated.
 Similarly, an addition of 
\begin_inset Formula $\LSTINLINE{A:=C}$
\end_inset

 while 
\begin_inset Formula $\LSTINLINE C$
\end_inset

 is the input variable.
 From this investigation, we find a new semantic to cycles as belonged to
 a broader concept, that any variable can depend on several expressions
 simultaneously.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Complex Systems
\end_layout

\begin_layout Standard
In another prespective, the latter design represents a 
\emph on
complex system
\emph default
.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://uwaterloo.ca/complexity-innovation/about/what-are-complex-systems
\end_layout

\end_inset


\end_layout

\end_inset

 Complex systems refer to real-world systems that when researched, it is
 difficult to investigate their each individual component's behavior.
\end_layout

\begin_layout Subsection
Feedback Loops
\end_layout

\begin_layout Standard
Recursively, each component might be affected by other components.
 The behavior is not linear because those effects might produce 
\emph on
feedback loops
\emph default
.
 Feedback loop means that an effect in one component, produces a chain of
 effects through several components, which again produce affect on the first
 component (therefore the name, feed back), which sometimes lead to continue
 the chain, sometimes leading the chain to not finish endlessly.
 From prespective of data or variables, a change in one variable causes
 transitively (through chain of changes) this same variable to again change
 its value causing again waves of changes.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
(, where 
\begin_inset Quotes eld
\end_inset

wholes that are more than the sum of their parts
\begin_inset Quotes erd
\end_inset

.
 This is similar to component-based applications, in cases when behavior
 is not predictable by looking at each of its individual component separately.)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Superposition Property
\end_layout

\begin_layout Standard
The superposition property means lineraity, i.e., for a set of components
 the sum of behaviors from each of the components seperatedly are equal
 to the sum produced from the behavior produced tegather.
 The behavior of component 
\begin_inset Formula $x$
\end_inset

 is denoted as 
\begin_inset Formula $F(x)$
\end_inset

, where its behavior represent the updates in its variables according phenomena.
 For example, any given pair of components 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

, superposition property ensures that 
\begin_inset Formula $F(x_{1}+x_{2})=F(x_{1})+F(x_{2})$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Applications composed of many components are called 
\emph on
complex
\emph default
 if their behavior are not predictable by looking at each of their individual
 component separately.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Indpisred from research field named 
\emph on
complex systems.
\end_layout

\end_inset

 The complexity is happened due to 
\emph on
feedback loops
\emph default
.
 Feedback loops means an effect in one component, produces a chain of effects
 through several components, which again produce affect on the first component
 (therefore the name, feed back), which sometimes lead to continue the chain,
 sometimes leading the chain to not finish endlessly.
 From prespective of data or variables, a change in one variable causes
 transitively (through chain of changes) this same variable to again change
 its value causing again waves of changes.
\end_layout

\begin_layout Plain Layout
We expect
\emph on
 
\emph default
applications
\emph on
 to
\emph default
 satisfy the 
\emph on
superposition
\emph default
 property.
 The superposition property is closed to 
\emph on
lineraity
\emph default
, i.e., for a set of components the sum of behaviors from each of the components
 seperatedly are equal to the sum produced from the behavior produced tegather.
 The behavior of component 
\begin_inset Formula $x$
\end_inset

 is denoted as 
\begin_inset Formula $F(x)$
\end_inset

, where its behavior represent the updates in its variables according phenomena.
 For example, any given pair of components 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

, superposition property ensures that 
\begin_inset Formula $F(x_{1}+x_{2})=F(x_{1})+F(x_{2})$
\end_inset

.
\end_layout

\begin_layout Plain Layout
â
\end_layout

\begin_layout Plain Layout
A GUI application is like a 
\emph on
complex system
\emph default
,
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://uwaterloo.ca/complexity-innovation/about/what-are-complex-systems
\end_layout

\end_inset

 if the behavior of the application as a whole is not predictable by looking
 at each of its individual stateful component separately.
 This thesis aims to stop GUI applications from being complex by handling
 efficiently 
\emph on
feedback loops
\emph default
, where during components interaction, a change in one variable leads to
 a subsequent change that feeds back and affects the original variable itself.
 
\end_layout

\begin_layout Plain Layout
Inspired from the complex system research field, we adapt the 
\emph on
superposition
\emph default
 property, achievable through handling feedback loops.
 The behavior of component 
\begin_inset Formula $x$
\end_inset

 is denoted as 
\begin_inset Formula $F(x)$
\end_inset

, where its behavior represent the updates in its variables according phenomena.
 For any given pair of components 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

, superposition property ensures that 
\begin_inset Formula $F(x_{1}+x_{2})=F(x_{1})+F(x_{2})$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Cycles (in dependencies) in their existence or in their avoidance means
 a nonfunctional requirement.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Also, cycles has been called 
\emph on
accidental recursion
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

.
 Accidental means complexity that is not inherent in the problem that the
 software solves (as seen by the users) but rather undesirably forced from
 the implementation 
\begin_inset CommandInset citation
LatexCommand cite
key "moseley2006out"
literal "false"

\end_inset

.
\end_layout

\end_inset

 This has been presented by the 
\family typewriter
Drug Administration
\family default
 application with a traditional design (procedural) and with OOP.
 As presented, traditionalt it has been designed for hierarchical dependencies,
 tangled with difficulties in user and developer experience.
 With OOP, there are cycles in the dependencies, without a conventional
 method that handles them correctly.
\end_layout

\end_body
\end_document
