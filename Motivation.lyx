#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{algorithm,algpseudocode}
\usepackage{pgf-umlsd}
\usepackage{listings}
\lstset{numbers=left, numberstyle=\tiny, numbersep=5pt, numberfirstline=true, firstnumber=1, stepnumber=1}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Motivation"

\end_inset

Motivation
\end_layout

\begin_layout Standard
This thesis is motivated by the need to enhance the 
\family typewriter
Order Entry
\family default
,
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
known as Computerized Provider Order Entry (CPOE).
\end_layout

\end_inset

 one of the main windows in MetaVision, an healthcare system provided by
 iMDsoft.
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.imd-soft.com
\end_layout

\end_inset


\end_layout

\end_inset

 The 
\family typewriter
Order Entry
\family default
 is a window where drugs prescriptions and administrations are documented.
 The 
\family typewriter
Order Entry
\family default
 is represented in this thesis by a small application example depicted in
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 The application is named Drug Administration and contains the following
 fields:
\end_layout

\begin_layout Description
Drug relates to amount of medication/drug administered to a patient, (e.g.
 20 mg).
\end_layout

\begin_layout Description
Volume relates to Infusion fluid volume.
 An Infusion injects the medication into the patients body, by mixing the
 Drug with fluids (e.g., 20 ml).
\end_layout

\begin_layout Description
Concentration amount of the 
\series bold
Drug
\series default
 per 
\series bold
Volume
\series default
 (e.g.
 0.5 mg/ml).
\end_layout

\begin_layout Description
Rate relates to 
\series bold
Volume
\series default
 flow administered into the patients body per time unit (e.g., 20 ml per hour).
\end_layout

\begin_layout Description
Dose (or Dosage) 
\series bold
Drug
\series default
 administered into the patients body per time unit (e.g., 20 mg per hour).
\end_layout

\begin_layout Description
Duration relates to the duration from starting the injection until stopping
 it.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tabular}{|c c c| }    
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

Drug & Concentration & Volume 
\backslash

\backslash
   
\end_layout

\begin_layout Plain Layout


\backslash
framebox(35,15){
\backslash
textit{100}} & 
\backslash
framebox(35,15){
\backslash
textit{0.33}} & 
\backslash
framebox(35,15){300} 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

 Dose & Duration & Rate 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

 
\backslash
framebox(35,15){10} & 
\backslash
framebox(35,15){10} & 
\backslash
framebox(35,15){
\backslash
textit{30}} 
\backslash

\backslash
  
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout


\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

Drug Administration, contains the following fields:
\end_layout

\begin_layout Plain Layout


\backslash
begin{description}      
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Drug
\begin_inset Quotes erd
\end_inset

] relates to amount of medication/drug administered to a patient, (e.g.
 20 mg).
    
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Volume
\begin_inset Quotes erd
\end_inset

] relates to Infusion fluid volume.
 An Infusion injects the medication into the patients body, by mixing the
 Drug with fluids (e.g., 20 ml).
 
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Concentration
\begin_inset Quotes erd
\end_inset

] amount of the 
\backslash
textbf{Drug} per 
\backslash
textbf{Volume} (e.g.
 0.5 mg/ml).
  
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Rate
\begin_inset Quotes erd
\end_inset

] relates to 
\backslash
textbf{Volume} flow administered into the patients body per time unit (e.g.,
 20 ml per hour).
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Dose
\begin_inset Quotes erd
\end_inset

 (or Dosage)] 
\backslash
textbf{Drug} administered into the patients body per time unit (e.g., 20 mg
 per hour).
\end_layout

\begin_layout Plain Layout


\backslash
item[
\begin_inset Quotes eld
\end_inset

Duration
\begin_inset Quotes erd
\end_inset

] relates to the duration from starting the injection until stopping it.
  
\end_layout

\begin_layout Plain Layout


\backslash
end{description}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-calculations-1"

\end_inset


\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Drug Administration.
\end_layout

\end_inset

 Drug Administration.
 The fields are illustrated with example values, in case the user sets Volume,
 Dose and Duration.
 The fields Drug, Concentration, and Volume are displayed in italic typeface
 to indicate that these values are calculated based on the set values.
\begin_inset Note Note
status open

\begin_layout Plain Layout
User interface component for drug administration.
 The upper panel represents the bag component, and the lower panel represents
 the pump component.
 The fields are illustrated with example values, in case the user sets Volume,
 Dose and Duration.
 The fields Drug, Concentration, and Volume are displayed in italic typeface
 to indicate that these values are calculated based on the set values.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
.
 The application is depicted in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
with 6 fields, depicted in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, named Drug Administration.
\end_layout

\begin_layout Plain Layout
This thesis is driven by the need to enhance calculations in GUI, in order
 to improve the user experiences.
 Specifically in healthcare, it is desirable to solve usability problems
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "gawande2018doctors"
literal "false"

\end_inset

.
 Some concepts will be simplified by the following Drug Administration applicati
on (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), used along this thesis.
 In the Drug Administration, there are several options to define the quantities:
 either by 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 or by 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In the first option, 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 is calculated based on 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while in the second option, 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 is calculated based on the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This thesis is driven by the need to enhance user experiences in UI (User
 Interface) and front-end applications.
 A fundamental aspect of this enhancement lies in the realm of field calculation
s.
 Fields calculations means maintaining consistency in field values.
 When users fill in one field, it is essential to recalculate the values
 of other related fields.
 For example, in Drug Administration (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), there are several options to define the quantities: either by 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 or by 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In the first option, 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 is calculated based on 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while in the second option, 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 is calculated based on the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
\end_layout

\begin_layout Plain Layout
——
\end_layout

\begin_layout Plain Layout
This thesis aims to establish an effective mechanism for field calculations,
 enhancing user experience in User Interfaces and frond-end applications.
 Field calculations refer to the process of maintaining consistency in field
 values.
 When users input data into one field, it is essential to recalculate the
 values of other related fields.
 
\end_layout

\begin_layout Plain Layout
This thesis is focused on creating an effective mechanism in fields calculations
 to achive a better user experience in UI or drone ends applications.
 Fields calculations means Maintaining consistency in field values.
 When users fill in one field, it is essential to recalculate the values
 of other related fields.
 For example, in Drug Administration (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), there are several options to define the quantities: either by 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 or by 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In the first option, 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 is calculated based on 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while in the second option, 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 is calculated based on the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Maintaining consistency in field values might be crucial in front ends applicati
ons.
 When users fill in one field, it is essential to recalculate the values
 of other related fields.
 For example, in Drug Administration (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

), there are several options to define the quantities: either by 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 or by 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In the first option, 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 is calculated based on 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while in the second option, 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 is calculated based on the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Repeating on code resists against the code changes for two reasons: First,
 because efforts need to be keep on the rules consistency.
 Second, it adds more lines of code to the application.
\end_layout

\begin_layout Plain Layout
The inefficiency experienced by legacy applications in the market lies in
 the timeconsuming process of implementing changes.
 One contributing factor is the limited cognitive capacity of developers
 when it comes to analyzing the extensive details within the application
 source code, dealing with large code bases and code repetition.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Exploring the Useability
\end_layout

\begin_layout Plain Layout
An efficient mechanism to develop fields calculations has a potenstial to
 improve front ends usability.
 Specificaly, in applications for healthcare, it is desirable to solve usability
 problems 
\begin_inset CommandInset citation
LatexCommand cite
key "gawande2018doctors"
literal "false"

\end_inset

.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Adding Redundant Filling Options
\end_layout

\begin_layout Standard
Among the fields 
\begin_inset Formula $\NAME{Drug}$
\end_inset

, 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

, only two of them are required for documenting drugs' amount.
 Users can, for example, define quantities by setting only the 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In such a case, the value of 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 is computed.
 Additionaly, users can define quantities by setting only the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In such a case, the value of 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 is computed.
\end_layout

\begin_layout Standard
Adding such redundancy can have a positive impact on the user experience.
 If only one option is available, users are stricted: users must define
 amounts in the terms used in the Order Entry.
 There are drugs for whom it is easier to define quantities by setting 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while for other drugs, by setting 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

.
 Consequently, for some drugs users are forced to
\emph on
 convert the numbers
\emph default
, i.e., to compute it according to an appropiate formula.
 For example, in case that the available fields are 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, and an amount is 
\begin_inset Formula $0.5$
\end_inset

 and 
\begin_inset Formula $100$
\end_inset

 for 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, a formula 
\begin_inset Formula $Concentration\times Volume$
\end_inset

 is used to compute the value of 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 to set.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the Order Entry, setting 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 triggers calculation in 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

.
 Similary, setting 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 triggers calculation in 
\begin_inset Formula $\NAME{Drug}$
\end_inset

.
 One might think that the Order Entry should contain only two of the triple.
 The third field is redundant, as it can be calculated from the other fields
 when needed.
 
\end_layout

\begin_layout Plain Layout
However, there are drugs for whom it is easier to define quantities by setting
 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while for other drugs, by setting 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

.
 In case that only one option is available, there are cases when the user
 need to
\emph on
 convert the numbers
\emph default
, i.e., take the tuple in mind and compute it according to an appropiate formula.
 For example, in case that the available fields are 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and the user has in mind 
\begin_inset Formula $0.5$
\end_inset

 and 
\begin_inset Formula $100$
\end_inset

 for the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, then the user need to compute 
\begin_inset Formula $Concentration\times Volume$
\end_inset

 for the 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 to fill.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
———-
\end_layout

\begin_layout Plain Layout
By far we discovered the technical complexity in creating fields calculations.
 This might lead some to develop applications without (or to reduce) fields
 redandencies, so that we need not to handle the consistency in field values.
 Holding data once is more efficient for computers, and it takes time and
 resources to handle calculations and avoid inconsistencies.
 Programmers may think like computers and ignore the need of users for redundanc
ies.
 This is also supported by the argument that front-end applications should
 be minimalistic to avoid overwhelming users with too many elements on the
 screen (as mentioned in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Cognitive-load"
plural "false"
caps "true"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Plain Layout
However, in contrast to the computers, humans need redundancies by nature.
 Humans possess multiple channels of information, and tend to choose the
 one that is most convenient for the specific task.
 Consider the Drug Administration UI.
 For some drugs, it is easier to define the quantities by setting 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while for other drugs, it is easier to administer by specifying the 
\begin_inset Formula $\NAME{Volume}$
\end_inset

 and 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

.
 If only the first option is available, the user must calculate the necessary
 drug values to achieve the desired concentration.
\end_layout

\begin_layout Plain Layout
The need for redundancies is even broader.
 Generally, we think differently.
 Some individuals find it easier to use different channels of perception
 than others.
 Therefore, different people require different options for a single task.
 Different options also help validate our understanding by utilizing multiple
 channels and cross-checking information.
 
\end_layout

\begin_layout Plain Layout
Yet popular technologies have already populated features for efficiently
 creating derived data labels like in FRP.
 In the case mentioned above (regarding Drug Administration), this functionality
 can assist users who need to calculate the necessary drug values to achieve
 the desired concentration.
 
\end_layout

\begin_layout Plain Layout
The missing feature is the ability to easily add various input options,
 allowing the values of other fields to be calculated based on the user's
 input.
 Otherwise, applications become complex and not user-friendly, forcing users
 to adopt a different way of thinking.
 Instead of struggling to understand the application's logic, users expect
 the computer to understand their intentions.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The missing function is to easily add various input options, so that depending
 on the fields the user fills, the values of other fields will be calculated.
 Otherwize, the Applications become complex and not user-friendly, because
 they force the user to think differently.
 instead of that the users need to learn the use cases implemented in the
 application (they work hard to understand the computers), they expect that
 the computers understand them.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Sometimes, certain information holds more weight, and our brains naturally
 consider this weighted input.
\end_layout

\begin_layout Plain Layout
Unlike computers, which analyze information in binary terms, humans perceive
 nuances derived from.
 For us, saying 'no' is different from saying 'no no.' Expanding technological
 options in this direction could lead us to a more user-friendly UX, the
 full potential of which we are yet to fully comprehend.
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "subsec:Cognitive-load"

\end_inset

Reducing Cognitive load
\end_layout

\begin_layout Standard
Another form of redundancy causes negative impact.
 As depicted in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Order-Entry"
plural "false"
caps "true"
noprefix "false"

\end_inset

 there are more fields.
 From clinical prespective, the additional elements do not contain a meaningful
 information.
 The first element, a field named 
\family typewriter
ordering style
\family default
, users can select an option 
\family typewriter
set concentraion and volume
\family default
, and another option, 
\family typewriter
set dose and rate
\family default
.
 According to the selected option, fields become editable or readonly, controlin
g the calculations directions.
 If the user selects 
\family typewriter
set concentraion and volume
\family default
, those fields become editable, and the other fields will be calculated
 accordingly.
 If the user selects 
\family typewriter
set dose and rate
\family default
, those fields become editable, and the other fields will be calculated
 accordingly.
 
\end_layout

\begin_layout Standard
Additionaly, there are elements named 
\family typewriter
locker
\family default
 use to 
\emph on
lock
\emph default
 or 
\emph on
unlock
\emph default
 fields.
 Locking means that the field's value would be calculated according to other
 fields' values, whereas unlocking means that the field becomes editable.
 The lockers are similar to toggle buttons, each click changes from the
 previous state locked from being unlocked and vice versa.
 Among the six fields, three of the fields should be set by the user and
 the others should be calculated.
 Therefore, unlocking one field causes another field to be locked instead.
 Selecting 
\family typewriter
ordering style
\family default
 initiates the state of the lockers, what is locked and what is unlocked.
 Lockers of fields that are unlocked according to the ordering style, cannot
 be locked.
 For example, if the selected ordering style is 
\family typewriter
set concentration and volume
\family default
, concentration and volume are unlocked and cannot be locked.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
locker}[1]{
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

    % Draw the body of the lock
\end_layout

\begin_layout Plain Layout

    
\backslash
draw (0,0) rectangle (#1,#1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % Draw the shackle (the curved part of the lock)
\end_layout

\begin_layout Plain Layout

    
\backslash
draw (#1, #1) arc (0:180:#1/2);
\end_layout

\begin_layout Plain Layout

  
\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
openedlocker}[1]{
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

    % Draw the body of the lock
\end_layout

\begin_layout Plain Layout

    
\backslash
draw (0,0) rectangle (#1,#1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % Draw the shackle (the curved part of the lock)
\end_layout

\begin_layout Plain Layout

    
\backslash
draw (#1, #1) arc (0:130:#1/2);
\end_layout

\begin_layout Plain Layout

  
\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tabular}{|c c c| }  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
multicolumn{3}{ |l|}{ordering style }  
\backslash

\backslash
   
\end_layout

\begin_layout Plain Layout


\backslash
multicolumn{3}{ |l|}{
\backslash
framebox(130,15){set Dose and Rate {$
\backslash
nabla$}}}
\end_layout

\begin_layout Plain Layout

 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

Drug & Concentration & Volume 
\backslash

\backslash
   
\end_layout

\begin_layout Plain Layout


\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
locker{0.25}} & 
\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
locker{0.25}} & 
\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
locker{0.25}} 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

 Dose & Duration & Rate 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

 
\backslash
framebox(35,15){ } 
\backslash
framebox(10,15){
\backslash
locker{0.25}}& 
\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
locker{0.25}}& 
\backslash
framebox(35,15){} 
\backslash
framebox(10,15){
\backslash
openedlocker{0.25}} 
\backslash

\backslash
  
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout


\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Order-Entry"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Drug Administration - Full Version.
\end_layout

\end_inset

 At the top, there is the Ordering Style field, represented by a combobox,
 where users can select from the available options.
 Below this, each field consists of a label above its name, an area to display
 its value, and a lock icon on its right.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The additional elements are needed for controling the calculations, however
 they increase the amount of mental effort and processing capacity needed
 to understand and use the window.
 In order to help the users, hospitals (MetaVision's customers) own 
\emph on
templates
\emph default
 that contain pre filled values, 
\begin_inset Quotes eld
\end_inset

a setup
\begin_inset Quotes erd
\end_inset

 to specific cenarios.
 In such a case, the users should search and find the appropiate setup or
 the specific cenario covered by the individual application.
 This is named 
\emph on
navigations.
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "roman2017navigation"
literal "false"

\end_inset

 The users might be overwhelmed by the available options 
\begin_inset CommandInset citation
LatexCommand cite
key "roman2017navigation"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Subsection
Elements Amount
\end_layout

\begin_layout Plain Layout
In the Order Entry in MetaVision, there is a field selection named 
\emph on
ordering style
\emph default
 that contains options like 
\begin_inset Quotes eld
\end_inset

set concentraion and volume
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

set dose and rate
\begin_inset Quotes erd
\end_inset

.
 According to the selection option, fields become editable or readonly,
 controling the calculations directions.
 If the user select 
\begin_inset Quotes eld
\end_inset

set concentraion and volume
\begin_inset Quotes erd
\end_inset

, those fields become editable, and the other fields will be calculated
 accordingly.
 There are also elements named 
\emph on
locker
\emph default
 to 
\emph on
lock
\emph default
 or 
\emph on
unlock
\emph default
 fields.
 locking a field means that the field's value would be calculated according
 to other fields' values, while unlocking means that the field becomes editable
 makeing other fields to be calculated.
 
\end_layout

\begin_layout Plain Layout
Those elements, added to the screen to control the calculations flow, have
 a cost of adding complexity to the users.
 The Order Entry is a very large and complex window.
 The users need long training in order to effectively use it.
 The application should be carefuly used because there might be errors in
 using it.
 In order to improve useability, we need the screen to contain less information.
 
\end_layout

\begin_layout Subsection
Navigations
\end_layout

\begin_layout Plain Layout
In order to help the users, hospitals own 
\emph on
templates
\emph default
 that contain pre filled values, 
\begin_inset Quotes eld
\end_inset

a setup
\begin_inset Quotes erd
\end_inset

 to specific cenarios.
 In such a case, the users should search and find the appropiate setup or
 the specific cenario covered by the individual application.
 This is named 
\emph on
navigations
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "roman2017navigation"
literal "false"

\end_inset


\emph on
.

\emph default
 The users might be overwhelmed by the available options.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
It tends to create small precize components or applications, each solves
 a specific use case.
 Another existing directions: to use 
\emph on
templates
\emph default
.
 The templates contain pre filled values, 
\begin_inset Quotes eld
\end_inset

a setup
\begin_inset Quotes erd
\end_inset

 to specific cenarios.
 In such a case, the users should search and find the appropiate setup or
 the specific cenario covered by the individual application.
 This is named 
\emph on
navigations
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "roman2017navigation"
literal "false"

\end_inset


\emph on
.

\emph default
 The users might be overwhelmed by the available options.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Fast Feedback Loop
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The diffrent combinations to set the fields causes diffrent ways to calculate
 the fields.
 For example, if Dose are Duration is set, Drug's value are calcuated by
 div the value of Dose by the value of Duration.
 if Dose, Volume an Rare are set, then Drug's value is calcualted by 
\end_layout

\begin_layout Plain Layout
Focusing on Drug, there are the following ways:
\end_layout

\begin_layout Itemize
Dose/Duration
\end_layout

\begin_layout Itemize
Dose/(Volume*Rate)
\end_layout

\begin_layout Plain Layout
For example, 
\end_layout

\begin_layout Plain Layout
There are several ways by which Drug's value are calculated.
 The way in which it will be calculated depends on which fields 
\end_layout

\begin_layout Plain Layout
Depending on which fields the user set, the way in which field Drug are
 calculated, are changed.
\end_layout

\begin_layout Description
hh if 
\end_layout

\begin_layout Plain Layout
———
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to enhance the Order Entry, it should be easy to make changes according
 to feedback from users.
 We present an example around the field Drug and another field named Alert.
 The field 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 indicates whether the application should trigger an alert for abnormal
 medication amounts.
 Using FRP style, a relationship is to established between 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

, enabling the automatic determination of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 based on the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

Amount=FromInput()
\end_layout

\begin_layout Plain Layout

Alert=IsAbnormal(Amount)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code needs to be modified (indicated using bold font style) when the
 doctor administers the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Volume}
\end_layout

\end_inset

 in order to calculate the resulting amount.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none]  
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput()
\end_layout

\begin_layout Plain Layout

__AmountByConcentrationAndVolume=Concentration*Volume__ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),__IsAbnormal(AmountByConcentration AndVolume)
__)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the doctor administers the medication by setting the values of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

, the medication amount can be calculated using the formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose*Duration}
\end_layout

\end_inset

.
 In this scenario, it is necessary to update the code accordingly.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=none] 
\end_layout

\begin_layout Plain Layout

AmountByInput=FromInput() 
\end_layout

\begin_layout Plain Layout

AmountByConcentrationAndVolume=Concentration*Volume __AmountByDoseAndDuration=Do
se*Duration__ 
\end_layout

\begin_layout Plain Layout

Alert=Or(IsAbnormal(AmountByInput),
\end_layout

\begin_layout Plain Layout

IsAbnormal(AmountByConcentrationAndVolume),
\end_layout

\begin_layout Plain Layout

__IsAbnormal(AmountByDoseAndDuration)__) 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is evident that whenever additional sources of values are required for
 the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 variable, it becomes necessary to update the assignment of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 variable.
 For large applications, there might be many updates, which makes it un-easy
 to make such a change.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
It is evident that whenever additional sources of values are required for
 the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 variable, it becomes necessary to update the assignment of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 variable.
 Overlooking such updates leads to inconsistencies between the values of
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
——–
\end_layout

\begin_layout Plain Layout
—-
\end_layout

\begin_layout Plain Layout
In order to enhance the Order Entry, it should be easy to make changes according
 to feedback from users.
 However, even in the small size Drug Administration, adding a single field
 requires adding it 5 times.
 
\end_layout

\begin_layout Plain Layout
The Drug Administration support several use-cases.
 For example, the user selects 
\begin_inset Quotes eld
\end_inset

set concentration and volume
\begin_inset Quotes erd
\end_inset

 and lock the Dose.
 In this case, Drug is computed from concentration and volume.
 The user can also lock volume, so that the volume will be computed according
 to the rate, and then the drug is computed from the concentration and volume.
 The are 5 diffrent options to how Drug is computed.
\end_layout

\begin_layout Plain Layout
In the Order Entry, there is a concept, we named 
\emph on
alter
\emph default
, that the user should be protected from documenting abnormal medication
 amount.
 If we add field Alert, to be calculated according to Drug, the code should
 be specified 5 times, according to the amount of options.
\end_layout

\begin_layout Plain Layout
If we add a field named 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 indicates whether the application should trigger an alert for abnormal
 medication amounts.
 A formula is employed to establish a relationship between 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

, enabling the automatic determination of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Alert}
\end_layout

\end_inset

 based on the value of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Amount}
\end_layout

\end_inset

.
\end_layout

\begin_layout Plain Layout
Adding a field that its value depend on the value of Drug, requires 
\end_layout

\begin_layout Plain Layout
In order to enhance the Order Entry, it should be easy to make changes according
 to feedback from users.
 However, even in The Drug Administration 
\end_layout

\begin_layout Plain Layout
However, even in the small example of the Drug Administration, changes seems
 hard.
\end_layout

\begin_layout Plain Layout
In implementing the Drug Administration, there are multiple use cases to
 handle.
 
\end_layout

\begin_layout Plain Layout
Regarding the 
\begin_inset Quotes eld
\end_inset

good
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

bad
\begin_inset Quotes erd
\end_inset

 redandancy, the developers need to provide the application fast.
 In order to enhance the Order Entry, it should be easy to make changes
 according to feedback from users.
 However, even in the small example of the Drug Administration, changes
 seems hard.
\end_layout

\begin_layout Plain Layout
Considering a procedural solution, a procedure 
\begin_inset Formula $\LSTINLINE{calculate}$
\end_inset

, depicted in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Centerlized-Calculation-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, keeps values of the fields consistent, .
 This procedure is called whenever the user updates the value of any of
 the fields.
 Depending on the fields that the user edits, the other fields are calculated.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume1}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume2}
\end_layout

\end_inset

 are the same.
\end_layout

\begin_layout Plain Layout
Beside the issue that values are calculated, even when their fields are
 unchanged, statements are repeated.
 as seen in 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume1}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume2}
\end_layout

\end_inset

.
\end_layout

\begin_layout Plain Layout
The code repetition reduces the user experience.
 In order to enhance the Order Entry, it should be easy to make changes
 according to feedback from users.
 However, code repetition makes the changes be difficult, because code repetitio
n leads to continue the repetition also in the changes.
 This expands the change be repaeted accoding to the existing repetition.
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

If edited triple is of Dose,  Duration, and Volume
\end_layout

\begin_layout Plain Layout

  Drug = Dose*Duration
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/Volume |
\backslash
label{line:concentrationByDrugAndVolume1}|
\end_layout

\begin_layout Plain Layout

  Rate = Volume/Duration
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Drug, Dose, and Rate
\end_layout

\begin_layout Plain Layout

  Duration = Drug/Dose
\end_layout

\begin_layout Plain Layout

  Volume = Duration*Rate 
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/Volume |
\backslash
label{line:concentrationByDrugAndVolume2}|
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Concentration,  Volume, and Duration
\end_layout

\begin_layout Plain Layout

  Drug = Volume*Concentration
\end_layout

\begin_layout Plain Layout

  Rate = Volume/Duration 
\end_layout

\begin_layout Plain Layout

  Dose = Drug/Duration
\end_layout

\begin_layout Plain Layout

End If
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Centerlized-Calculation-1-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Drug administration calculation.
\end_layout

\end_inset

Drug administration calculation.
 The code shows how to calculate the values of the fields based on different
 combinations of three input fields.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The add of the elements increaes the Cognitive load not only for the users
 but also for the developers.
 ForAny Redandant element 
\end_layout

\begin_layout Plain Layout
To ensure a positive user experience, UX researchers must gather continuous
 feedback from the application's users.
 They should conduct A/B testing by creating multiple variants for a single
 feature and analyze the best one based on the statistical results collected
 from the users 
\begin_inset CommandInset citation
LatexCommand cite
key "hartson2012ux"
literal "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
However, in traditional applications, it is difficult to make UX processes.
 This is because that over time, the applications code become hard to change,
 or that it takes more time to do the changes 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 We face procedural programming with long chain of updates, where changing
 the source code of one component might lead to subsequent changes in the
 source code of other components, producing long chain of code updates.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In one of the approaches, the delivery speed is improved by seperating the
 applications for small size components.
 However, as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Background"
plural "false"
caps "true"
noprefix "false"

\end_inset

, new calculations for existing fields (establishing dependencies to update
 fields based on changes in other fields) are required to be in the same
 component to ensure that the calculations are correct, that there are no
 cycles, or that cycles are handled correctly.
 (in order to establish transitive dependencies, if we should ensure that
 there is no cycle, we should stay in the same component)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Over the frameworks, it is challenged to coordinate the field calculation
 behaviors, particularly when establishing dependencies to update fields
 based on changes in other fields.
 This process requires careful consideration of transitive dependencies.
 Otherwise, unintentional recursion can lead to unexpected updates.
 For predictable addition of calculations, it is required that they be in
 the same class or component to ensure that the calculations are correct,
 that there are no cycles, or that cycles are handled correctly.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
This thesis is motivated by the necessity to enhance the calculation mechanism
 in the field in three aspects: (1) adding redundant filling options, (2)
 reducing cognitive loads caused by extra fields and navigations resulting
 from poor designs, and finally, (3) improving delivery speed.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Adding redundancies in the user interfaces have the cost of the need to
 keep on the consistency of the values according to the user input.
 However, according to the exploration, this might require redundancies
 in the code, with the cost of the need to keep on its consistency.
 This problem leads us to reduce redundancies in the user interfaces, although
 it may improve their usability.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
, that the developers need to keep on its consistency
\end_layout

\begin_layout Plain Layout
An efficient mechanism promotes the use of redundancies in the user interfaces.
 However this causes the time-consuming process of implementing changes.
 One contributing factor is the limited cognitive capacity of developers
 when it comes to analyzing the extensive details within the application
 source code.
 Another factor is the need to keep on the rules consistency, in case that
 the coded rules are repeated.
 The two factors depend on code repetition which might always exist.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
There are some reasons to list in favor of redundancies.
 Generaly, human brain consider wgited information.
 sats 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 is diffrent that sayg 
\begin_inset Quotes eld
\end_inset

no no
\begin_inset Quotes erd
\end_inset

.
 In addition, we have mutiple channels of information, and we use the one
 that is easier for us in the specific case.
 For instance, in Drug Administration with the fields 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 Sometimes it is easier to administaer the drug by the volume and concentration.
 Then he or she need to calculate the values for the drug to get the desired
 concentration.
 
\end_layout

\begin_layout Plain Layout
In addition, the people are difffrent.
 There are people taht some chanels are waeker than the other chanel.
 That people find it easier to use one channel more the other.
 We used to validate ouself by the use of the diffrent chanels with cross
 checking.
\end_layout

\begin_layout Plain Layout
——–
\end_layout

\begin_layout Plain Layout
For instance, in Drug Administration, there are drugs, where it is easier
 to set the 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while in others it is easier to set by the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In case that there are only the fields for 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, for a desired 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 the user need to calculate what values to fill.
\end_layout

\begin_layout Plain Layout
Actualy we recognize the technalogy SSOT
\end_layout

\begin_layout Plain Layout
Humans have much more complex brain, that takes decision based on weights
 data.
 Says 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 in human is not the same as saying 
\begin_inset Quotes eld
\end_inset

no no
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Plain Layout
which works resulary against need Redundancies by nature.
\end_layout

\begin_layout Plain Layout
We need sometimes to repeat messages
\end_layout

\begin_layout Plain Layout
In front ends the two sides should interact
\end_layout

\begin_layout Plain Layout
For computers, Redundancies in data might lead to inconsistency, because
 
\end_layout

\begin_layout Plain Layout
Redundancies in front ends applications might lead to Cognitive loads, 
\end_layout

\begin_layout Plain Layout
Redundancies in front ends applications improves the usability, because
 the user is not enforced to one strict representation.
 For instance, in Drug Administration, there are drugs, where it is easier
 to set the 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, while in others it is easier to set by the 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

.
 In case that there are only the fields for 
\begin_inset Formula $\NAME{Drug}$
\end_inset

 and 
\begin_inset Formula $\NAME{Volume}$
\end_inset

, for a desired 
\begin_inset Formula $\NAME{Concentration}$
\end_inset

 the user need to calculate what values to fill.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
As from this exploration, we could not provide one single source of truth
 for the organization's business logic, because we could not prevent the
 repetition of business logic.
\end_layout

\begin_layout Plain Layout
In the explored architectural designs, we could not provide one single source
 of truth for the organization's business logic, because we could not prevent
 the repetition of business logic.
 We recognize in the exploration three patterns of code duplication.
 First, calling to update variables in various locations, such as in response
 to events.
 Second, multiple variables to represent a single real-world variable.
 Finaly, cloning code to not affect existing clients.
 
\end_layout

\begin_layout Section
Code Reuse
\end_layout

\begin_layout Plain Layout
we recognize in the exploration three patterns of code duplication.
 First, calling to update variables in various locations, such as in response
 to events.
 Second, multiple variables to represent a single real-world variable.
 Finaly, cloning code to not affect existing clients.
\end_layout

\begin_layout Plain Layout
The abstraction mechanisms that can be suggested to not clone components
 are the inheritance and composition from the OOP paradigm.
 However, as it has long been recognized 
\begin_inset CommandInset citation
LatexCommand cite
key "duncan2003component"
literal "false"

\end_inset

, there is a challenge in managing data dependencies between parent and
 child classes (similary is the case in composition).
 When classes and their subclasses maintain their own variables, there is
 a risk of 
\emph on
object re-entrance
\emph default
, where an object indirectly calls another object that then calls it back.
 In subsequent calls, the variables may be inconsistent because the execution
 has not finished.
 
\end_layout

\begin_layout Plain Layout
To avoid such problems, developers need to carefully define contracts between
 classes and their subclasses, to the consumers of services or any components-ba
sed technalogy.
\end_layout

\begin_layout Plain Layout
It is recommeneded to design them with well-defined responsibilities 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

, and that the separation to responsibilities will be aligned with the business
 needs 
\begin_inset CommandInset citation
LatexCommand cite
key "evans2004domain"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Plain Layout
Our approach effectively addresses the issue of inheritance 
\begin_inset CommandInset citation
LatexCommand cite
key "salvaneschi2014towards"
literal "false"

\end_inset

, which has long been recognized as a challenge in managing data dependencies
 between parent and child classes 
\begin_inset CommandInset citation
LatexCommand cite
key "duncan2003component"
literal "false"

\end_inset

.
 When classes and their subclasses maintain their own variables, there is
 a risk of 
\emph on
object re-entrance
\emph default
, where an object indirectly calls another object that then calls it back.
 In subsequent calls, the variables may be inconsistent because the execution
 has not finished.
 To avoid such problems, developers need to carefully define contracts between
 classes and their subclasses.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Plain Layout
In the explored architectural designs, we could not prevent the repetition
 of business logic.
 This means that there is no one single source of truth for the organization's
 business logic.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Reusable components reduce code redandcy in case of creating applications
 based on existing ones.
\end_layout

\begin_layout Plain Layout
Therefore, it is highly preferable to design reusable components.
 This is where our framework, with its dedicated propagation algorithm,
 outperforms constraint systems for GUI.
 We have specifically created examples
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/RivkaAltshuler/RIvar
\end_layout

\end_inset


\end_layout

\end_inset

 for reusable classes and user controls.
 In contrast, when using Hotdrink, we generate a single block of code that
 is managed by a centralized algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "marheim2017domain"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
An efficient mechanism need to inherently support for developing business
 rules without repetition, as a 
\emph on
single source of truth
\emph default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The programming paradigms inherently lack robust support for developing
 business rules without repetition.
 Consequently, it is challenged to establish a single source of truth for
 business rules.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The programming paradigms do not inherently offer robust support for developing
 business rules without repetition.
 Consequently, the organizations lack the option to establis a 
\emph on
single source of truth
\emph default
 for them.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The programming paradigms inherently lack robust support for developing
 the business rules as a unified source of truth.
\end_layout

\begin_layout Plain Layout
Developing the business rules as a 
\emph on
single source of truth
\emph default
 is not basicly supported by the programming paradigms.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
According to our exploration, by the modeling tools offered by programming
 paradigms, it 
\end_layout

\begin_layout Plain Layout
In our exploration we failed to develop 
\end_layout

\begin_layout Plain Layout
According to our exploration, the modeling tools offered by programming
 paradigms
\end_layout

\begin_layout Plain Layout
None of the used modeling tools offered by programming paradigms, could
 develop the business rules as a 
\emph on
single source of truth.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the various modeling options, we could not prevented from repeating business
 logic.
 This means, no one 
\emph on
single source of truth
\emph default
 (SSOT) for the organizations' business logic.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
might lead to an infinite loop.
 We mentioned this in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Background"
plural "false"
caps "false"
noprefix "false"

\end_inset

 in the term of accidental recursions.
 For example, if we need to add the functionality that 
\begin_inset Formula $\LSTINLINE{X:=Y}$
\end_inset


\end_layout

\begin_layout Plain Layout
In adding a calculation such as 
\begin_inset Formula $\LSTINLINE{X:=Y}$
\end_inset

, there might be that this addition causes a cycle in the dependencies.
\end_layout

\begin_layout Plain Layout
it can be done by creating a new component that inherits the existing one
 and 
\end_layout

\begin_layout Plain Layout
without modifying or impacting the existing clients.
 
\end_layout

\begin_layout Plain Layout
that the busines changes requires in case that the busines clients need
 we do not need to change existing components.
\end_layout

\begin_layout Plain Layout
Instead of cloning components, 
\end_layout

\begin_layout Plain Layout
In order to to provide a component, that is based on existing component
 without modifying or impacting the existing clients, with an added calculation,
 for example, 
\begin_inset Formula $\LSTINLINE{X:=Y}$
\end_inset

.
 
\end_layout

\begin_layout Plain Layout
Essentially in FRP, 
\end_layout

\begin_layout Plain Layout
In case that we have a component with a variable
\end_layout

\begin_layout Plain Layout
Inheritance is the concept to always enable to provide a component that
 is based on existing component without modifying or impacting the existing
 clients.
 
\end_layout

\begin_layout Plain Layout
If the business needs, to always enable to inherit components without to
 affect exsting clients.
\end_layout

\begin_layout Plain Layout
It might be the business needs, to always enable to inherit components without
 to affect exsting clients.
 In cases that there is no support to do the inheritance, this has the side
 effect of cloning components.
\end_layout

\begin_layout Plain Layout
Essentially, in order to support to enable always to inherit components,
 we need to enable adding a source of values to an existing variable.
\end_layout

\begin_layout Plain Layout
Essentially, there is a problem to always enable to inherit components.
 
\end_layout

\begin_layout Plain Layout
In case that there exists a component with ex, with a variable or a field
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
—–
\end_layout

\begin_layout Plain Layout
It is the recommended practices to design of multiple objects and components
 with well-defined responsibilities 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

, and that the separation to responsibilities be alligned to the business
 needs 
\begin_inset CommandInset citation
LatexCommand cite
key "evans2004domain"
literal "false"

\end_inset

.
 It might be the business needs, to always enable to inherit components
 without to affect exsting clients.
 This has the side effect of cloning components.
\end_layout

\begin_layout Plain Layout
————
\end_layout

\begin_layout Plain Layout
In the model of constraints, cloning a component is the only way to provide
 a component based on existing component without modifying impacting the
 existing clients.
\end_layout

\begin_layout Plain Layout
We need to create components based others without modifying impacting the
 existing clients.
\end_layout

\begin_layout Plain Layout
Recommended practices emphasize the design of multiple objects and components
 with well-defined responsibilities 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 Furthermore, the separation to responsibilities should be alligned to the
 business needs 
\begin_inset CommandInset citation
LatexCommand cite
key "evans2004domain"
literal "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
We need to create components based others without modifying impacting the
 existing clients.
\end_layout

\begin_layout Plain Layout
The most important aspect, is that we can inherit existing components, not
 cloning them.
 For this reason, we find that the model of constraints, altough that it
 provides SSOT for the business logic, it is unless there is the need to
 clone the entire application.
 
\end_layout

\begin_layout Plain Layout
The created components by the use of Hotdrink cannot be inherited.
 Similary
\end_layout

\begin_layout Plain Layout
In case that we has 
\end_layout

\begin_layout Plain Layout
we need to create components based others without modifying impacting the
 existing clients.
 We need also to not clone and create the changes, because 
\end_layout

\begin_layout Plain Layout
Recommended practices emphasize the design of multiple objects and components
 with well-defined responsibilities 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 Furthermore, the separation to responsibilities should be alligned to the
 business needs 
\begin_inset CommandInset citation
LatexCommand cite
key "evans2004domain"
literal "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
It is the business needs to create components based others without modifying
 impacting the existing clients.
 It is the busines needs to not clone and create the changes, because 
\end_layout

\begin_layout Plain Layout
In the case of Hotdrink, that we cannot we need to clone the existing codebase
 and then making the necessary changes to the new application.The business
 needs is to not 
\end_layout

\begin_layout Plain Layout
According to the business needs, if there is a component, that has usages/client
s, we do not want to change it to not impact the existing usages.
 
\end_layout

\begin_layout Plain Layout
———–
\end_layout

\begin_layout Plain Layout
The inefficiency experienced by legacy applications in the market lies in
 the time-consuming process of implementing changes.
 Repeating on code resists against the code changes for two reasons: First,
 because efforts need to be keep on the rules consistency.
 Second, it adds more lines of code to the application.
 In the explored designs, we tried to not repeating on the business logic.
 Unfortunatly, even for this basic sample application, the exploration did
 not suggested an architetural design with a single source of truth to the
 business rules.
\end_layout

\begin_layout Plain Layout
Throughout the exploration, we find that In spreadsheets, it save from repeating
 to call functions to update variables as done traditionaly.
 furthrenore, in constraints, it save from repeating variables.
 However, it might worth nothing, if it leads to clone an entire component
 or application.
 if we need to create another application based on an existing one without
 modifying impacting the existing clients, we need to clone the existing
 codebase and then making the necessary changes to the new application.
\end_layout

\begin_layout Plain Layout
The recommended practices emphasize the design of multiple objects or components
 with well-defined responsibilities 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

, and that the separation to responsibilities be alligned to the business
 needs 
\begin_inset CommandInset citation
LatexCommand cite
key "evans2004domain"
literal "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
———-
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the explored designs, we tried to not repeating on the business logic.
 This is because code repetition leads to inefficiency.
\end_layout

\begin_layout Plain Layout
In spreadsheets, it save from repeating to call functions to update variables
 as done traditionaly.
 furthrenore, in constraints, it save from repeating variables.
\end_layout

\begin_layout Plain Layout
———-
\end_layout

\begin_layout Plain Layout
The inefficiency experienced by legacy applications in the market lies in
 the time-consuming process of implementing changes.
 Repeating on code resists against the code changes for two reasons: First,
 because efforts need to be keep on the rules consistency.
 Second, it adds more lines of code to the application.
 However, Even for this basic sample application, the exploration did not
 suggested an architetural design with a single source of truth to the business
 rules.
 
\end_layout

\begin_layout Plain Layout
—————
\end_layout

\begin_layout Plain Layout
The inefficiency experienced by legacy applications in the market lies in
 the time-consuming process of implementing changes.
 The effort to change consists of analyzing or understanding the application
 source code, and also keeping on the consistency of the logic.
\end_layout

\begin_layout Plain Layout
Even for this basic sample application, the exploration did not suggested
 an architetural design with a single source of truth to the business rules.
 The repeatition resists against the code changes for two reasons.
 First, because efforts need to be keep on the rules consistency.
 Second, it adds more lines of code to the application.
\end_layout

\begin_layout Plain Layout
——
\end_layout

\begin_layout Plain Layout
The inefficiency experienced by legacy applications in the market lies in
 the time-consuming process of implementing changes.
 One contributing factor is the limited cognitive capacity of developers
 when it comes to analyzing the extensive details within the application
 source code.
 However, even for this basic sample application, the exploration did not
 suggested an architetural design with a single source of truth to the business
 rules.
\end_layout

\begin_layout Plain Layout
In the explored design options, we could not created a single source of
 truth to the business rules.
\end_layout

\begin_layout Plain Layout
throughout the exploration, we recognize the avaiable mechanisms to not
 repeat on code.
 The concept used in spreadsheets are trending now.
 It save from repeating to call functions to update variables as done traditiona
ly.
 
\end_layout

\begin_layout Plain Layout
n spreadsheets, it save from repeating to call functions to update variables
 as done traditionaly.
 furthrenore, in constraints, it save from repeating variables.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
To address this, recommended practices emphasize the design of multiple
 objects and components with well-defined responsibilities 
\begin_inset CommandInset citation
LatexCommand cite
key "martin2018clean"
literal "false"

\end_inset

.
 Furthermore, the separation to responsibilities should be alligned to the
 business needs 
\begin_inset CommandInset citation
LatexCommand cite
key "evans2004domain"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Subsection
Cloning
\end_layout

\begin_layout Plain Layout
that there exists a compoent, and we need changes, so we clone it, to not
 impact existing users.
\end_layout

\begin_layout Subsection
Cloning
\end_layout

\begin_layout Plain Layout
It is very basic in programming, the concept to extend existing applications
 without to modify them, to not impact existing usages.
 For this reason, the events paradigm are common.
 Applications expose events, to execute things as part of internal executions.
\end_layout

\begin_layout Plain Layout
This is usualy done by exposing events,
\end_layout

\begin_layout Plain Layout
In order to extend an exsting application instead of creating another applicatio
n
\end_layout

\begin_layout Plain Layout
If there is a need to 
\end_layout

\begin_layout Plain Layout
An application or component that need a change.
 If
\end_layout

\begin_layout Plain Layout
If we need to create another application based on an this one without modifying
 impacting the existing clients, we need to clone the existing codebase
 and then making the necessary changes to the new application.
\end_layout

\begin_layout Plain Layout
If an exsting
\end_layout

\begin_layout Plain Layout
When we say 
\emph on
cloning
\emph default
, we mean that there exists a certain application or component, that has
 existing clients.
 
\end_layout

\begin_layout Plain Layout
the events paradigm should help to extend existing applications
\end_layout

\begin_layout Plain Layout
In the explored design options, we could not prevented from repeating business
 logic.
 This has the meaning, that there is no one single source of truth for the
 organizations' business logic.
 
\end_layout

\begin_layout Plain Layout
In the basic procedural programming, 
\end_layout

\begin_layout Plain Layout
The exploed design options use the avable abstractions mechanisms that reduce
 one
\end_layout

\begin_layout Plain Layout
When we use an abstraction mechanism, 
\end_layout

\begin_layout Plain Layout
We use abstraction mechanism
\end_layout

\begin_layout Plain Layout
In the basic procedural programming, we recognize the repeat of 
\end_layout

\begin_layout Plain Layout
We recognize three types of repeation, that we recognize.
 First, 
\end_layout

\begin_layout Section
Reactive Programming
\end_layout

\begin_layout Plain Layout
However, also in using 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Alternatives
\end_layout

\begin_layout Plain Layout
One common tool for implementing this functionality is a spreadsheet.
 In spreadsheets, a cell represents a field and can contain a formula that
 defines its dependency on other cells.
 Alternatively, the visual fields can be connected to reactive variables.
 In frameworks such as React, the view can be continuously updated by the
 framework.
\end_layout

\begin_layout Plain Layout
The drug administration application contain fields, in such that a field
 is sometimes useful to fill it directly by the user, while the same field
 can be usefull to be computed according to ther fields that the user filled.
 However, reactive variables are classified into input and output categories.
 In spreadsheet, a cell can either contain a formula or a value.
 Similary in MobX, the property can have either an observable annotation
 or computed annotation.
 typicaly, there is a need to duplicate fields or sets of related fields.
 For example, making several drug administration forms.
 The user then should choose the needed form, before filling the form out.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In the existing mechanisms, maintaining functionality becomes challenging
 when there is a significant number of calculations involved, especially
 that the codebase grows with repeated code segments.
 For instance, as illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Centerlized-Calculation-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, if the dose, duration, and volume have changed, then the drug, concentration,
 and rate are calculated.
 If the drug, dose, and rate have changed, then the duration, volume, and
 concentration are calculated, and so on.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Spreadsheets is a popular application that provide a limited functionality
 to fields calculations.
 Each cell, representing a field, can contain either a formula or a value.
 However, this leads to duplication, as in the drug administration, it leads
 to implement several modes
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
available in https://github.com/RIVarX/Evaluation/blob/main/duplicate_solutions.xl
sx
\end_layout

\end_inset

.
 In the first mode, users set the concentration, volume, and duration, and
 the other fields are calculated.
 In the second mode, users set the dose, rate, and duration, and once again,
 the other fields are calculated.
 This pattern can continue for additional modes, adding redundancy across
 the different modes.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Unpredictable Calculation
\end_layout

\begin_layout Plain Layout
In the original application, the calculation is centerlized.
 Whenever a user sets a new value to any of the fields, a calculation procedure
 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Centerlized-Calculation"
plural "false"
caps "true"
noprefix "false"

\end_inset

) is executed.
 The procedure consists of branches according to the user-cases, in each
 branch there are three values being used to calculate the other values.
 
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Plain Layout
We tried to seperate an application unsuccessfully.
 The calculations are defined separately in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

.
 Also the runtime is seperated, managing the updates on top of the objects'
 interactions (standard calls).
 But the resulted calculations does not fit the requirements.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The following UI application (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations"
plural "false"
caps "true"
noprefix "false"

\end_inset

) handles drug administration.
 It observes the fields' change events, once a value is changed, dependant
 fields are calculated and presented.
 The application is a prototype of a small part from an existing application.
 The goal is to reduce the complexity existing in the traditional application.
\end_layout

\begin_layout Plain Layout
In order to simplify the application, we seperate the model to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

.
 Also the UI is seperated to micro-frontends 
\begin_inset CommandInset citation
LatexCommand cite
key "peltonen2021motivations"
literal "false"

\end_inset

 respectively.
 The architectural design is illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 refers to giving 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}'s content
\end_layout

\end_inset

.
 injecting medicines into a patient's bloodstream.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,3.5) (4,5.5)}, inner sep=0pt, label=center:Bag micro-frontend]
 (C) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,3.5) (4,5.5)}, xshift=6cm, inner sep=0pt, label=center:Pump
 micro-frontend] (D) {};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,0) (4,2)}, inner sep=0pt, label=center:Bag Domain Object]
 (A) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,0) (4,2)}, xshift=6cm, inner sep=0pt, label=center:Pump
 Domain Object] (B) {};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (A)--(B) node[anchor=south,inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (A)--(C) node[inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (D)--(B) node[inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Design of the drug administration application, showcasing observer interaction
 through dashed lines.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Drug Administration Data Model
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 refers to a medical device used to deliver fluids with medication into
 a patient’s body in a controlled manner.
 Accordingly, we model 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 class with contained 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{IBag}
\end_layout

\end_inset

 representing the connected bag, containing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 relates to amount of medication administered to a patient, (e.g.
 100 mg).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 relates to the fluid volume mixed with the drug (e.g., 300 ml).
 Based on the existing bag, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 contains the data related to giving the bag's content over time.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Rate}
\end_layout

\end_inset

 relates to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 flow administered into the patient’s body per time unit (e.g., 30 ml per
 hour).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 relates to the dosage, which is the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 administered into the patient’s body per time unit (e.g., 10 mg per hour).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

 relates to the duration from starting the injection until stopping it.
 According to the architectural design and as visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Calculation-spread-over-objects-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, the fields in the user interface can trigger changes to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 which trigger changes also to the bag.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 interacts with the bag indirectly using an interface.
\end_layout

\begin_layout Plain Layout
In order to achive our goal to seperate the drug administration model, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 and its bag will be loosely coupled.
 The bag will be defined as an interface, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 will only send messages to it, to update 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
 Such as example is visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Calculation-spread-over-objects-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 When 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 send a message to the bag, it should not be aware of any internal information
 related to the bag.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

, in addition to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

, contains also 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 relating to the amount of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 per 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 (e.g.
 0.33 mg/ml).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 should not be aware of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 interacts with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

 by the interface it is implemented, named 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{IBag}
\end_layout

\end_inset

.
 The data model and the relationships are visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML-3"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}   
\end_layout

\begin_layout Plain Layout


\backslash
newthread{UI}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{Pump}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Bag}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Duration=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Drug=100}{Bag}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Dose=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Calculation-spread-over-objects-1"

\end_inset

Calculation procedure spread over seperated objects.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In order to update existing fields according to other fields, we need
\end_layout

\begin_layout Plain Layout
Front ends applications typicaly invovles behavior like reactive variables.
 Specificaly in the following drug administration example, the UI component
 contains six fields: The "Drug" field specifies the amount of medication
 administered to the patient (e.g., 100 mg).
 The "VolumeOfFluid" field indicates the volume of fluid mixed with the
 drug (e.g., 300 ml).
 The "Concentration" field represents the amount of the drug per unit volume
 of fluid (e.g., 0.33 mg/ml).
 The "Rate" field specifies the flow rate of the fluid into the patient's
 body per unit of time (e.g., 30 ml per hour).
 The "Dose" field represents the dosage, which is the amount of drug administere
d to the patient's body per unit of time (e.g., 10 mg per hour).
 The "Duration" field indicates the duration of the injection, from start
 to end.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
.
 However, typically, the data dependency graphs produced by this type of
 application are more complex than the typical graphs handled in the field.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
.
 the duration depends on the volume (and rate), which depends on the drug
 (and concentration), which in turn depends again on the duration (and dose).
 The components behavior are indepedently, so the behavior is inpredictable.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{UI}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{Pump}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Bag}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Duration=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Drug=100}{Bag}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Dose=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}      
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{VolumeOfFluid=300}{Bag}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Concentration=0.33}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Drug=99}{Bag}{}  
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Rate=30}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}        
\end_layout

\begin_layout Plain Layout


\backslash
end{call}   
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Calculation-spread-over-objects-1-1"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
A sequence diagram for the drug administration behavior.
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

The drug administration behavior is represented by a sequence diagram, which
 is divided into two objects or microfrontends.
 The task of performing calculations is shared between the 
\backslash
lstinline{Pump} and 
\backslash
lstinline{Bag}.
 Initially, the user specifies a 
\backslash
lstinline{Dose} of 10 and a 
\backslash
lstinline{Duration}.
 In response, the 
\backslash
lstinline{Drug} is calculated to be 100.
 Next, the user sets the 
\backslash
lstinline{VolumeOfFluid} to 300, which causes the 
\backslash
lstinline{Concentration} to be calculated as 0.33.
 However, the subsequent calculation of 
\backslash
lstinline{Drug} unexpectedly results in 99.
 This unpredictability can be attributed to two factors.
 Firstly, during the update of 
\backslash
lstinline{Concentration}, the value of 100/300 was rounded, leading to the
 loss of information in the process.
 This caused 
\backslash
lstinline{Concentration} to be calculated as 0.33, and consequently, 
\backslash
lstinline{Drug} was calculated to be 99.
 Secondly, there was a cycle in which 
\backslash
lstinline{Concentration} was updated based on 
\backslash
lstinline{Drug}, which was in turn updated based on 
\backslash
lstinline{Concentration}.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We use the simple drug administration example, ilustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

The example is a UI component that contains 6 fields.
 The field 
\backslash
lstinline{Drug} specifies the amount of medication administered to the patient,
 for example, 100 mg.
 The field 
\backslash
lstinline{VolumeOfFluid} indicates the volume of fluid mixed with the drug,
 for example, 300 ml.
 The field 
\backslash
lstinline{Concentration} represents the amount of the drug per unit volume
 of fluid, for example, 0.33 mg/ml.
 The field 
\backslash
lstinline{Rate} specifies the flow rate of the fluid into the patient's
 body per unit of time, for example, 30 ml per hour.
 The field 
\backslash
lstinline{Dose} represents the dosage, which is the amount of drug administered
 to the patient's body per unit of time, for example, 10 mg per hour.
 The field 
\backslash
lstinline{Duration} indicates the duration of the injection, from the start
 to the end.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
The drug administration UI component need to be seperated into two UI components
: the pump and the bag.
 The bag contains the drug, volume, and concentration, while the pump contains
 an instance of the bag along with the fields for dose, rate, and duration.
 Consequently, to create a different variant of the drug administration,
 we don't need to duplicate the entire component.
 Instead, we can create two types of bags: one that includes concentration
 and one that doesn't.
 By duplicating only the bag, we reduce code redundancy and make future
 changes easier.
 If we had duplicated the entire component, any updates to the pump would
 require making changes in two places.
\end_layout

\begin_layout Plain Layout
The fields need to behaves similar to reactive variables.
 For example, consider the field "Concentration" which represents the amount
 of a drug per unit volume.
 Similar to reactive variables, this field should be recalculated in response
 to updates in the "Amount" and "Volume" values.
 In order, to keep on the specified design, we need that each component
 implement its internal coherence behavior.
 For instance, in the pump component, it should be specified, that the Amount
 of the bag, should be recalculated according to the Dose and Duration.
 In the same time, other specifications that is related intenaly to bag
 remain hodden.
 For instance, that the concentration is recalculated in response to updates
 in the "Amount" and "Volume".
\end_layout

\begin_layout Plain Layout
By spedifiing behavior similar to reactive variables, we initiate a depedancy
 graph.
 For example, in specifiing Concentration to update based on "Amount" and
 "Volume" values, we iniate a dependency, that concentration depends on
 amount and volume.
 As the components specified such behavuier privetly, each contains privately
 a depedency graph, according to its specified behavior.
 while the runtime, the epedency graph is composed from the two components.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Seperation
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The fields in the example need to be similar to reactive variables.
 For example, consider the field "Concentration" which represents the amount
 of a drug per unit volume.
 Similar to reactive variables, this field should be recalculated in response
 to updates in the "Amount" and "Volume" values.
 One common tool for implementing this functionality is a spreadsheet.
 In spreadsheets, a cell represents a field and can contain a formula that
 defines its dependency on other cells.
 Alternatively, the visual fields can be connected to reactive variables.
 For instance, MobX provides a framework to implement reactive variables
 as a state management solution to integrate with React.
 React provide a framework that continuously update the view, containing
 the visual fields.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
...
\end_layout

\begin_layout Section
Redandantancy
\end_layout

\begin_layout Plain Layout
in the code->need to mainain it, when we need to add or update code, that
 have
\end_layout

\begin_layout Plain Layout
in variables/calculations, it might be heavy executions
\end_layout

\end_inset


\end_layout

\begin_layout Section
Redandant Code
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The fields in the example need to be similar to reactive variables.
 For example, consider the field "Concentration" which represents the amount
 of a drug per unit volume.
 Similar to reactive variables, this field should be recalculated in response
 to updates in the "Amount" and "Volume" values.
 In various programming environments, including JavaScript, a similar behavior
 can be achieved by associating code with a change event for a specific
 field.
 This code will be triggered and executed whenever there is a modification
 to the field's value 
\begin_inset CommandInset citation
LatexCommand cite
key "mdn-change-event"
literal "false"

\end_inset

.
 For example, to recalculate the Concentration when the "Amount" and "Volume"
 values are updated, we can register the code responsible for updating the
 Concentration within the change events associated with the "Amount" and
 "Volume" fields.
\end_layout

\begin_layout Plain Layout
The example need to be seperated into two UI components: the pump and the
 bag.
 The bag contains the drug, volume, and concentration, while the pump contains
 an instance of the bag along with the fields for dose, rate, and duration.
 Consequently, to create a different variant of the drug administration,
 we don't need to duplicate the entire component.
 Instead, we can create two types of bags: one that includes concentration
 and one that doesn't.
 By duplicating only the bag, we reduce code redundancy and make future
 changes easier.
 If we had duplicated the entire component, any updates to the pump would
 require making changes in two places.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The fields in the example need to be similar to reactive variables.
 For example, consider the field "Concentration" which represents the amount
 of a drug per unit volume.
 Similar to reactive variables, this field should be recalculated in response
 to updates in the "Amount" and "Volume" values.
 One common tool for implementing this functionality is a spreadsheet.
 In spreadsheets, a cell represents a field and can contain a formula that
 defines its dependency on other cells.
 Alternatively, the visual fields can be connected to reactive variables.
 For instance, MobX provides a framework to implement reactive variables
 as a state management solution to integrate with React.
 React provide a framework that continuously update the view, containing
 the visual fields.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
In implementing the example by reactive variables, each reactive variable
 is classified into either 
\emph on
input
\emph default
 or 
\emph on
output
\emph default
 categories, often resulting in duplications.
 For instance, in spreadsheets, a cell can contain either a formula or a
 value.
 This leads to implement several modes to the drug administration.
 In the first mode, users set the concentration, volume, and duration, and
 the other fields are calculated.
 In the second mode, users set the dose, rate, and duration, and once again,
 the other fields are calculated.
 This pattern can continue for additional modes, but has redundancy across
 the different modes.
\end_layout

\begin_layout Plain Layout
In implementing the example without reactive variables, we can customize
 the updates by using visual field change events.
 For instance, as illustrated in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Centerlized-Calculation"
plural "false"
caps "false"
noprefix "false"

\end_inset

, if the dose, duration, and volume of fluid have changed, then the drug,
 concentration, and rate are calculated.
 If the drug, dose, and rate have changed, then the duration, volume, and
 concentration are calculated, and so on.
 However, this method also introduces redundancy, as seen in 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume1}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout

line~
\backslash
ref{line:concentrationByDrugAndVolume2}
\end_layout

\end_inset

 where the same statement is repeated.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
