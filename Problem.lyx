#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{algorithm,algpseudocode}
\usepackage{pgf-umlsd}
\usepackage{listings}
\lstset{numbers=left, numberstyle=\tiny, numbersep=5pt, numberfirstline=true, firstnumber=1, stepnumber=1}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Problem
\begin_inset CommandInset label
LatexCommand label
name "chap:Problem"

\end_inset


\end_layout

\begin_layout Standard
In front-end applications, 
\emph on
state management
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "youframeworkless"
literal "false"

\end_inset

 refers to the process of maintaining and updating variables.
 In cases where fields should be automatically filled based on other fields,
 developers implicitly create a 
\emph on
data dependency graph
\emph default
 in which updates to variables recursively trigger updates to dependent
 variables.
 The FRP paradigm offers an explicit way to declare these graphs and provides
 
\emph on
predictability
\emph default
, which stems from the 
\emph on
referential transparency
\emph default
 property of defining data dependencies as composed pure functions.
\end_layout

\begin_layout Standard
However, this requires the graphs to be acyclic leading a limitation in
 
\emph on
separation of concerns.

\emph default
 In order to ensure that the graph is acyclic, developers must ensure that
 no node has a path leading back to itself.
 This requires the developer to have knowledge of data dependencies and
 to detect existing paths before adding new formulas that involve existing
 variables.
 If a cycle is detected, the developer should avoid adding the new formula
 to the graph to prevent the creation of a cycle.
 For instance, if there are already two formulas, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Y:=Z+1}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Z:=X-1}
\end_layout

\end_inset

, and the developer wants to add a third formula 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{X:=Y+1}
\end_layout

\end_inset

, they must have access to all three formulas and detect the existing cycle
 among nodes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{X}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Y}
\end_layout

\end_inset

, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Z}
\end_layout

\end_inset

.
 If a calculation is linked to a variable, but the variable has dependencies
 that fall under a separate concern, it is linked without considering those
 dependencies.
 This means that the graph may not necessarily be acyclic.
\end_layout

\begin_layout Standard
This thesis address the issue, focusing on cycles caused by 
\emph on
mutual recursions
\emph default
 (also known as 
\emph on
indirect recursions
\emph default
).
 Mutual recursions arise when reactive variables are defined in terms of
 each other.
 By narrowing down the cycles to only those created from mutual recursions,
 we find that there must be a node among the cycle's constituents that depends
 on a node originating from outside the cycle or receive updates from external
 input.
 This node is connected to multiple sources, including the node that links
 it to the cycle and a node or input from outside the cycle.
 Therefore, we provide a semantic framework that permits cycles in data
 dependencies by allowing nodes to receive inputs from multiple sources.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}  
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
n {5} 
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
radius {3cm} 
\end_layout

\begin_layout Plain Layout


\backslash
def 
\backslash
margin {8} % margin in angles, depends on the radius
\end_layout

\begin_layout Plain Layout


\backslash
foreach [count=
\backslash
s] 
\backslash
j in {A,B,...,E} 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, circle] (
\backslash
j) at ({360/
\backslash
n * (
\backslash
s - 1)}:
\backslash
radius) {
\backslash
j};   
\backslash
draw[<-, >=latex] ({360/
\backslash
n * (
\backslash
s - 1)+
\backslash
margin}:
\backslash
radius)      arc ({360/
\backslash
n * (
\backslash
s - 1)+
\backslash
margin}:{360/
\backslash
n * (
\backslash
s)-
\backslash
margin}:
\backslash
radius);          
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[above] (X) at (-3,3) {$input$};    
\end_layout

\begin_layout Plain Layout


\backslash
draw[dotted][<-, >=latex] (X) -- (C);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cycle-to-multiple-assignment"

\end_inset

Illustrating the relationship between cycles and variables with multiple
 sources.
 A cycle of variables 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

-
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{E}
\end_layout

\end_inset

 defined in terms of each other are represented by a directed graph with
 a cycle of directed edges.
 In addition, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{C}
\end_layout

\end_inset

 depends directly or indirectly on external input, is represented by a dashed
 arrow.
 Consequently, it can be inferred that 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{C}
\end_layout

\end_inset

 originates from two distinct sources.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Motivation
\begin_inset CommandInset label
LatexCommand label
name "chap:Motivating-Example"

\end_inset


\end_layout

\begin_layout Standard
The goal is to divide a complex frontend application into manageable micro
 frontends, with the ability to automatically fill fields in one microfrontend
 based on information from others.
 This is necessary for cases where one field is dependent on another, such
 as in a form.
 To achieve efficient and automated data entry, the micro frontends must
 communicate and share information about specific fields.
 This requires them to agree on contracts that expose only the minimum required
 information about these fields.
\end_layout

\begin_layout Standard
As an example, consider a drug administration form that is split into two
 micro frontends: one for the materials being injected into the patient,
 and another for the pump data when these materials enter the patient's
 bloodstream.
 If the rate and duration of injection are changed, the volume value in
 the first micro frontend should also change accordingly.
 Additionally, updating the drug should be based on the values of the dose
 and duration fields.
 According to the context (domain), the pump depends on the meterial to
 execute.
 We expect to design it, to declare those volume and drug calculations in
 the pump context.
\end_layout

\begin_layout Standard
The fields in this example, depend on each other, so that changing the drug
 might lead to changing it again, because there is a cycle in the dependencies.
 
\end_layout

\begin_layout Standard
———
\end_layout

\begin_layout Standard
Our objective is to break down a large and complex frontend application
 into manageable micro frontends.
 Specifically, we want to enable the automatic filling of fields in one
 microfrontend based on information from other micro frontends, such as
 filling out a form where one field is dependent on another.
 This requires communication between the micro frontends to share information
 about specific fields, allowing for more efficient and automated data entry.
 To achieve this, the micro frontends must agree on contracts that expose
 only the minimum required information about these fields.
\end_layout

\begin_layout Standard
In the drug administration example, we seperate the form into two panels,
 the first represent materials injected to a patient, the second represent
 pump data, when the matrials are injected into the patient blood stream.
 In the example, chaning rate and duration should lead the volume's value
 to change.
 Also the drug can be updated according to the values of dose and duration.
 As the minimum required information for the micro fronrtends to expose,
 the first microfronend should expose the volume and drug to be update according
 to the fields they should depend on.
\end_layout

\begin_layout Standard
———–
\end_layout

\begin_layout Standard
We try to seperate a large complex front end appliaction to managable micro
 front ends.
 We focus on microfroneend s that need to comunicate, because they need
 to automaticaly fill fields of one microfrontend based on other fields
 from other micro frontends.
 To effectfuly seperate the application, the micro fronends aggree about
 contracts, that will expose minimum information.
\end_layout

\begin_layout Standard
If micro frontend expose their internals, then the seperation is not effectful.
 This is according to the ISP principle, when code in one micro frontend
 use information from another micro fronend, it depends on this information,
 and we want minimum dependencies (accodring to the ISP).
 The micro frontneds should design contracts, how to comunicate.
\end_layout

\begin_layout Standard
In the best pracitce, the micro frontends should depend on minimum 
\end_layout

\begin_layout Standard
This comunication might lead the mico frontend, to expose knowledge 
\end_layout

\begin_layout Standard
———
\end_layout

\begin_layout Standard
Micro frontends are an architectural pattern for building web applications
 where the frontend of the application is composed of smaller, independently
 deployable, and scalable components.
 Each micro frontend represents a distinct feature or part of the user interface
, and each can be developed and deployed independently.
 The key idea behind micro frontends is to break down large monolithic frontend
 codebases into smaller, more manageable pieces.
 This allows teams to work on different parts of the application independently,
 which can lead to faster development times and easier maintenance.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Large complex front end applications typicaly have UI elements that change
 dynamically based on the value entered in another field.
\end_layout

\begin_layout Plain Layout
In UI applications, dependent fields refer to fields or UI elements that
 change dynamically based on the value entered in another field.
 For example, if a user selects a particular option in a dropdown menu,
 it may cause other fields to change.
\end_layout

\begin_layout Plain Layout
There are applications that need to update fields according to other fields
 and in response to their changes.
 This functionality reminds the abstraction of reactive variables, where
 updating variables is tangled to the task of updating subscribers and dependant
 variables.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following UI application (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations"
plural "false"
caps "true"
noprefix "false"

\end_inset

) handles drug administration.
 It observes the fields' change events, once a value is changed, dependant
 fields are calculated and presented.
 The application is a prototype of a small part from an existing application.
 The goal is to reduce the complexity existing in the traditional application.
\end_layout

\begin_layout Standard
In order to simplify the application, we seperate the model to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

.
 Also the UI is seperated to micro-frontends 
\begin_inset CommandInset citation
LatexCommand cite
key "peltonen2021motivations"
literal "false"

\end_inset

 respectively.
 The architectural design is illustrated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-calculations"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 refers to giving 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}'s content
\end_layout

\end_inset

.
 injecting medicines into a patient's bloodstream.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tabular}{|c c c| }    
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout

Drug & Concentration & VolumeOfFluid 
\backslash

\backslash
   
\end_layout

\begin_layout Plain Layout


\backslash
framebox(35,15){
\backslash
textit{100}} & 
\backslash
framebox(35,15){
\backslash
textit{0.33}} & 
\backslash
framebox(35,15){300} 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout


\backslash
hline  
\end_layout

\begin_layout Plain Layout

 Dose & Duration & Rate 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

 
\backslash
framebox(35,15){10} & 
\backslash
framebox(35,15){10} & 
\backslash
framebox(35,15){
\backslash
textit{30}} 
\backslash

\backslash
  
\end_layout

\begin_layout Plain Layout


\backslash
hline
\end_layout

\begin_layout Plain Layout


\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-calculations"

\end_inset

Drug administration user interface.
 The user-defined values are in a regular typeface and the calculated values
 are in an italic typeface.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,3.5) (4,5.5)}, inner sep=0pt, label=center:Bag micro-frontend]
 (C) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,3.5) (4,5.5)}, xshift=6cm, inner sep=0pt, label=center:Pump
 micro-frontend] (D) {};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,0) (4,2)}, inner sep=0pt, label=center:Bag Domain Object]
 (A) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[draw, fit={(0,0) (4,2)}, xshift=6cm, inner sep=0pt, label=center:Pump
 Domain Object] (B) {};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (A)--(B) node[anchor=south,inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (A)--(C) node[inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
draw[dashed] (D)--(B) node[inner sep=2pt,midway] {};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Design of the drug administration application, showcasing observer interaction
 through dashed lines.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Drug Administration Data Model
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 refers to a medical device used to deliver fluids with medication into
 a patient’s body in a controlled manner.
 Accordingly, we model 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 class with contained 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{IBag}
\end_layout

\end_inset

 representing the connected bag, containing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 relates to amount of medication administered to a patient, (e.g.
 100 mg).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 relates to the fluid volume mixed with the drug (e.g., 300 ml).
 Based on the existing bag, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 contains the data related to giving the bag's content over time.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Rate}
\end_layout

\end_inset

 relates to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 flow administered into the patient’s body per time unit (e.g., 30 ml per
 hour).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 relates to the dosage, which is the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 administered into the patient’s body per time unit (e.g., 10 mg per hour).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

 relates to the duration from starting the injection until stopping it.
 According to the architectural design and as visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Calculation-spread-over-objects-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

, the fields in the user interface can trigger changes to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 which trigger changes also to the bag.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 interacts with the bag indirectly using an interface.
\end_layout

\begin_layout Standard
In order to achive our goal to seperate the drug administration model, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 and its bag will be loosely coupled.
 The bag will be defined as an interface, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 will only send messages to it, to update 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

.
 Such as example is visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Calculation-spread-over-objects-1"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
 When 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 send a message to the bag, it should not be aware of any internal information
 related to the bag.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

, in addition to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

, contains also 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 relating to the amount of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 per 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 (e.g.
 0.33 mg/ml).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 should not be aware of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 interacts with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

 by the interface it is implemented, named 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{IBag}
\end_layout

\end_inset

.
 The data model and the relationships are visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Drug-Administration-UML"
plural "false"
caps "true"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}   
\end_layout

\begin_layout Plain Layout


\backslash
newthread{UI}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{Pump}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Bag}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Duration=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Drug=100}{Bag}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Dose=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Calculation-spread-over-objects-1"

\end_inset

Calculation procedure spread over seperated objects.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale=0.8]%[show  background  grid]
\end_layout

\begin_layout Plain Layout


\backslash
begin{interface}{IBag}{0,-5}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Drug}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{VolumeOfFluid}
\end_layout

\begin_layout Plain Layout


\backslash
end{interface}
\end_layout

\begin_layout Plain Layout


\backslash
begin{class}[text width=8 cm]{Pump}{0,0}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Duration}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Dose}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Rate}
\end_layout

\begin_layout Plain Layout


\backslash
end{class}
\end_layout

\begin_layout Plain Layout


\backslash
composition{Pump}{TheBag}{}{IBag}
\end_layout

\begin_layout Plain Layout


\backslash
begin{class}{Bag}{0,-10}
\end_layout

\begin_layout Plain Layout


\backslash
implement {IBag}
\end_layout

\begin_layout Plain Layout


\backslash
attribute{Concentration}
\end_layout

\begin_layout Plain Layout


\backslash
end{class}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Drug-Administration-UML"

\end_inset

Drug administration class diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Unpredictable Calculation
\end_layout

\begin_layout Standard
In the original application, the calculation is centerlized.
 Whenever a user sets a new value to any of the fields, a calculation procedure
 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Centerlized-Calculation"
plural "false"
caps "true"
noprefix "false"

\end_inset

) is executed.
 The procedure consists of branches according to the user-cases, in each
 branch there are three values being used to calculate the other values.
 In contrast, following the seperation, the calculations task is spread
 over 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In the cenario visualized in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Unpredictable-Calculation"
plural "false"
caps "true"
noprefix "false"

\end_inset

 the user sets 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Dose}
\end_layout

\end_inset

 to 
\begin_inset ERT
status open

\begin_layout Plain Layout

10
\end_layout

\end_inset

, then 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Duration}
\end_layout

\end_inset

, in response 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 is calculated to 100.
 The user then sets 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{VolumeOfFluid}
\end_layout

\end_inset

 to 300, in response 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 is calculated to 0.33.
 Then 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 is calculated to 99 unexpectedly.
 
\end_layout

\begin_layout Standard
The unpredictable change has two reasons.
 First, in the update of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 100/300 was rounded, and lost information in the process.
 This caused 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 to be calculated to 0.33, which caused 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 to be calculated to 99.
 Second, there was a cycle: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

 was updated according to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

, which was updated according to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Concentration}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

If edited triple is of Dose,  Duration, and VolumeOfFluid
\end_layout

\begin_layout Plain Layout

  Drug = Dose*Duration
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/VolumeOfFluid
\end_layout

\begin_layout Plain Layout

  Rate = VolumeOfFluid/Duration
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Drug, Dose, and Rate
\end_layout

\begin_layout Plain Layout

  Duration = Drug/Dose
\end_layout

\begin_layout Plain Layout

  VolumeOfFluid = Duration*Rate 
\end_layout

\begin_layout Plain Layout

  Concentration = Drug/VolumeOfFluid
\end_layout

\begin_layout Plain Layout

Else If edited triple is of Concentration,  Volume, and Duration
\end_layout

\begin_layout Plain Layout

  Drug = Volume*Concentration
\end_layout

\begin_layout Plain Layout

  Rate = VolumeOfFluid/Duration 
\end_layout

\begin_layout Plain Layout

  Dose = Drug/Duration
\end_layout

\begin_layout Plain Layout

End If
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Centerlized-Calculation"

\end_inset

Part of a centralized calculation procedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{UI}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{Pump}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Bag}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Duration=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{Drug=100}{Bag}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Dose=10}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}      
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{UI}{VolumeOfFluid=300}{Bag}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Concentration=0.33}{Bag}{}    
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Drug=99}{Bag}{}  
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Bag}{Rate=30}{Pump}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}        
\end_layout

\begin_layout Plain Layout


\backslash
end{call}   
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Unpredictable-Calculation"

\end_inset

Calculation procedure spread over seperated objects producing unpredictable
 calculation.
 The user set 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Drug}
\end_layout

\end_inset

 to 100 and it has been changed unexpectedly to 99.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Summary
\end_layout

\begin_layout Standard
We tried to seperate an application unsuccessfully.
 The calculations are defined separately in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Pump}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{Bag}
\end_layout

\end_inset

.
 Also the runtime is seperated, managing the updates on top of the objects'
 interactions (standard calls).
 But the resulted calculations does not fit the requirements.
\end_layout

\begin_layout Chapter
Background
\end_layout

\begin_layout Standard
When implementing dependent fields in a UI, it is important to ensure that
 they are synchronized properly.
 This means that when the value of the parent field changes, the dependent
 field should also update accordingly.
 Such syncromization updates are called 
\emph on
push-based evaluation model
\emph default
, because changes are 
\begin_inset Quotes eld
\end_inset

pushed
\begin_inset Quotes erd
\end_inset

 down to dependant variables.
 This evaluation model can be viewed as a depth-first search (DFS) algorithm,
 when a change event causes a chain of computations in a depth-first order.
\end_layout

\begin_layout Standard
However, there are cases, like the case in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Glitch-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

,where the order of the visits produce wrong update processes.
 When the spaning tree resulted from the chain of computations contains
 nodes with more than one incoming edges, this means that there were variables
 that updated more than once about the change, while some updates (known
 as 
\emph on
glitch
\emph default
es, 
\begin_inset CommandInset citation
LatexCommand cite
key "bainomugisha2013survey"
literal "false"

\end_inset

) are based on outdated values.
 Several incoming edges of a node represent 
\emph on
simultaneous 
\emph default
events 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

, other than the depth-first order.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}  
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (A) at (3,7) {A};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (B) at (2,5) {B};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (C) at (4,5) {C};
\end_layout

\begin_layout Plain Layout


\backslash
node[shape=circle,draw=black] (D) at (3,3) {D};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (B);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (A) edge  (C);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (B) edge  (D);
\end_layout

\begin_layout Plain Layout


\backslash
path[-{Triangle[scale=1]}] (C) edge  (D);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(B) + (0,1)$)    {B:=A+1};
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(C) + (0,1)$)    {C:=A+1};
\end_layout

\begin_layout Plain Layout


\backslash
node[scale=0.6] at ($(D) + (0,1)$)    {D:=B+C};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}  
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Glitch-1"

\end_inset

A spanning graph for a chain of computations produced from updating a variable
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

.
 The traversal order is 
\begin_inset ERT
status open

\begin_layout Plain Layout

(
\backslash
lstinline{A},
\backslash
lstinline{B},
\backslash
lstinline{D},
\backslash
lstinline{C},
\backslash
lstinline{D})
\end_layout

\end_inset

 while the expected order is (
\begin_inset ERT
status open

\begin_layout Plain Layout

(
\backslash
lstinline{A},
\backslash
lstinline{B},
\backslash
lstinline{C},
\backslash
lstinline{D})
\end_layout

\end_inset

).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In 
\begin_inset Formula $\ReactiveX$
\end_inset

, reactive variables can be implemented using observable streams, as mentioned
 in 
\begin_inset CommandInset citation
LatexCommand cite
key "schuster2016reactive"
literal "false"

\end_inset

.
 This involves representing a variable's values over time as a stream of
 events, as illustrated in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Streams-of-values-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 These events can be triggered by changes in UI controls or by subscribing
 to changes in other variables.
 Similarly, events can trigger changes in UI controls and cause subscribed
 variables to update accordingly.
\end_layout

\begin_layout Plain Layout
There are two stages.
 First subscribing, Second, updating according to the input events.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
centering 
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
matrix[row sep=0.5cm]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  
\backslash
draw [time] (0,0) -- (6.5,0);
\end_layout

\begin_layout Plain Layout

  
\backslash
node at (0.2,0.2) {A};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (1x0) at (1,0) {5};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (2x0) at (2,0) {3};
\end_layout

\begin_layout Plain Layout

  
\backslash
node[marble,circle] (3x0) at (4.5,0) {2};
\end_layout

\begin_layout Plain Layout

  
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Streams-of-values-1-1"

\end_inset

Illustrating an event stream that represents the changes in the values of
 variable A over time.
 Based on the illustration, it can be observed that variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{A}
\end_layout

\end_inset

 changed to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{5}
\end_layout

\end_inset

 initially, then to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{3}
\end_layout

\end_inset

, and after a longer period, it changed to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{2}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{A}{A}{}       
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{B}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Exp}{B+1}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Exp}{Subscribe}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{A}{Subscribe}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
end{call}     
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evaluating-the-formula-1-1"

\end_inset

Evaluating the formula A:=B+1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{sequencediagram}     
\end_layout

\begin_layout Plain Layout


\backslash
newthread{E}{User Interface}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[1]{A}{A}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{B}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
newinst[2]{Exp}{B+1}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{E}{OnNext(2)}{B}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{B}{OnNext(2)}{Exp}{}     
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{Exp}{OnNext(3)}{A}{}         
\end_layout

\begin_layout Plain Layout


\backslash
begin{call}{A}{OnNext(3)}{E}{}        
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}    
\end_layout

\begin_layout Plain Layout


\backslash
end{call} 
\end_layout

\begin_layout Plain Layout


\backslash
end{call}  
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram} 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Propogation-on-the-1-1"

\end_inset

Illustrating a synchronous update according to the subscriptions.
 Following a change in the field of B in the UI, B update UI, when the An
 input event.
 Propogation on the formula A:=B+1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
