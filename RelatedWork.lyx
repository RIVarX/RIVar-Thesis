#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\begin_preamble
\usepackage{tikz}
\usepackage[simplified]{pgf-umlcd}
\usepackage{algorithm,algpseudocode}
\usepackage{pgf-umlsd}
\usepackage{listings}
\lstset{numbers=left, numberstyle=\tiny, numbersep=5pt, numberfirstline=true, firstnumber=1, stepnumber=1}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Related Work 
\end_layout

\begin_layout Standard
ReactiveX was mentioned as 
\emph on
not true FRP, 
\emph default
because it provides 
\emph on
merge
\emph default
 operator that merges streams based on the computer's clock time, and the
 ability to produce recursion.
 Both prevent from having the referential transparency property, such that
 the same input will produce consistenctly the same output.
 
\emph on
Sodium
\emph default
 accomplish that by wrapping the FRP code with transactions that handle
 simultaneous events and avoid/ignore recursion calls.
 In contrast, we answer the two open issues by: First, Predictable merge
 operator depending on reliable timestamps.
 Second, support recursion by the predictable merge operator under the wood.
\end_layout

\begin_layout Standard
—————
\end_layout

\begin_layout Standard
It has been proposed 
\begin_inset CommandInset citation
LatexCommand cite
key "boix2013object"
literal "false"

\end_inset

: 
\begin_inset Quotes eld
\end_inset

According to chapter 3 of Abelson & Sussman 
\begin_inset CommandInset citation
LatexCommand cite
key "abelson1996structure"
literal "false"

\end_inset

, there are two fundamentally dierent ways to organise large systems: according
 to the objects that live in the system, or according to the streams of
 values that ow through the system.
 Even though the notions of 
\emph on
object
\emph default
 and 
\emph on
stream
\emph default
 have meanwhile taken many incarnations, the dichotomy still exists in mod-
 ern programming languages.
 
\begin_inset Quotes eld
\end_inset


\end_layout

\begin_layout Standard
There are two existing approaches: reactive variables that can be defined
 inside objects, and altering the traditional semantics of object and its
 fields and methods.
 In this work, object semantics is altered 
\emph on
by
\emph default
 providing reactive variables defined inside objects.
\end_layout

\begin_layout Standard
————
\end_layout

\begin_layout Standard
In OOP, classes evolve without interfering other classes by using 
\emph on
contracts
\emph default
, and encapsulating the internal implementation.
 In the simplified form, the contract is the 
\emph on
interface
\emph default
, which defines the accesible variables and methods, to consumers or subclasses
 
\begin_inset CommandInset citation
LatexCommand cite
key "duncan2003component"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
—————–
\end_layout

\begin_layout Standard
In this work we focus on the approach 
\begin_inset CommandInset citation
LatexCommand cite
key "salvaneschi2014towards"
literal "false"

\end_inset

, in which an existing language can be extended with a variation of reactive
 variables as a data type.
 Accordingly, libraries such as ReactiveX
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnote{https://reactivex.io}
\end_layout

\end_inset

 and REscala
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnote{https://www.rescala-lang.com}
\end_layout

\end_inset

, support having a variation of reactive variables as objects' data members
 (named also 
\emph on
instance variables
\emph default
).
 
\end_layout

\begin_layout Standard
————
\end_layout

\begin_layout Standard
FRP has an adjustment 
\begin_inset CommandInset citation
LatexCommand cite
key "drechsler2014distributed"
literal "false"

\end_inset

 to work with distributed applications, and it worked correctly for a small
 case study.
 In the other side, Hotdrink which is a weak FRP variation, has been investigate
d to work for one real world application, and failed in the integration
 with the micro-services architecture 
\begin_inset CommandInset citation
LatexCommand cite
key "marheim2017domain"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
————-
\end_layout

\begin_layout Standard
In the attempt to combine FRP with OOP, there is an open question whether
 to support reassignment 
\begin_inset CommandInset citation
LatexCommand cite
key "salvaneschi2014towards"
literal "false"

\end_inset

.
 Declaring class variables being reactive
\end_layout

\begin_layout Standard
variables, arises that conflict, whether to enable reassignment e.g.
 declaring A:=B+1 and then A:=C+1.
 In FRP, reassignment should not be enabled, since in FRP we “describe things
 that exist, rather than actions that have happened or are to happen
\end_layout

\begin_layout Standard
(i.e., what is, not what does)” 
\begin_inset CommandInset citation
LatexCommand cite
key "elliott2009push"
literal "false"

\end_inset

.
 In contrast, in OOP reassignment should be enabled for assigning independently
 e.g., A:=B+1 in a base class, and A:=C+1 in the
\end_layout

\begin_layout Standard
derived class.
\end_layout

\begin_layout Standard
————–
\end_layout

\begin_layout Standard
The proposed approach satisfies the guarantee 
\begin_inset CommandInset citation
LatexCommand cite
key "foust2015generating"
literal "false"

\end_inset

: 
\emph on
the same sequence of events produces the same results, regardless of the
 timing of those events.

\emph default
 This is equivalent to the referential transparency property required by
 
\end_layout

\begin_layout Standard
FRP 
\begin_inset CommandInset citation
LatexCommand cite
key "blackheath2016functional"
literal "false"

\end_inset

, such that the same input will produce consistenctly the same output.

\emph on
 
\emph default
As a result, Despite the existence of cycles, the proposed approach accomplish
 the referential transparency property, therfore it is FRP.
\end_layout

\begin_layout Standard
———-
\end_layout

\begin_layout Standard
state management
\end_layout

\begin_layout Standard
———
\end_layout

\begin_layout Standard
constraints solver - distributed
\end_layout

\end_body
\end_document
