#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass openu-thesis
\options preprint
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Abstract
The Functional Reactive Programming (FRP) paradigm specializes on maintaining
 derived variables' values.
 However, this task have difficulties in performing predictable behavior
 especially when applications grow with many code duplications and long
 chains of updates.
 While the FRP paradigm contributes to the predictability of variables'
 updates, The Object Oriented Programming (OOP) patadigm contributes to
 the predictability of code changes.
 In this thesis, we combine the two paradigms to promote the predictability.
\end_layout

\begin_layout Abstract
We use the combination of 
\emph on
reactive variable
\emph default
 from FRP and the
\emph on
 instance variable
\emph default
 from Object Oriented Programming, calling it 
\emph on
RIVar
\emph default
, a shortcut to the full name 
\emph on
Reactive Instance Variable
\emph default
.
 We propose a method that a RIVar can be assigned with formulas by several
 clients.
 The assignment semantics adopts the meaning from FRP, to relate the variable
 to be updated according to the specified formula.
 However, in contrast to FRP, there can be several assignments to the same
 variable.
 Under the hood, RIVars observe several formulas, and infer values when
 and according to the latest value coming from any of the sources.
 
\end_layout

\begin_layout Abstract
To evaluate the method, we compare the method against traditional methods,
 in how they handle variables' updates, and what code-reuse options are
 available.
 In addition, we present our implementation attached with a case study.
 The implementation is provided as an extension library, named RIVarX, to
 C# programming language.
 The case study presents how we separate one domain logic into sub-domains,
 saparating a central calculation procedure.
 In the case study, each object manages its formulas, even when the formulas
 consist of variables belonging to other objects.
\end_layout

\begin_layout Abstract
According to our results, not only we integrate FRP with OOP, but also their
 features are integrated.
 As a result, in the context of code-reuse options our method archives the
 best results.
 However, our results are limited to the semantics that variables' value
 are coming from several sources.
 Furthermore, in this thesis, we use the specific option to inffer values
 based on time (when and according to the latest value coming from any of
 the sources).
\end_layout

\begin_layout Abstract
The specific semantics are currently used only in small case studies.
 We hope that in future we will find the method used in real life applications,
 either with this specific semantics, or only using the basis of our method.
 However, this specific semantics is used in the resrach of constraints
 systems.
 this leads our method, to the best of our knowledge, being the first decentrali
zed mechanism to handle constraints systems.
 In addition, it provides another more interesting aspect for future research.
\end_layout

\end_body
\end_document
